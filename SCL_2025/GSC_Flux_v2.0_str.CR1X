ConstTable (Const_Table)
Const SCN_INTV                 = 100
Const SLW_SCN_INTV             = 5000
Const OUTPUT_INTV              = 30
Const DAY_FLUX_CRD             = 30
Const DAY_TSRS_CRD             = 1
Const NTCH_FRQ_SLW As Long     = 60
Const ONE_FL_TABLE As Boolean  = FALSE
Const IRGASON      As Boolean  = TRUE
Const CSAT3A_EC150 As Boolean  = FALSE
Const SDM_CLCK_SPD As Long     = 30
Const EC100SDM_ADR As Long     = 1
Const BANDWIDTH                = 20
Const SENSOR_GPS   As Boolean  = TRUE
Const UTC_OFST                 = 0
Const SENSOR_LI7700 As Boolean = TRUE
Const SENSOR_T_RH As Boolean   = TRUE
#If (SENSOR_T_RH) Then
Const TMPR_MULT    As Float    = 0.14
Const TMPR_OFST    As Float    = -80.0
Const RH_MULT      As Float    = 0.1
Const RH_OFST      As Float    = 0.0
#EndIf
Const SENSOR_TE525  As Boolean = FALSE
#If (SENSOR_TE525) Then
Const TE525_MULT    As Float   = 0.1
#EndIf
Const SENSOR_CS310 As Boolean  = TRUE
#If (SENSOR_CS310) Then
Const QUNTM_MULT As Float      = 100
#EndIf
Const SENSOR_SN500 As Boolean  = TRUE
#If (SENSOR_SN500) Then
Const SN500SDI_ADR             = 0
#EndIf
Const SENSOR_TCAV   As Boolean = FALSE
#If (SENSOR_TCAV)   Then
Const NMBR_TCAV     As Long    = 2
#EndIf
Const SENSOR_CS65X  As Boolean = FALSE
#If (SENSOR_CS65X) Then
Const NMBR_CS65X    As Long    = 2
Const CS65SDI_ADR1             = 4
#If (NMBR_CS65X > 1) Then
Const CS65SDI_ADR2             = 5
#EndIf
#EndIf
Const SENSOR_HFP01 As Boolean  = FALSE
#If (SENSOR_HFP01) Then
Const NMBR_HFP     As Long     = 2
Const HFP_SNSTVT_1 As Float    = 62.0
#If (NMBR_HFP > 1) Then
Const HFP_SNSTVT_2 As Float    = 62.0
#EndIf
#EndIf
EndConstTable
Const SENSOR_Rn               = (SENSOR_SN500)
Const SENSOR_HFP              = (SENSOR_HFP01)
Const SCAN_INTERVAL_WEIGHT    = SLW_SCN_INTV/(60*1000*OUTPUT_INTV)
PipeLineMode
AngleDegrees
PreserveVariables
SDMBeginPort (C5)
Const Cpd      = 1004.0
Const Cpw      = 1952.0
Const Cvd      =  717.0
Const Cvw      = 1463.0
Const Cw       = 4218.0
Const Epsilon  = 18.016/28.97
Const g0       = 9.81
Const Gamma_p  = Cpw/Cpd
Const Gamma_v  = Cvw/Cvd
Const k        = 0.41
Const MU_WPL   = 28.97/18.016
Const Omega    = 7.292e-5
Const R        = 8.3143e-3
Const Rd       = R/28.97
Const Rv       = R/18.016
Const PI       = 3.1415926
Const Sigma_SB = 5.6718e-8
Const T_0C_K   = 273.15
Dim Cp
Dim Lv
Units  Cp      = J kg-1 deg C-1
Units  Lv      = J g-1
#If (SENSOR_GPS) Then
Const GPS16X_PORT              = C1
Const GPS16X_COM_PORT          = COMC1
Const TIME_DIFF_RST_DATALOGGER = 1.0
#EndIf
#If (SENSOR_CS65X) Then
Const CS65X_SDI_PORT           = C3
#If (NMBR_CS65X >= 1) Then
#EndIf
#If (NMBR_CS65X >= 2) Then
#EndIf
#EndIf
#If (SENSOR_TE525) Then
Const TE525_PULSE_INPUT        = P2
#EndIf
#If (SENSOR_T_RH) Then
Const TMPR_T_ANALOG_INPUT      = 5
Const TMPR_RH_ANALOG_INPUT     = 6
#EndIf
#If (SENSOR_TCAV) Then
Const TCAV_ANALOG_INPUT        = 1
#If (NMBR_TCAV <= 2) Then
#If (NMBR_TCAV = 2) Then
#EndIf
#EndIf
#EndIf
#If (SENSOR_HFP) Then
Const SHF_ANALOG_INPUT         = 5
#If (NMBR_HFP > 1) Then
#EndIf
#EndIf
#If (SENSOR_SN500) Then
Const SN500_SDI_PORT           = C3
#EndIf
#If (SENSOR_CS310) Then
Const QUANTUM_ANALOG_INPUT     = 1
#EndIf
#If (SENSOR_LI7700) Then
#EndIf
Public message As String * 60
Const NMBR_DAY_CPU     = 7
Const FLUX_SIZE_CPU    = Ceiling ((NMBR_DAY_CPU*1440)/OUTPUT_INTV)
Const OFFSET           = 46
Const SCAN_BUFFER_SIZE = 30*INT (1000/SCN_INTV)
Const FIRST_NOTCH_FREQ_MAIN_SCAN = 3750
Dim card_bytes_free
Dim card_bytes_free_assgnd
Dim card_bytes_free_unassgnd
Dim day_snc_0101_1990
Dim bytes_rcd_Time_Series
Dim bytes_tbl_Time_Series
Dim days_actv_tbl_Time_Series
Dim days_more_tbl_Time_Series
Dim days_totl_tbl_Time_Series
Dim LastFileName_Time_Series      As String *36 = NaN
Dim LastFileName_Time_Series_prev As String *36 = NaN
Dim bytes_rcd_AmeriFluxFormat
Dim bytes_tbl_AmeriFluxFormat
Dim bytes_rcd_flux_CSFormat
Dim bytes_tbl_flux_CSFormat
#If (ONE_FL_TABLE) Then
Dim days_actv_tbl_flux_CSFormat
Dim days_more_tbl_flux_CSFormat
Dim days_totl_tbl_flux_CSFormat
#Else
Dim bytes_rcd_flux_notes
Dim bytes_tbl_flux_notes
Dim days_actv_tbl_flux_CSFormat_notes
Dim days_more_tbl_flux_CSFormat_notes
Dim days_totl_tbl_flux_CSFormat_notes
#EndIf
Dim LastFileName_flux_CSFormat       As String *36
Dim LastFileName_flux_CSFormat_prev  As String *36
Public card_storage_available_days
Units  card_storage_available_days = days
Dim datalogger_clock As String *22
Dim   TimeStamp_AmeriFluxFormat(2) As String *12
Alias TimeStamp_AmeriFluxFormat(1) = TIMESTAMP_START
Alias TimeStamp_AmeriFluxFormat(2) = TIMESTAMP_END
Dim stn_conf_array_file      As Long
Dim stn_conf_array_file_size As Long
Const NMBR_STN_VAR       = (19 - 1*SENSOR_GPS - 3*((SENSOR_HFP) AND (SENSOR_CS65X)))
Public stn_conf_array(NMBR_STN_VAR)
Alias stn_conf_array(1)  = sonic_azimuth
Alias stn_conf_array(2)  = latitude
Alias stn_conf_array(3)  = hemisphere_NS
Alias stn_conf_array(4)  = longitude
Alias stn_conf_array(5)  = hemisphere_EW
Alias stn_conf_array(6)  = elevation
Alias stn_conf_array(7)  = height_measurement
Alias stn_conf_array(8)  = surface_type
Alias stn_conf_array(9)  = height_canopy
Alias stn_conf_array(10) = displacement_user
Alias stn_conf_array(11) = roughness_user
Alias stn_conf_array(12) = separation_x_irga
Alias stn_conf_array(13) = separation_y_irga
Alias stn_conf_array(14) = fetch_intrst_60_300
Alias stn_conf_array(15) = fetch_intrst_60_170
Alias stn_conf_array(16) = fetch_intrst_170_190
Alias stn_conf_array(17) = fetch_intrst_190_300
Alias stn_conf_array(18) = fetch_wd_thrshold_low
Alias stn_conf_array(19) = fetch_wd_thrshold_top
Units sonic_azimuth         = decimal degrees
Units latitude              = decimal degrees
Units hemisphere_NS         = adimensional
Units longitude             = decimal degrees
Units hemisphere_EW         = adimensional
Units elevation             = m
Units height_measurement    = m
Units surface_type          = adimensional
Units height_canopy         = m
Units displacement_user     = m
Units roughness_user        = m
Units separation_x_irga     = m
Units separation_y_irga     = m
Units fetch_intrst_60_300   = m
Units fetch_intrst_60_170   = m
Units fetch_intrst_170_190  = m
Units fetch_intrst_190_300  = m
Units fetch_wd_thrshold_low = decimal degrees
Units fetch_wd_thrshold_top = decimal degrees
#If (SENSOR_GPS) Then
Alias stn_conf_array(20) = height_GPS16X
Units height_GPS16X      = m
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X) Then
Alias stn_conf_array(20 - 1*SENSOR_GPS) = soil_bulk_density
Alias stn_conf_array(21 - 1*SENSOR_GPS) = Cds
Alias stn_conf_array(22 - 1*SENSOR_GPS) = thick_abv_SHFP
Units soil_bulk_density  = kg m-3
Units Cds                = J K-1 kg-1
Units thick_abv_SHFP     = m
#EndIf
Dim stn_conf_array_prev(NMBR_STN_VAR)
Const NORTH =  1
Const SOUTH = -1
Const EAST  =  1
Const WEST  = -1
Const CROP     = 1
Const GRASS    = 2
Const FOREST   = 3
Const SHRUB    = 4
Const BARELAND = 5
Const WATER    = 6
Const ICE      = 7
Dim surface_type_array(7) As String * 9 = {"Crop", "Grass", "Forest", "Shrub", "Bare land", "Water", "Ice"}
Dim surface_type_text     As String * 9
#If (SENSOR_GPS) Then
Dim nmea_sentence(2) As String * 100
Public gps_array(15)
Alias gps_array(1) = latitude_GPS_degree
Alias gps_array(2) = latitude_GPS_minute
Alias gps_array(3) = longitude_GPS_degree
Alias gps_array(4) = longitude_GPS_minute
Alias gps_array(5) = speed
Alias gps_array(6) = course
Alias gps_array(7) = magnetic_variation
Alias gps_array(8) = fix_quality
Alias gps_array(9) = nmbr_satellites
Alias gps_array(10) = elevation_GPS
Alias gps_array(11) = pps
Alias gps_array(12) = dt_since_gprmc
Alias gps_array(13) = gps_ready
Alias gps_array(14) = max_clock_change
Alias gps_array(15) = nmbr_clock_change
Units latitude_GPS_degree  = decimal degrees
Units latitude_GPS_minute  = minutes
Units longitude_GPS_degree = decimal degrees
Units longitude_GPS_minute = minutes
Units speed                = m s-1
Units course               = decimal degrees
Units magnetic_variation   = decimal degrees
Units fix_quality          = adimensional
Units nmbr_satellites      = counts
Units elevation_GPS        = m
Units pps                  = us
Units dt_since_gprmc       = s
Units gps_ready            = adimensional
Units max_clock_change     = ms
Units nmbr_clock_change    = counts
Dim gps_ready_best As Long
#EndIf
Dim   solar_position_array(5)
Alias solar_position_array(1) = sun_azimuth
Alias solar_position_array(2) = sun_elevation
Alias solar_position_array(3) = hour_angle
Alias solar_position_array(4) = sun_declination
Alias solar_position_array(5) = air_mass_coeff
Units sun_azimuth     = decimal degrees
Units sun_elevation   = decimal degrees
Units hour_angle      = decimal degrees
Units sun_declination = decimal degrees
Units air_mass_coeff  = adimensional
Dim daytime As Long
Dim    daytime_frac_scan_intv
Units  daytime_frac_scan_intv = fraction
Dim realtime_array(9)
Dim scan_count                As Long
Dim slowsequence_finished_f   As Boolean
Dim slowsequence_disable_f    As Boolean
Dim i, i_slow, j_slow, k_slow As Long
Dim array_index               As Long
Dim NaN_cnt                   As Long
Dim n As Long = 1
Units n = samples
Dim dly_data_out(8)
Dim x_tmp, T_tmp
Dim truefalse(2) As String * 5 = {"TRUE", "FALSE"}
Dim process_time
Units process_time = ms
Dim buff_depth
Units buff_depth = scans
Public T_panel: Units T_panel = deg C
Public V_batt : Units V_batt  = V
Public    V_batt_runng
Dim alpha
Dim beta
Dim gamma
Units alpha = Decimal degrees
Units beta  = Decimal degrees
Units gamma = Decimal degrees
Dim alpha_5min
Dim beta_5min
Dim gamma_5min
Units alpha_5min = Decimal degrees
Units beta_5min  = Decimal degrees
Units gamma_5min = Decimal degrees
Dim planar_fit_angle_conf_array_file      As Long
Dim planar_fit_angle_conf_array_file_size As Long
Dim planar_fit_angle_conf_array_prev(4,2)
Public planar_fit_angle_conf_array(4,2)
Units  planar_fit_angle_conf_array      = Decimal degrees
Alias planar_fit_angle_conf_array (1,1) = alpha_PF_60_300
Alias planar_fit_angle_conf_array (2,1) = alpha_PF_60_170
Alias planar_fit_angle_conf_array (3,1) = alpha_PF_170_190
Alias planar_fit_angle_conf_array (4,1) = alpha_PF_190_300
Alias planar_fit_angle_conf_array (1,2) = beta_PF_60_300
Alias planar_fit_angle_conf_array (2,2) = beta_PF_60_170
Alias planar_fit_angle_conf_array (3,2) = beta_PF_170_190
Alias planar_fit_angle_conf_array (4,2) = beta_PF_190_300
Public Planar_Fit_flg As Boolean
Dim    MO_LENGTH
Dim    PBLH_F
Public d
Public z0
Public z
Dim    z_prev
Dim    ZL
Dim    ZL_prev
Units  MO_LENGTH  = m
Units  PBLH_F     = m
Units  d          = m
Units  z0         = m
Units  z          = m
Units  ZL         = adimensional
Const START_FREQ           = 10e-6
Const END_FREQ             = 10000.0
Const FREQ_BIN             = 100.0
Const STEP_BASE_FREQ       = EXP((LN(END_FREQ)- LN(START_FREQ))/FREQ_BIN)
Const ACCURACY_FREQ_FACTOR = 0.0001
Const MAX_LAG              = 5
Dim   iteration_FreqFactor As Long
Dim    FreqFactor_UW_VW         = 1
Dim    FreqFactor_UW_VW_Prev    = 1 - 2*ACCURACY_FREQ_FACTOR
Dim    FreqFactor_WT_SONIC      = 1
Dim    FreqFactor_WT_SONIC_Prev = 1 - 2*ACCURACY_FREQ_FACTOR
Dim    FreqFactor_WCO2_WH2O     = 1
Units FreqFactor_UW_VW     = adimensional
Units FreqFactor_WT_SONIC  = adimensional
Units FreqFactor_WCO2_WH2O = adimensional
Dim tran_func_LA_data_Dijk(2,35) = { _
0.00,0.01,0.10,0.20,0.50,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,2.80,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,14.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100,300,10000, _
1.00000,1.00000,0.99920,0.99760,0.99000,0.96700,0.95500,0.94170,0.92740,0.91220,0.89620,0.87970,0.86260,0.84520,0.82740,0.80960,0.72010,0.63530, _
0.55880,0.49220,0.43550,0.38790,0.34810,0.24450,0.17000,0.11340,0.08503,0.06802,0.05668,0.04859,0.04251,0.03779,0.03401,1.89888e-2,1.6168e-4}
Const BB       = 0
Const UB       = 1
Const EB       = 2
Const PWR_ON   = 0
Const PWR_OFF  = 1
Const H_AUTO   = -2
Const H_MAX    = 0
Const H_OFF    = -1
Const FAST_ON  As Boolean = TRUE
Const FAST_OFF As Boolean = FALSE
Const CORR_ON  = 1
Const CORR_OFF = 0
Public press_source
Public heater_actual
Public heater_user = H_AUTO
Public irga_power
Dim    CO2_fast_tmpr        As Boolean = TRUE
Public select_CO2_fast_tmpr As Boolean = TRUE
Public shadow_corr
Public CO2_span_gas       = 420
Units  CO2_span_gas       = umol mol-1
Dim    CO2_span_gas_prev  = 420
Public T_DP_span_gas      = 20
Units  T_DP_span_gas      = deg C
Dim    T_DP_span_gas_prev = 20
Const DIFFERENTIAL_PRESS  = 0
Const TEMPERATURE_SOURCE  = 0
Dim ec100_setting_array(11, 2) = {100, NaN, 102, NaN, 103, NaN, 107, NaN, 114, NaN, 115, NaN, 116, NaN, 117, NaN, 118, NaN, 121, NaN, 125, NaN}
Dim ec100_reset_array  (11, 2) = {0,   NaN,   2, NaN,   3, NaN,   7, NaN,  14, NaN,  15, NaN,  16, NaN,  17, NaN,  18, NaN,  21, NaN,  25, NaN}
Dim config_ec100_array (4, 2)  = {0, BANDWIDTH, 3, DIFFERENTIAL_PRESS, 7, TEMPERATURE_SOURCE, 18, H_AUTO}
Dim press_source_array (1, 2)  = {2, NaN}
Dim zro_array          (1, 2)  = {11, 1}
Dim spn_CO2_array      (2, 2)  = {12, 0, 11, 2}
Dim spn_H2O_array      (2, 2)  = {13, 0, 11, 3}
Dim irga_pwr_array     (2, 2)  = {21, 0, 18, -2}
Dim shadow_corr_array  (1, 2)  = {25, NaN}
Public zro_spn_coef_array(4) = {NaN, NaN, NaN, NaN}
Alias  zro_spn_coef_array(1) = CO2_zero_coeff
Alias  zro_spn_coef_array(2) = CO2_span_coeff
Alias  zro_spn_coef_array(3) = H2O_zero_coeff
Alias  zro_spn_coef_array(4) = H2O_span_coeff
Dim rst_zro_spn_coeff_array(4, 2) = {14, 1.000375, 15, 1.000386, 16, 0.999269, 17, 0.997258}
Const NMBR_RCRDS_OPRTN_NOTES_CPU = Ceiling (3*7 + 3)
Const NMBR_RCRDS_OPRTN_NOTES_CRD = Ceiling (3*366+100)
Const NMBR_RCRDS_CONFIG_NOTES_CPU = Ceiling (3*7 + 3)
Const NMBR_RCRDS_CONFIG_NOTES_CRD = Ceiling (3*366+100)
Dim    config_ec100_initial_f  As Boolean = TRUE
Dim    get_ec100_config_f      As Boolean = TRUE
Dim    config_ec100_f          As Boolean = TRUE
Public set_press_source_flg  As Boolean
Public set_zero_flg          As Boolean
Public set_CO2_span_flg      As Boolean
Public set_H2O_span_flg      As Boolean
Public set_heater_flg        As Boolean
Public set_irga_power_flg    As Boolean
Public set_CO2_fast_tmpr_flg As Boolean
Public set_shadow_corr_flg   As Boolean
Public rst_zro_spn_coef_flg_array(4) As Boolean = {FALSE, FALSE, FALSE, FALSE}
Alias  rst_zro_spn_coef_flg_array(1) = rst_CO2_zro_coef_flg
Alias  rst_zro_spn_coef_flg_array(2) = rst_CO2_spn_coef_flg
Alias  rst_zro_spn_coef_flg_array(3) = rst_H2O_zro_coef_flg
Alias  rst_zro_spn_coef_flg_array(4) = rst_H2O_spn_coef_flg
Dim    irga_pwr_off_f        As Boolean = FALSE
Dim    irga_pwr_off_f_prev   As Boolean
Dim    irga_pwr_switch_f     As Boolean
Dim    ec100_set_reset_f     As Boolean
Public irga_vlt_low_auto_off As Boolean
Public irga_actual_pwr_on    As Boolean = TRUE
Public irga_user_set_pwr_on  As Boolean = TRUE
Dim    irga_off_bit          As Long
Dim    irga_startup_bit      As Long
Public secs_snc_pwr_swtch
Const SYSTEM_PWR_OFF_SET_PT          = 12.15
Const SYSTEM_PWR_DEAD_BAND_WIDTH     = 0.5
Dim   cnt_lwr_pwr_off_set_pt As Long = 0
Public pwr_ctrl_sdmcd16ac(16) As Boolean = True
Public pwr_ctrl_ethernet as Boolean = True
Dim config_type        As String * 16 = NaN
Dim config_status      As String * 10 = NaN
Dim config_command     As Long
Dim operatn_failed_cnt As Long
Dim   value_str(5) As String * 40 = {NaN, NaN, NaN, NaN, NaN}
Alias value_str(1) = curr_value_str
Alias value_str(2) = prev_value_str
Alias value_str(3) = prev_value_str_CO2
Alias value_str(4) = prev_value_str_H2O
Alias value_str(5) = prev_value_str_pwr
Sub Config (cmd_array(11, 2), num_cmd As Long, retry_config_f As Boolean)
Dim i_cnfg           As Long
Dim config_result    As Long
Dim save_flash_f     As Boolean
Dim SkippedScan_prev As Long
save_flash_f      = FALSE
SkippedScan_prev = status.SkippedScan
For i_cnfg = 1 To num_cmd
retry_config_f = TRUE
save_flash_f   = FALSE
EC100Configure (config_result, EC100SDM_ADR, cmd_array(i_cnfg, 1), cmd_array(i_cnfg, 2))
If (config_result = NAN) Then
ExitFor
EndIf
Select Case cmd_array(i_cnfg, 1)
Case 0, 2, 3, 7, 11, 12, 13, 14, 15, 16, 17, 18, 21, 25
save_flash_f = TRUE
Case 100, 102, 103, 107, 114, 115, 116, 117, 118, 121, 125
retry_config_f = FALSE
save_flash_f   = FALSE
EndSelect
Next i_cnfg
If (cmd_array(num_cmd, 1) = 11) Then
Delay (1, 3500, mSec)
Else
Delay (1, 1500, mSec)
EndIf
If ((i_cnfg = num_cmd + 1)  AND (save_flash_f) AND (config_result <> NAN)) Then
EC100Configure (config_result, EC100SDM_ADR, 99, 2718)
retry_config_f = FALSE
EndIf
SetStatus ("SkippedScan", SkippedScan_prev)
EndSub
DataTable (Config_Setting_Notes, TRUE, NMBR_RCRDS_CONFIG_NOTES_CPU)
CardOut (0, NMBR_RCRDS_CONFIG_NOTES_CRD)
Sample (1, config_type,   String)
Sample (1, config_status, String)
Sample (1, ec100_setting_array(1, 2), IEEE4)
FieldNames ("bandwidth_freq")
Sample (1, ec100_setting_array(2, 2), IEEE4)
FieldNames ("press_source")
Sample (1, ec100_setting_array(3, 2), IEEE4)
FieldNames ("diff_press")
Sample (1, ec100_setting_array(4, 2), IEEE4)
FieldNames ("tmpr_source")
Sample (1, ec100_setting_array(5, 2), IEEE4)
FieldNames ("CO2_zero_coeff")
Sample (1, ec100_setting_array(6, 2), IEEE4)
FieldNames ("CO2_span_coeff")
Sample (1, ec100_setting_array(7, 2), IEEE4)
FieldNames ("H2O_zero_coeff")
Sample (1, ec100_setting_array(8, 2), IEEE4)
FieldNames ("H2O_span_coeff")
Sample (1, CO2_span_gas, IEEE4)
FieldNames ("CO2_span_mixra")
Sample (1, T_DP_span_gas, IEEE4)
FieldNames ("H2O_span_T_DP")
Sample (1, ec100_setting_array(9, 2), IEEE4)
FieldNames ("IRGA_Heat_ctrl")
Sample (1, ec100_setting_array(10, 2), IEEE4)
FieldNames ("IRGA_power")
Sample (1, truefalse (2 + CO2_fast_tmpr), String)
FieldNames ("CO2_fast_tmpr")
Sample (1, ec100_setting_array(11, 2), IEEE4)
FieldNames ("shadow_corr")
EndTable
Const PATH_LENGTH_CSAT = 0.1154701
Public sonic(5)
Alias  sonic(1) = Ts
Alias  sonic(2) = Ux
Alias  sonic(3) = Uy
Alias  sonic(4) = Uz
Alias  sonic(5) = diag_sonic
Units  Ts = deg C
Units  Ux = m s-1
Units  Uy = m s-1
Units  Uz = m s-1
Units  diag_sonic = adimensional
Dim U_rslt
Dim   diag_bits_sonic(6) As Long
Alias diag_bits_sonic(1) = sonic_amp_l_f
Alias diag_bits_sonic(2) = sonic_amp_h_f
Alias diag_bits_sonic(3) = sonic_sig_lck_f
Alias diag_bits_sonic(4) = sonic_del_T_f
Alias diag_bits_sonic(5) = sonic_aq_sig_f
Alias diag_bits_sonic(6) = sonic_cal_err_f
Units diag_bits_sonic    = adimensional
Dim sonic_irga_raw(14)
Dim sonic_irga_raw_prev(14)
Dim diag_sonic_tmp  As Long
Dim sonic_disable_f As Boolean
Dim   diag_sonic_aggregate As Long
Units diag_sonic_aggregate = adimensional
Dim mask As Long
Dim Ts_K
Dim cov_out_sonic(20)
Alias cov_out_sonic(1)  = Ux_Avg
Alias cov_out_sonic(2)  = Ux_SIGMA
Alias cov_out_sonic(3)  = UxUy_Cov
Alias cov_out_sonic(4)  = UxUz_Cov
Alias cov_out_sonic(5)  = Uy_Avg
Alias cov_out_sonic(6)  = Uy_SIGMA
Alias cov_out_sonic(7)  = UyUz_Cov
Alias cov_out_sonic(8)  = Uz_Avg
Alias cov_out_sonic(9)  = Uz_SIGMA
Alias cov_out_sonic(10) = Ts_Avg
Alias cov_out_sonic(11) = Ts_SIGMA
Alias cov_out_sonic(12) = TsUx_Cov
Alias cov_out_sonic(13) = TsUy_Cov
Alias cov_out_sonic(14) = TsUz_Cov
Alias cov_out_sonic(15) = WS
Alias cov_out_sonic(16) = WS_RSLT
Alias cov_out_sonic(17) = WD_SONIC
Alias cov_out_sonic(18) = WD_SIGMA
Alias cov_out_sonic(19) = WS_MAX
Alias cov_out_sonic(20) = WD
Units Ux_Avg   = m s-1
Units Ux_SIGMA = m s-1
Units UxUy_Cov = m2 s-2
Units UxUz_Cov = m2 s-2
Units Uy_Avg   = m s-1
Units Uy_SIGMA = m s-1
Units UyUz_Cov = m2 s-2
Units Uz_Avg   = m s-1
Units Uz_SIGMA = m s-1
Units Ts_Avg   = deg C
Units Ts_SIGMA = deg C
Units TsUx_Cov = deg C m s-1
Units TsUy_Cov = deg C m s-1
Units TsUz_Cov = deg C m s-1
Units WS       = m s-1
Units WS_RSLT  = m s-1
Units WD_SONIC = decimal degrees
Units WD_SIGMA = decimal degrees
Units WS_MAX   = m s-1
Units WD       = decimal degrees
Dim USTAR_R
Dim U
Dim U_SIGMA
Dim UV_Cov
Dim UW_Cov
Dim V
Dim V_SIGMA
Dim VW_Cov
Dim W
Dim W_SIGMA
Dim T_SONIC
Dim T_SONIC_SIGMA
Dim UT_SONIC_Cov
Dim VT_SONIC_Cov
Dim WT_SONIC_Cov
Units USTAR_R = m s-1
Units U       = m s-1
Units U_SIGMA = m s-1
Units UV_Cov  = m2 s-2
Units UW_Cov  = m2 s-2
Units V       = m s-1
Units V_SIGMA = m s-1
Units VW_Cov  = m2 s-2
Units W       = m s-1
Units W_SIGMA = m s-1
Units T_SONIC = deg C
Units T_SONIC_SIGMA = deg C
Units UT_SONIC_Cov  = deg C m s-1
Units VT_SONIC_Cov  = deg C m s-1
Units WT_SONIC_Cov  = deg C m s-1
Dim    TKE
Units  TKE = m2 s-2
Dim TAU
Dim USTAR
Dim WT_SONIC_Cov_fc
Dim UW_Cov_fc
Dim VW_Cov_fc
Units TAU             = kg m-1 s-2
Units USTAR           = m s-1
Units WT_SONIC_Cov_fc = deg C m s-1
Units UW_Cov_fc       = m2 s-2
Units VW_Cov_fc       = m2 s-2
Dim    WT_SONIC_Cov_fc_SND
Dim    TSTAR
Dim    H
Units  WT_SONIC_Cov_fc_SND = deg C m s-1
Units  TSTAR               = deg C
Units  H                   = W m-2
Const OUTPUT_INTERVAL_SST As Long = 5
Dim RN_UW_VW_cov
Dim RN_UW_cov
Dim RN_VW_cov
Dim RN_WT_SONIC_cov
Dim nmbr_interval_qc_csat
Dim cov_out_sonic_SST(17)
Alias cov_out_sonic_SST(1)  = Ux_Avg_SST
Alias cov_out_sonic_SST(2)  = Ux_Var_SST
Alias cov_out_sonic_SST(3)  = UxUy_Cov_SST
Alias cov_out_sonic_SST(4)  = UxUz_Cov_SST
Alias cov_out_sonic_SST(5)  = Uy_Avg_SST
Alias cov_out_sonic_SST(6)  = Uy_Var_SST
Alias cov_out_sonic_SST(7)  = UyUz_Cov_SST
Alias cov_out_sonic_SST(8)  = Uz_Avg_SST
Alias cov_out_sonic_SST(9)  = Uz_Var_SST
Alias cov_out_sonic_SST(10) = T_SONIC_Var_SST
Alias cov_out_sonic_SST(11) = TsUx_Cov_SST
Alias cov_out_sonic_SST(12) = TsUy_Cov_SST
Alias cov_out_sonic_SST(13) = TsUz_Cov_SST
Alias cov_out_sonic_SST(14) = WS_SST
Alias cov_out_sonic_SST(15) = WS_RSLT_SST
Alias cov_out_sonic_SST(16) = WD_SONIC_SST
Alias cov_out_sonic_SST(17) = WD_SIGMA_SST
Dim U_SST
Dim U_Var_SST
Dim UV_Cov_SST
Dim UW_Cov_SST
Dim V_SST
Dim V_Var_SST
Dim VW_Cov_SST
Dim W_SST
Dim W_Var_SST
Dim UT_SONIC_Cov_SST
Dim VT_SONIC_Cov_SST
Dim WT_SONIC_Cov_SST
Dim    TAU_SSITC_TEST
Dim    H_SSITC_TEST
Units  TAU_SSITC_TEST = adimensional
Units  H_SSITC_TEST   = adimensional
Dim   TAU_QC
Dim   H_QC
Units TAU_QC = grade
Units H_QC   = grade
Const  NMBR_INT_INTERV_SEGMENT = 20
Dim FETCH_MAX
Dim FETCH_90
Dim FETCH_80
Dim FETCH_70
Dim FETCH_INTRST
Dim FP_FETCH_INTRST
Dim FETCH_FILTER
Units FETCH_MAX = m
Units FETCH_90  = m
Units FETCH_80  = m
Units FETCH_70  = m
Units FETCH_INTRST    = m
Units FP_FETCH_INTRST = %
Units FETCH_FILTER    = adimensional
Dim   FP_EQUATION As String * 14
Units FP_EQUATION = authors
DataTable (delay_3d, TRUE, OFFSET)
TableHide
Sample (4, sonic_irga_raw(1), IEEE4)
Sample (1, sonic_irga_raw(5), IEEE4)
EndTable
DataTable (comp_cov_3d_5min, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTERVAL_SST, Min, 0)
Average    (1, Ux, IEEE4, sonic_disable_f)
Covariance (3, Ux, IEEE4, sonic_disable_f, 3)
Average    (1, Uy, IEEE4, sonic_disable_f)
Covariance (2, Uy, IEEE4, sonic_disable_f, 2)
Average    (1,Uz, IEEE4, sonic_disable_f)
Covariance (1,Uz, IEEE4, sonic_disable_f, 1)
Covariance (4, Ts, IEEE4, sonic_disable_f, 4)
WindVector (1, Uy, Ux, IEEE4, sonic_disable_f, 0, 1, 2)
EndTable
DataTable (comp_cov_3d, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
Average    (1, Ux, IEEE4,sonic_disable_f)
Covariance (3, Ux, IEEE4,sonic_disable_f, 3)
Average    (1, Uy, IEEE4,sonic_disable_f)
Covariance (2, Uy, IEEE4,sonic_disable_f, 2)
Average    (1, Uz, IEEE4,sonic_disable_f)
Covariance (1, Uz, IEEE4,sonic_disable_f, 1)
Average    (1, Ts, IEEE4,sonic_disable_f)
Covariance (4, Ts, IEEE4,sonic_disable_f, 4)
WindVector (1, Uy, Ux, IEEE4, sonic_disable_f, 0, 1, 2)
Maximum (1, U_rslt, IEEE4, sonic_disable_f, FALSE)
EndTable
Const DELAY_EC100               = INT ((4000/BANDWIDTH)/SCN_INTV)
Const EC100_REC_BCK             = OFFSET - DELAY_EC100
Const PATH_LENGTH_IRGA          = 0.1531
Const CO2_SIG_STRGTH_THRESHOLD  = 0.70
Const H2O_SIG_STRGTH_THRESHOLD  = 0.70
Const CO2_RNG_TOP_LIMIT         = 1527.0
Const H2O_RNG_TOP_LIMIT         = 45.8
Dim separation_lat_dist_irga
Dim separation_lag_dist_irga
Dim separation_lag_scan_irga
Units separation_lat_dist_irga = m
Units separation_lag_dist_irga = m
Units separation_lag_scan_irga = scans
Public irga(22)
Alias irga(1)  = CO2_density
Alias irga(2)  = H2O_density
Alias irga(3)  = diag_irga
Alias irga(4)  = T_amb
Alias irga(5)  = press_amb
Alias irga(6)  = CO2_sig_strgth
Alias irga(7)  = H2O_sig_strgth
Alias irga(8)  = RH_amb
Alias irga(9)  = T_DP_amb
Alias irga(10) = e_sat_amb
Alias irga(11) = e_amb
Alias irga(12) = rho_d_amb
Alias irga(13) = rho_a_amb
Alias irga(14) = Tc
Alias irga(15) = RH
Alias irga(16) = T_DP
Alias irga(17) = e_sat
Alias irga(18) = e
Alias irga(19) = rho_d
Alias irga(20) = rho_a
Alias irga(21) = CO2_mixratio
Alias irga(22) = H2O_mixratio
Units CO2_density    = mg m-3
Units H2O_density    = g m-3
Units diag_irga      = adimensional
Units T_amb          = deg C
Units press_amb      = kPa
Units CO2_sig_strgth = fraction
Units H2O_sig_strgth = fraction
Units RH_amb         = %
Units T_DP_amb       = deg C
Units e_sat_amb      = kPa
Units e_amb          = kPa
Units rho_d_amb      = g m-3
Units rho_a_amb      = kg m-3
Units Tc             = deg C
Units RH             = %
Units T_DP           = deg C
Units e_sat          = kPa
Units e              = kPa
Units rho_d          = g m-3
Units rho_a          = kg m-3
Units CO2_mixratio   = umol/mol
Units H2O_mixratio   = mmol/mol
Dim   Mixratio_kd(2)
Alias Mixratio_kd(1)  = CO2_mixratio_kd
Alias Mixratio_kd(2)  = H2O_mixratio_kd
Units CO2_mixratio_kd = umol mol-1
Units H2O_mixratio_kd = mmol mol-1
Dim CO2_density_slow_tmpr
Dim CO2_density_fast_tmpr
Dim   diag_irga_aggregate As Long
Units diag_irga_aggregate = adimensional
Dim diag_bits_irga(22) As Boolean
Alias diag_bits_irga(1)  = irga_bad_data_f
Alias diag_bits_irga(2)  = irga_gen_fault_f
Alias diag_bits_irga(3)  = irga_startup_f
Alias diag_bits_irga(4)  = irga_motor_spd_f
Alias diag_bits_irga(5)  = irga_tec_tmpr_f
Alias diag_bits_irga(6)  = irga_src_pwr_f
Alias diag_bits_irga(7)  = irga_src_tmpr_f
Alias diag_bits_irga(8)  = irga_src_curr_f
Alias diag_bits_irga(9)  = irga_off_f
Alias diag_bits_irga(10) = irga_sync_f
Alias diag_bits_irga(11) = irga_amb_tmpr_f
Alias diag_bits_irga(12) = irga_amb_press_f
Alias diag_bits_irga(13) = irga_CO2_I_f
Alias diag_bits_irga(14) = irga_CO2_Io_f
Alias diag_bits_irga(15) = irga_H2O_I_f
Alias diag_bits_irga(16) = irga_H2O_Io_f
Alias diag_bits_irga(17) = irga_CO2_Io_var_f
Alias diag_bits_irga(18) = irga_H2O_Io_var_f
Alias diag_bits_irga(19) = irga_CO2_sig_strgth_f
Alias diag_bits_irga(20) = irga_H2O_sig_strgth_f
Alias diag_bits_irga(21) = irga_cal_err_f
Alias diag_bits_irga(22) = irga_htr_ctrl_off_f
Units diag_bits_irga     = adimensional
Dim divisor_dry, divisor_wet
Dim diag_irga_tmp  As Long
Dim irga_disable_f As Boolean
Dim sigma_wpl
Dim Tc_K
Dim cov_array_CO2(2* MAX_LAG + 1, 5)
Dim irga_bad_data_flg_array(2* MAX_LAG + 1) As Boolean
Dim CO2_bad_rng_sig_array(2* MAX_LAG + 1)   As Boolean
Dim H2O_bad_rng_sig_array(2* MAX_LAG + 1)   As Boolean
Dim Cov_out_CO2(7*(2*MAX_LAG + 1))
Alias Cov_out_CO2(1) = CO2_Avg_lag_b5
Alias Cov_out_CO2(2) = CO2_Var_lag_b5
Alias Cov_out_CO2(3) = CO2_density_Avg_lag_b5
Alias Cov_out_CO2(4) = CO2_density_Var_lag_b5
Alias Cov_out_CO2(5) = UxCO2_Cov_lag_b5
Alias Cov_out_CO2(6) = UyCO2_Cov_lag_b5
Alias Cov_out_CO2(7) = UzCO2_Cov_lag_b5
Alias Cov_out_CO2(8)  = CO2_Avg_lag_b4
Alias Cov_out_CO2(9)  = CO2_Var_lag_b4
Alias Cov_out_CO2(10) = CO2_density_Avg_lag_b4
Alias Cov_out_CO2(11) = CO2_density_Var_lag_b4
Alias Cov_out_CO2(12) = UxCO2_Cov_lag_b4
Alias Cov_out_CO2(13) = UyCO2_Cov_lag_b4
Alias Cov_out_CO2(14) = UzCO2_Cov_lag_b4
Alias Cov_out_CO2(15) = CO2_Avg_lag_b3
Alias Cov_out_CO2(16) = CO2_Var_lag_b3
Alias Cov_out_CO2(17) = CO2_density_Avg_lag_b3
Alias Cov_out_CO2(18) = CO2_density_Var_lag_b3
Alias Cov_out_CO2(19) = UxCO2_Cov_lag_b3
Alias Cov_out_CO2(20) = UyCO2_Cov_lag_b3
Alias Cov_out_CO2(21) = UzCO2_Cov_lag_b3
Alias Cov_out_CO2(22) = CO2_Avg_lag_b2
Alias Cov_out_CO2(23) = CO2_Var_lag_b2
Alias Cov_out_CO2(24) = CO2_density_Avg_lag_b2
Alias Cov_out_CO2(25) = CO2_density_Var_lag_b2
Alias Cov_out_CO2(26) = UxCO2_Cov_lag_b2
Alias Cov_out_CO2(27) = UyCO2_Cov_lag_b2
Alias Cov_out_CO2(28) = UzCO2_Cov_lag_b2
Alias Cov_out_CO2(29) = CO2_Avg_lag_b1
Alias Cov_out_CO2(30) = CO2_Var_lag_b1
Alias Cov_out_CO2(31) = CO2_density_Avg_lag_b1
Alias Cov_out_CO2(32) = CO2_density_Var_lag_b1
Alias Cov_out_CO2(33) = UxCO2_Cov_lag_b1
Alias Cov_out_CO2(34) = UyCO2_Cov_lag_b1
Alias Cov_out_CO2(35) = UzCO2_Cov_lag_b1
Alias Cov_out_CO2(36) = CO2_Avg_lag_0
Alias Cov_out_CO2(37) = CO2_Var_Lag_0
Alias Cov_out_CO2(38) = CO2_density_Avg_lag_0
Alias Cov_out_CO2(39) = CO2_density_Var_lag_0
Alias Cov_out_CO2(40) = UxCO2_Cov_lag_0
Alias Cov_out_CO2(41) = UyCO2_Cov_lag_0
Alias Cov_out_CO2(42) = UzCO2_Cov_lag_0
Alias Cov_out_CO2(43) = CO2_Avg_lag_f1
Alias Cov_out_CO2(44) = CO2_Var_lag_f1
Alias Cov_out_CO2(45) = CO2_density_Avg_lag_f1
Alias Cov_out_CO2(46) = CO2_density_Var_lag_f1
Alias Cov_out_CO2(47) = UxCO2_Cov_lag_f1
Alias Cov_out_CO2(48) = UyCO2_Cov_lag_f1
Alias Cov_out_CO2(49) = UzCO2_Cov_lag_f1
Alias Cov_out_CO2(50) = CO2_Avg_lag_f2
Alias Cov_out_CO2(51) = CO2_Var_lag_f2
Alias Cov_out_CO2(52) = CO2_density_Avg_f2
Alias Cov_out_CO2(53) = CO2_density_Var_lag_f2
Alias Cov_out_CO2(54) = UxCO2_Cov_lag_f2
Alias Cov_out_CO2(55) = UyCO2_Cov_lag_f2
Alias Cov_out_CO2(56) = UzCO2_Cov_lag_f2
Alias Cov_out_CO2(57) = CO2_Avg_lag_f3
Alias Cov_out_CO2(58) = CO2_Var_lag_f3
Alias Cov_out_CO2(59) = CO2_density_Avg_f3
Alias Cov_out_CO2(60) = CO2_density_Var_lag_f3
Alias Cov_out_CO2(61) = UxCO2_Cov_lag_f3
Alias Cov_out_CO2(62) = UyCO2_Cov_lag_f3
Alias Cov_out_CO2(63) = UzCO2_Cov_lag_f3
Alias Cov_out_CO2(64) = CO2_Avg_lag_f4
Alias Cov_out_CO2(65) = CO2_Var_lag_f4
Alias Cov_out_CO2(66) = CO2_density_Avg_f4
Alias Cov_out_CO2(67) = CO2_density_Var_lag_f4
Alias Cov_out_CO2(68) = UxCO2_Cov_lag_f4
Alias Cov_out_CO2(69) = UyCO2_Cov_lag_f4
Alias Cov_out_CO2(70) = UzCO2_Cov_lag_f4
Alias Cov_out_CO2(71) = CO2_Avg_lag_f5
Alias Cov_out_CO2(72) = CO2_Var_lag_f5
Alias Cov_out_CO2(73) = CO2_density_Avg_f5
Alias Cov_out_CO2(74) = CO2_density_Var_lag_f5
Alias Cov_out_CO2(75) = UxCO2_Cov_lag_f5
Alias Cov_out_CO2(76) = UyCO2_Cov_lag_f5
Alias Cov_out_CO2(77) = UzCO2_Cov_lag_f5
Dim   WCO2_Cov_lag(2*MAX_LAG + 1)
Alias WCO2_Cov_lag(1)  = WCO2_Cov_lag_b5
Alias WCO2_Cov_lag(2)  = WCO2_Cov_lag_b4
Alias WCO2_Cov_lag(3)  = WCO2_Cov_lag_b3
Alias WCO2_Cov_lag(4)  = WCO2_Cov_lag_b2
Alias WCO2_Cov_lag(5)  = WCO2_Cov_lag_b1
Alias WCO2_Cov_lag(6)  = WCO2_Cov_lag_0
Alias WCO2_Cov_lag(7)  = WCO2_Cov_lag_f1
Alias WCO2_Cov_lag(8)  = WCO2_Cov_lag_f2
Alias WCO2_Cov_lag(9)  = WCO2_Cov_lag_f3
Alias WCO2_Cov_lag(10) = WCO2_Cov_lag_f4
Alias WCO2_Cov_lag(11) = WCO2_Cov_lag_f5
Dim WCO2_Cov_major_sign
Dim   UCO2_VCO2_Cov_lag(2*MAX_LAG + 1, 2)
Alias UCO2_VCO2_Cov_lag(1, 1)  = UCO2_Cov_lag_b5
Alias UCO2_VCO2_Cov_lag(1, 2)  = VCO2_Cov_lag_b5
Alias UCO2_VCO2_Cov_lag(2, 1)  = UCO2_Cov_lag_b4
Alias UCO2_VCO2_Cov_lag(2, 2)  = VCO2_Cov_lag_b4
Alias UCO2_VCO2_Cov_lag(3, 1)  = UCO2_Cov_lag_b3
Alias UCO2_VCO2_Cov_lag(3, 2)  = VCO2_Cov_lag_b3
Alias UCO2_VCO2_Cov_lag(4, 1)  = UCO2_Cov_lag_b2
Alias UCO2_VCO2_Cov_lag(4, 2)  = VCO2_Cov_lag_b2
Alias UCO2_VCO2_Cov_lag(5, 1)  = UCO2_Cov_lag_b1
Alias UCO2_VCO2_Cov_lag(5, 2)  = VCO2_Cov_lag_b1
Alias UCO2_VCO2_Cov_lag(6, 1)  = UCO2_Cov_lag_0
Alias UCO2_VCO2_Cov_lag(6, 2)  = VCO2_Cov_lag_0
Alias UCO2_VCO2_Cov_lag(7, 1)  = UCO2_Cov_lag_f1
Alias UCO2_VCO2_Cov_lag(7, 2)  = VCO2_Cov_lag_f1
Alias UCO2_VCO2_Cov_lag(8, 1)  = UCO2_Cov_lag_f2
Alias UCO2_VCO2_Cov_lag(8, 2)  = VCO2_Cov_lag_f2
Alias UCO2_VCO2_Cov_lag(9, 1)  = UCO2_Cov_lag_f3
Alias UCO2_VCO2_Cov_lag(9, 2)  = VCO2_Cov_lag_f3
Alias UCO2_VCO2_Cov_lag(10, 1) = UCO2_Cov_lag_f4
Alias UCO2_VCO2_Cov_lag(10, 2) = VCO2_Cov_lag_f4
Alias UCO2_VCO2_Cov_lag(11, 1) = UCO2_Cov_lag_f5
Alias UCO2_VCO2_Cov_lag(11, 2) = VCO2_Cov_lag_f5
Units UCO2_VCO2_Cov_lag        = mg m-2 s-1
Dim   WCO2_Cov_lag_max(2)
Alias WCO2_Cov_lag_max(1) = WCO2_Cov
Alias WCO2_Cov_lag_max(2) = lag_irga
Units WCO2_Cov            = mg m-2 s-1
Units lag_irga            = scans
Dim cov_array_H2O(2*MAX_LAG+1, 5)
Dim Cov_out_H2O(7*(2*MAX_LAG + 1))
Alias Cov_out_H2O(1) = H2O_Avg_lag_b5
Alias Cov_out_H2O(2) = H2O_Var_lag_b5
Alias Cov_out_H2O(3) = H2O_density_Avg_lag_b5
Alias Cov_out_H2O(4) = H2O_density_Var_lag_b5
Alias Cov_out_H2O(5) = UxH2O_Cov_lag_b5
Alias Cov_out_H2O(6) = UyH2O_Cov_lag_b5
Alias Cov_out_H2O(7) = UzH2O_Cov_lag_b5
Alias Cov_out_H2O(8)  = H2O_Avg_lag_b4
Alias Cov_out_H2O(9)  = H2O_Var_lag_b4
Alias Cov_out_H2O(10) = H2O_density_Avg_lag_b4
Alias Cov_out_H2O(11) = H2O_density_Var_lag_b4
Alias Cov_out_H2O(12) = UxH2O_Cov_lag_b4
Alias Cov_out_H2O(13) = UyH2O_Cov_lag_b4
Alias Cov_out_H2O(14) = UzH2O_Cov_lag_b4
Alias Cov_out_H2O(15) = H2O_Avg_lag_b3
Alias Cov_out_H2O(16) = H2O_Var_lag_b3
Alias Cov_out_H2O(17) = H2O_density_Avg_lag_b3
Alias Cov_out_H2O(18) = H2O_density_Var_lag_b3
Alias Cov_out_H2O(19) = UxH2O_Cov_lag_b3
Alias Cov_out_H2O(20) = UyH2O_Cov_lag_b3
Alias Cov_out_H2O(21) = UzH2O_Cov_lag_b3
Alias Cov_out_H2O(22) = H2O_Avg_lag_b2
Alias Cov_out_H2O(23) = H2O_Var_lag_b2
Alias Cov_out_H2O(24) = H2O_density_Avg_lag_b2
Alias Cov_out_H2O(25) = H2O_density_Var_lag_b2
Alias Cov_out_H2O(26) = UxH2O_Cov_lag_b2
Alias Cov_out_H2O(27) = UyH2O_Cov_lag_b2
Alias Cov_out_H2O(28) = UzH2O_Cov_lag_b2
Alias Cov_out_H2O(29) = H2O_Avg_lag_b1
Alias Cov_out_H2O(30) = H2O_Var_lag_b1
Alias Cov_out_H2O(31) = H2O_density_Avg_lag_b1
Alias Cov_out_H2O(32) = H2O_density_Var_lag_b1
Alias Cov_out_H2O(33) = UxH2O_Cov_lag_b1
Alias Cov_out_H2O(34) = UyH2O_Cov_lag_b1
Alias Cov_out_H2O(35) = UzH2O_Cov_lag_b1
Alias Cov_out_H2O(36) = H2O_Avg_lag_0
Alias Cov_out_H2O(37) = H2O_Var_lag_0
Alias Cov_out_H2O(38) = H2O_density_Avg_lag_0
Alias Cov_out_H2O(39) = H2O_density_Var_lag_0
Alias Cov_out_H2O(40) = UxH2O_Cov_lag_0
Alias Cov_out_H2O(41) = UyH2O_Cov_lag_0
Alias Cov_out_H2O(42) = UzH2O_Cov_lag_0
Alias Cov_out_H2O(43) = H2O_Avg_lag_f1
Alias Cov_out_H2O(44) = H2O_Var_lag_f1
Alias Cov_out_H2O(45) = H2O_density_Avg_lag_f1
Alias Cov_out_H2O(46) = H2O_density_Var_lag_f1
Alias Cov_out_H2O(47) = UxH2O_Cov_lag_f1
Alias Cov_out_H2O(48) = UyH2O_Cov_lag_f1
Alias Cov_out_H2O(49) = UzH2O_Cov_lag_f1
Alias Cov_out_H2O(50) = H2O_Avg_lag_f2
Alias Cov_out_H2O(51) = H2O_Var_lag_f2
Alias Cov_out_H2O(52) = H2O_density_Avg_lag_f2
Alias Cov_out_H2O(53) = H2O_density_Var_lag_f2
Alias Cov_out_H2O(54) = UxH2O_Cov_lag_f2
Alias Cov_out_H2O(55) = UyH2O_Cov_lag_f2
Alias Cov_out_H2O(56) = UzH2O_Cov_lag_f2
Alias Cov_out_H2O(57) = H2O_Avg_lag_f3
Alias Cov_out_H2O(58) = H2O_Var_lag_f3
Alias Cov_out_H2O(59) = H2O_density_Avg_lag_f3
Alias Cov_out_H2O(60) = H2O_density_Var_lag_f3
Alias Cov_out_H2O(61) = UxH2O_Cov_lag_f3
Alias Cov_out_H2O(62) = UyH2O_Cov_lag_f3
Alias Cov_out_H2O(63) = UzH2O_Cov_lag_f3
Alias Cov_out_H2O(64) = H2O_Avg_lag_f4
Alias Cov_out_H2O(65) = H2O_Var_lag_f4
Alias Cov_out_H2O(66) = H2O_density_Avg_lag_f4
Alias Cov_out_H2O(67) = H2O_density_Var_lag_f4
Alias Cov_out_H2O(68) = UxH2O_Cov_lag_f4
Alias Cov_out_H2O(69) = UyH2O_Cov_lag_f4
Alias Cov_out_H2O(70) = UzH2O_Cov_lag_f4
Alias Cov_out_H2O(71) = H2O_Avg_lag_f5
Alias Cov_out_H2O(72) = H2O_Var_lag_f5
Alias Cov_out_H2O(73) = H2O_density_Avg_lag_f5
Alias Cov_out_H2O(74) = H2O_density_Var_lag_f5
Alias Cov_out_H2O(75) = UxH2O_Cov_lag_f5
Alias Cov_out_H2O(76) = UyH2O_Cov_lag_f5
Alias Cov_out_H2O(77) = UzH2O_Cov_lag_f5
Dim Cov_out_cs(29)
Alias Cov_out_cs(1)  = CO2
Alias Cov_out_cs(2)  = CO2_SIGMA
Alias Cov_out_cs(3)  = CO2_density_Avg
Alias Cov_out_cs(4)  = CO2_density_SIGMA
Alias Cov_out_cs(5)  = UxCO2_Cov
Alias Cov_out_cs(6)  = UyCO2_Cov
Alias Cov_out_cs(7)  = UzCO2_Cov
Alias Cov_out_cs(8)  = H2O
Alias Cov_out_cs(9)  = H2O_SIGMA
Alias Cov_out_cs(10) = H2O_density_Avg
Alias Cov_out_cs(11) = H2O_density_SIGMA
Alias Cov_out_cs(12) = UxH2O_Cov
Alias Cov_out_cs(13) = UyH2O_Cov
Alias Cov_out_cs(14) = UzH2O_Cov
Alias Cov_out_cs(15) = TA_1_1_1
Alias Cov_out_cs(16) = RH_1_1_1
Alias Cov_out_cs(17) = T_DP_1_1_1
Alias Cov_out_cs(18) = e_sat_amb_Avg
Alias Cov_out_cs(19) = e_amb_Avg
Alias Cov_out_cs(20) = rho_d_amb_Avg
Alias Cov_out_cs(21) = rho_a_amb_Avg
Alias Cov_out_cs(22) = TA_1_1_2
Alias Cov_out_cs(23) = RH_1_1_2
Alias Cov_out_cs(24) = T_DP_1_1_2
Alias Cov_out_cs(25) = e_sat_Avg
Alias Cov_out_cs(26) = e_Avg
Alias Cov_out_cs(27) = rho_d_Avg
Alias Cov_out_cs(28) = rho_a_Avg
Alias Cov_out_cs(29) = PA
Units CO2               = umolCO2 mol-1
Units CO2_SIGMA         = umolCO2 mol-1
Units CO2_density_Avg   = mg m-3
Units CO2_density_SIGMA = mg m-3
Units UxCO2_Cov         = mg m-2 s-1
Units UyCO2_Cov         = mg m-2 s-1
Units UzCO2_Cov         = mg m-2 s-1
Units H2O               = mmolH2O mol-1
Units H2O_SIGMA         = mmolH2O mol-1
Units H2O_density_Avg   = g m-3
Units H2O_density_SIGMA = g m-3
Units UxH2O_Cov         = g m-2 s-1
Units UyH2O_Cov         = g m-2 s-1
Units UzH2O_Cov         = g m-2 s-1
Units TA_1_1_1          = deg C
Units RH_1_1_1          = %
Units T_DP_1_1_1        = deg C
Units e_sat_amb_Avg     = kPa
Units e_amb_Avg         = kPa
Units rho_d_amb_Avg     = g m-3
Units rho_a_amb_Avg     = kg m-3
Units TA_1_1_2          = deg C
Units RH_1_1_2          = %
Units T_DP_1_1_2        = deg C
Units e_sat_Avg         = kPa
Units e_Avg             = kPa
Units rho_d_Avg         = g m-3
Units rho_a_Avg         = kg m-3
Units PA                = kPa
Dim    VPD
Units  VPD = hPa
Dim UCO2_Cov
Dim VCO2_Cov
Units UCO2_Cov = mg m-2 s-1
Units VCO2_Cov = mg m-2 s-1
Dim UH2O_Cov
Dim VH2O_Cov
Dim WH2O_Cov
Units UH2O_Cov = g m-2 s-1
Units VH2O_Cov = g m-2 s-1
Units WH2O_Cov = g m-2 s-1
Dim WCO2_Cov_fc
Dim WH2O_Cov_fc
Units WCO2_Cov_fc = mg m-2 s-1
Units WH2O_Cov_fc = g m-2 s-1
Dim CO2_E_WPL_fc
Dim CO2_T_WPL_fc
Dim H2O_E_WPL_fc
Dim H2O_T_WPL_fc
Units CO2_E_WPL_fc = mg m-2 s-1
Units CO2_T_WPL_fc = mg m-2 s-1
Units H2O_E_WPL_fc = g m-2 s-1
Units H2O_T_WPL_fc = g m-2 s-1
Dim FC
Dim FC_mass
Dim FH2O
Dim LE
Dim ET
Units FC      = umolCO2 m-2 s-1
Units FC_mass = mg m-2 s-1
Units FH2O    = mmolH2O m-2 s-1
Units LE      = W m-2
Units ET      = mm hour-1
Dim   Bowen_ratio
Units Bowen_ratio = fraction
Dim RN_WCO2_Cov
Dim RN_WH2O_Cov
Dim nmbr_interval_qc_irga
Dim cov_out_irga_SST(8)
Alias cov_out_irga_SST(1) = CO2_density_var_SST
Alias cov_out_irga_SST(2) = UxCO2_Cov_SST
Alias cov_out_irga_SST(3) = UyCO2_Cov_SST
Alias cov_out_irga_SST(4) = UzCO2_Cov_SST
Alias cov_out_irga_SST(5) = H2O_density_var_SST
Alias cov_out_irga_SST(6) = UxH2O_Cov_SST
Alias cov_out_irga_SST(7) = UyH2O_Cov_SST
Alias cov_out_irga_SST(8) = UzH2O_Cov_SST
Dim UCO2_Cov_SST
Dim VCO2_Cov_SST
Dim WCO2_Cov_SST
Dim UH2O_Cov_SST
Dim VH2O_Cov_SST
Dim WH2O_Cov_SST
Dim   FC_SSITC_TEST
Dim   LE_SSITC_TEST
Units FC_SSITC_TEST = adimensional
Units LE_SSITC_TEST = adimensional
Dim   FC_QC
Dim   LE_QC
Units FC_QC = Grade
Units LE_QC = Grade
DataTable (delay_cs, TRUE, (OFFSET + MAX_LAG))
TableHide
Sample (1,sonic_irga_raw(6), IEEE4)
Sample (1,sonic_irga_raw(7), IEEE4)
Sample (1,sonic_irga_raw(8), IEEE4)
Sample (4,sonic_irga_raw(9), IEEE4)
Sample (1,sonic_irga_raw(13),IEEE4)
EndTable
DataTable (comp_cov_cs_5min, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTERVAL_SST, Min, 0)
Covariance (4, cov_array_CO2((MAX_LAG + 1), 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(MAX_LAG + 1) OR CO2_bad_rng_sig_array(MAX_LAG+1)), 4)
Covariance (4, cov_array_H2O((MAX_LAG + 1), 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(MAX_LAG + 1) OR H2O_bad_rng_sig_array(MAX_LAG+1)), 4)
EndTable
DataTable (comp_cov_CO2, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
Average    (1, cov_array_CO2(1, 5), IEEE4, (irga_bad_data_flg_array(1) OR CO2_bad_rng_sig_array(1)))
Covariance (1, cov_array_CO2(1, 5), IEEE4, (irga_bad_data_flg_array(1) OR CO2_bad_rng_sig_array(1)), 1)
Average    (1, cov_array_CO2(1, 1), IEEE4, (irga_bad_data_flg_array(1) OR CO2_bad_rng_sig_array(1)))
Covariance (4, cov_array_CO2(1, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(1) OR CO2_bad_rng_sig_array(1)), 4)
Average    (1, cov_array_CO2(2, 5), IEEE4, (irga_bad_data_flg_array(2) OR CO2_bad_rng_sig_array(2)))
Covariance (1, cov_array_CO2(2, 5), IEEE4, (irga_bad_data_flg_array(2) OR CO2_bad_rng_sig_array(2)), 1)
Average    (1, cov_array_CO2(2, 1), IEEE4, (irga_bad_data_flg_array(2) OR CO2_bad_rng_sig_array(2)))
Covariance (4, cov_array_CO2(2, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(2) OR CO2_bad_rng_sig_array(2)), 4)
Average    (1, cov_array_CO2(3, 5), IEEE4, (irga_bad_data_flg_array(3) OR CO2_bad_rng_sig_array(3)))
Covariance (1, cov_array_CO2(3, 5), IEEE4, (irga_bad_data_flg_array(3) OR CO2_bad_rng_sig_array(3)), 1)
Average    (1, cov_array_CO2(3, 1), IEEE4, (irga_bad_data_flg_array(3) OR CO2_bad_rng_sig_array(3)))
Covariance (4, cov_array_CO2(3, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(3) OR CO2_bad_rng_sig_array(3)), 4)
Average    (1, cov_array_CO2(4, 5), IEEE4, (irga_bad_data_flg_array(4) OR CO2_bad_rng_sig_array(4)))
Covariance (1, cov_array_CO2(4, 5), IEEE4, (irga_bad_data_flg_array(4) OR CO2_bad_rng_sig_array(4)), 1)
Average    (1, cov_array_CO2(4, 1), IEEE4, (irga_bad_data_flg_array(4) OR CO2_bad_rng_sig_array(4)))
Covariance (4, cov_array_CO2(4, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(4) OR CO2_bad_rng_sig_array(4)), 4)
Average    (1, cov_array_CO2(5, 5), IEEE4, (irga_bad_data_flg_array(5) OR CO2_bad_rng_sig_array(5)))
Covariance (1, cov_array_CO2(5, 5), IEEE4, (irga_bad_data_flg_array(5) OR CO2_bad_rng_sig_array(5)), 1)
Average    (1, cov_array_CO2(5, 1), IEEE4, (irga_bad_data_flg_array(5) OR CO2_bad_rng_sig_array(5)))
Covariance (4, cov_array_CO2(5, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(5) OR CO2_bad_rng_sig_array(5)), 4)
Average    (1, cov_array_CO2(6, 5), IEEE4, (irga_bad_data_flg_array(6) OR CO2_bad_rng_sig_array(6)))
Covariance (1, cov_array_CO2(6, 5), IEEE4, (irga_bad_data_flg_array(6) OR CO2_bad_rng_sig_array(6)), 1)
Average    (1, cov_array_CO2(6, 1), IEEE4, (irga_bad_data_flg_array(6) OR CO2_bad_rng_sig_array(6)))
Covariance (4, cov_array_CO2(6, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(6) OR CO2_bad_rng_sig_array(6)), 4)
Average    (1, cov_array_CO2(7, 5), IEEE4, (irga_bad_data_flg_array(7) OR CO2_bad_rng_sig_array(7)))
Covariance (1, cov_array_CO2(7, 5), IEEE4, (irga_bad_data_flg_array(7) OR CO2_bad_rng_sig_array(7)), 1)
Average    (1, cov_array_CO2(7, 1), IEEE4, (irga_bad_data_flg_array(7) OR CO2_bad_rng_sig_array(7)))
Covariance (4, cov_array_CO2(7, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(7) OR CO2_bad_rng_sig_array(7)), 4)
Average    (1, cov_array_CO2(8, 5), IEEE4, (irga_bad_data_flg_array(8) OR CO2_bad_rng_sig_array(8)))
Covariance (1, cov_array_CO2(8, 5), IEEE4, (irga_bad_data_flg_array(8) OR CO2_bad_rng_sig_array(8)), 1)
Average    (1, cov_array_CO2(8, 1), IEEE4, (irga_bad_data_flg_array(8) OR CO2_bad_rng_sig_array(8)))
Covariance (4, cov_array_CO2(8, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(8) OR CO2_bad_rng_sig_array(8)), 4)
Average    (1, cov_array_CO2(9, 5), IEEE4, (irga_bad_data_flg_array(9) OR CO2_bad_rng_sig_array(9)))
Covariance (1, cov_array_CO2(9, 5), IEEE4, (irga_bad_data_flg_array(9) OR CO2_bad_rng_sig_array(9)), 1)
Average    (1, cov_array_CO2(9, 1), IEEE4, (irga_bad_data_flg_array(9) OR CO2_bad_rng_sig_array(9)))
Covariance (4, cov_array_CO2(9, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(9) OR CO2_bad_rng_sig_array(9)), 4)
Average    (1, cov_array_CO2(10, 5), IEEE4, (irga_bad_data_flg_array(10) OR CO2_bad_rng_sig_array(10)))
Covariance (1, cov_array_CO2(10, 5), IEEE4, (irga_bad_data_flg_array(10) OR CO2_bad_rng_sig_array(10)), 1)
Average    (1, cov_array_CO2(10, 1), IEEE4, (irga_bad_data_flg_array(10) OR CO2_bad_rng_sig_array(10)))
Covariance (4, cov_array_CO2(10, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(10) OR CO2_bad_rng_sig_array(10)), 4)
Average    (1, cov_array_CO2(11, 5), IEEE4, (irga_bad_data_flg_array(11) OR CO2_bad_rng_sig_array(11)))
Covariance (1, cov_array_CO2(11, 5), IEEE4, (irga_bad_data_flg_array(11) OR CO2_bad_rng_sig_array(11)), 1)
Average    (1, cov_array_CO2(11, 1), IEEE4, (irga_bad_data_flg_array(11) OR CO2_bad_rng_sig_array(11)))
Covariance (4, cov_array_CO2(11, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(11) OR CO2_bad_rng_sig_array(11)), 4)
EndTable
DataTable (comp_cov_H2O, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
Average    (1, cov_array_H2O(1, 5), IEEE4, (irga_bad_data_flg_array(1) OR H2O_bad_rng_sig_array(1)))
Covariance (1, cov_array_H2O(1, 5), IEEE4, (irga_bad_data_flg_array(1) OR H2O_bad_rng_sig_array(1)), 1)
Average    (1, cov_array_H2O(1, 1), IEEE4, (irga_bad_data_flg_array(1) OR H2O_bad_rng_sig_array(1)))
Covariance (4, cov_array_H2O(1, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(1) OR H2O_bad_rng_sig_array(1)), 4)
Average    (1, cov_array_H2O(2, 5), IEEE4, (irga_bad_data_flg_array(2) OR H2O_bad_rng_sig_array(2)))
Covariance (1, cov_array_H2O(2, 5), IEEE4, (irga_bad_data_flg_array(2) OR H2O_bad_rng_sig_array(2)), 1)
Average    (1, cov_array_H2O(2, 1), IEEE4, (irga_bad_data_flg_array(2) OR H2O_bad_rng_sig_array(2)))
Covariance (4, cov_array_H2O(2, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(2) OR H2O_bad_rng_sig_array(2)), 4)
Average    (1, cov_array_H2O(3, 5), IEEE4, (irga_bad_data_flg_array(3) OR H2O_bad_rng_sig_array(3)))
Covariance (1, cov_array_H2O(3, 5), IEEE4, (irga_bad_data_flg_array(3) OR H2O_bad_rng_sig_array(3)), 1)
Average    (1, cov_array_H2O(3, 1), IEEE4, (irga_bad_data_flg_array(3) OR H2O_bad_rng_sig_array(3)))
Covariance (4, cov_array_H2O(3, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(3) OR H2O_bad_rng_sig_array(3)), 4)
Average    (1, cov_array_H2O(4, 5), IEEE4, (irga_bad_data_flg_array(4) OR H2O_bad_rng_sig_array(4)))
Covariance (1, cov_array_H2O(4, 5), IEEE4, (irga_bad_data_flg_array(4) OR H2O_bad_rng_sig_array(4)), 1)
Average    (1, cov_array_H2O(4, 1), IEEE4, (irga_bad_data_flg_array(4) OR H2O_bad_rng_sig_array(4)))
Covariance (4, cov_array_H2O(4, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(4) OR H2O_bad_rng_sig_array(4)), 4)
Average    (1, cov_array_H2O(5, 5), IEEE4, (irga_bad_data_flg_array(5) OR H2O_bad_rng_sig_array(5)))
Covariance (1, cov_array_H2O(5, 5), IEEE4, (irga_bad_data_flg_array(5) OR H2O_bad_rng_sig_array(5)), 1)
Average    (1, cov_array_H2O(5, 1), IEEE4, (irga_bad_data_flg_array(5) OR H2O_bad_rng_sig_array(5)))
Covariance (4, cov_array_H2O(5, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(5) OR H2O_bad_rng_sig_array(5)), 4)
Average    (1, cov_array_H2O(6, 5), IEEE4, (irga_bad_data_flg_array(6) OR H2O_bad_rng_sig_array(6)))
Covariance (1, cov_array_H2O(6, 5), IEEE4, (irga_bad_data_flg_array(6) OR H2O_bad_rng_sig_array(6)), 1)
Average    (1, cov_array_H2O(6, 1), IEEE4, (irga_bad_data_flg_array(6) OR H2O_bad_rng_sig_array(6)))
Covariance (4, cov_array_H2O(6, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(6) OR H2O_bad_rng_sig_array(6)), 4)
Average    (1, cov_array_H2O(7, 5), IEEE4, (irga_bad_data_flg_array(7) OR H2O_bad_rng_sig_array(7)))
Covariance (1, cov_array_H2O(7, 5), IEEE4, (irga_bad_data_flg_array(7) OR H2O_bad_rng_sig_array(7)), 1)
Average    (1, cov_array_H2O(7, 1), IEEE4, (irga_bad_data_flg_array(7) OR H2O_bad_rng_sig_array(7)))
Covariance (4, cov_array_H2O(7, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(7) OR H2O_bad_rng_sig_array(7)), 4)
Average    (1, cov_array_H2O(8, 5), IEEE4, (irga_bad_data_flg_array(8) OR H2O_bad_rng_sig_array(8)))
Covariance (1, cov_array_H2O(8, 5), IEEE4, (irga_bad_data_flg_array(8) OR H2O_bad_rng_sig_array(8)), 1)
Average    (1, cov_array_H2O(8, 1), IEEE4, (irga_bad_data_flg_array(8) OR H2O_bad_rng_sig_array(8)))
Covariance (4, cov_array_H2O(8, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(8) OR H2O_bad_rng_sig_array(8)), 4)
Average    (1, cov_array_H2O(9, 5), IEEE4, (irga_bad_data_flg_array(9) OR H2O_bad_rng_sig_array(9)))
Covariance (1, cov_array_H2O(9, 5), IEEE4, (irga_bad_data_flg_array(9) OR H2O_bad_rng_sig_array(9)), 1)
Average    (1, cov_array_H2O(9, 1), IEEE4, (irga_bad_data_flg_array(9) OR H2O_bad_rng_sig_array(9))
Covariance (4, cov_array_H2O(9, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(9) OR H2O_bad_rng_sig_array(9)), 4)
Average    (1, cov_array_H2O(10, 5), IEEE4, (irga_bad_data_flg_array(10) OR H2O_bad_rng_sig_array(10)))
Covariance (1, cov_array_H2O(10, 5), IEEE4, (irga_bad_data_flg_array(10) OR H2O_bad_rng_sig_array(10)), 1)
Average    (1, cov_array_H2O(10, 1), IEEE4, (irga_bad_data_flg_array(10) OR H2O_bad_rng_sig_array(10)))
Covariance (4, cov_array_H2O(10, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(10) OR H2O_bad_rng_sig_array(10)), 4)
Average    (1, cov_array_H2O(11, 5), IEEE4, (irga_bad_data_flg_array(11) OR H2O_bad_rng_sig_array(11)))
Covariance (1, cov_array_H2O(11, 5), IEEE4, (irga_bad_data_flg_array(11) OR H2O_bad_rng_sig_array(11)), 1)
Average    (1, cov_array_H2O(11, 1), IEEE4, (irga_bad_data_flg_array(11) OR H2O_bad_rng_sig_array(11)))
Covariance (4, cov_array_H2O(11, 1), IEEE4, (sonic_disable_f OR irga_bad_data_flg_array(11) OR H2O_bad_rng_sig_array(11)), 4)
EndTable
DataTable (comp_mean, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
Average (1, T_amb, IEEE4, irga_amb_tmpr_f)
Average (1, RH_amb,   IEEE4, (irga_disable_f OR (RH_amb > 102) OR H2O_bad_rng_sig_array(MAX_LAG +1))
Average (5, T_DP_amb, IEEE4, (irga_disable_f OR H2O_bad_rng_sig_array(MAX_LAG +1))
Average (1, Tc,       IEEE4, (irga_disable_f OR sonic_disable_f OR H2O_bad_rng_sig_array(MAX_LAG +1))
Average (1, RH,       IEEE4, (irga_disable_f OR sonic_disable_f OR (RH > 102) OR H2O_bad_rng_sig_array(MAX_LAG +1))
Average (5, T_DP,     IEEE4, (irga_disable_f OR sonic_disable_f OR H2O_bad_rng_sig_array(MAX_LAG +1))
Average (1, press_amb, IEEE4, irga_amb_press_f)
EndTable
#If (SENSOR_LI7700) Then
Const LI7700_IP_ADDR_str As String = "192.168.0.101"
Const RSSI_THRESHOLD = 20
Const GA_77_SCAN_BUFF_SIZE = 10
Const GA_77_SERIAL_BUFF_SIZE = 2*(239*GA_77_SCAN_BUFF_SIZE)+1
Const GA_77_NMBR_BYTES_EXPCTD = 237
Const LI7700_SIGNAL_DELAY = 1000/SCN_INTV
Const DELAY_LI7700 = IIF(GA_77_SCAN_BUFF_SIZE > LI7700_SIGNAL_DELAY, GA_77_SCAN_BUFF_SIZE, LI7700_SIGNAL_DELAY)
Const LI7700_REC_BCK = OFFSET - DELAY_LI7700
Const PATH_LENGTH_GA77 = 0.5
Const CH4_UPPER_BOUND = 1000
Const CH4_LOWER_BOUND = 0
Const SEPARATION_X_GA_77 = 0.1
Const SEPARATION_Y_GA_77 = 0.3
Const MAX_LAG2 = 2*MAX_LAG
Const ke12 = -1.3e-7
Const ke13 = 3.7e-5
Const ke21 = 4.0e-8
Const ke22 = 1.1e-5
Const ke23 = 2.18e-3
Const ke31 = 2.0e-6
Const ke32 = 9.8e-4
Const ke33 = 0.378
Const be1  = -8.2e-6
Const be2  = 4.3e-3
Const be3  = -1.7e-4
Const be4  = 0.03
Const ce11 = -4.0e-8
Const ce12 = 1.55e-5
Const ce13 = -7.0e-3
Const ce21 = -4.7e-6
Const ce22 = 3.0e-3
Const ce23 = 9.27e-1
Dim ga_77_tmp(10)
Dim ga_77_socket As Long
Dim ga_77_in_bytes_str As String * GA_77_NMBR_BYTES_EXPCTD
Public ga_77_nmbr_bytes_rtrnd As Long
Dim ga_77_clear_buff_f As Boolean
Dim ga_77_checksum_f As Boolean
Dim ga_77_scan_cntr As Long
Public ga_77_tcip_ip_socket_close_timer As Long
Dim diag_77_tmp As Long
Dim bad_CH4_rcd
Public ga_77(5)
Alias  ga_77(1) = amb_press_77
Alias  ga_77(2) = amb_tmpr_77
Alias  ga_77(3) = CH4_77
Alias  ga_77(4) = diag_77
Alias  ga_77(5) = rssi_77
Public diag_77_aggregate As Long
Units  amb_press_77 = kPa
Units  amb_tmpr_77 = deg C
Units  CH4_77 = mmol m-3
Units  diag_77 = adimensional
Units  rssi_77 = %
Units  diag_77_aggregate = adimensional
Dim    diag_bits_77(12) As Long
Alias  diag_bits_77(1) = ga_77_motor_failure_f
Alias  diag_bits_77(2) = ga_77_calibrating_f
Alias  diag_bits_77(3) = ga_77_bottom_htr_on_f
Alias  diag_bits_77(4) = ga_77_top_htr_on_f
Alias  diag_bits_77(5) = ga_77_pump_on_f
Alias  diag_bits_77(6) = ga_77_motor_spinning_f
Alias  diag_bits_77(7) = ga_77_blk_tmpr_unreg_f
Alias  diag_bits_77(8) = ga_77_lsr_tmpr_unreg_f
Alias  diag_bits_77(9) = ga_77_bad_tmpr_f
Alias  diag_bits_77(10) = ga_77_ref_unlocked_f
Alias  diag_bits_77(11) = ga_77_no_signal_f
Alias  diag_bits_77(12) = ga_77_not_ready_f
Units  diag_bits_77 = adimensional
Dim    separation_lat_dist_CH4
Dim    separation_lag_dist_CH4
Dim    separation_lag_scan_CH4
Units  separation_lat_dist_CH4 = m
Units  separation_lag_dist_CH4 = m
Units  separation_lag_scan_CH4 = scans
Dim    ga_77_ts(5)
Alias  ga_77_ts(1) = press_77_ts
Alias  ga_77_ts(2) = tmpr_77_ts
Alias  ga_77_ts(3) = CH4_77_ts
Alias  ga_77_ts(4) = diag_77_ts
Alias  ga_77_ts(5) = rssi_77_ts
Units  press_77_ts = kPa
Units  tmpr_77_ts  = deg C
Units  CH4_77_ts   = mmol m-3
Units  diag_77_ts  = adimensional
Units  rssi_77_ts  = %
Dim dly_data_CH4_out(6)
Dim Cov_array_CH4(2* MAX_LAG2 + 1, 6)
Dim CH4_bad_data_flg(2* MAX_LAG2 + 1) As Boolean
Dim Cov_out_CH4(8*(2*MAX_LAG2 + 1))
Alias Cov_out_CH4(1) = P77_Avg_lag_b10
Alias Cov_out_CH4(2) = T77_Avg_lag_b10
Alias Cov_out_CH4(3) = CH4_Avg_lag_b10
Alias Cov_out_CH4(4) = CH4_Var_lag_b10
Alias Cov_out_CH4(5) = UxCH4_Cov_lag_b10
Alias Cov_out_CH4(6) = UyCH4_Cov_lag_b10
Alias Cov_out_CH4(7) = UzCH4_Cov_lag_b10
Alias Cov_out_CH4(8) = nmbr_smpl_CH4_lag_b10
Alias Cov_out_CH4(9) = P77_Avg_lag_b9
Alias Cov_out_CH4(10) = T77_Avg_lag_b9
Alias Cov_out_CH4(11) = CH4_Avg_lag_b9
Alias Cov_out_CH4(12) = CH4_Var_lag_b9
Alias Cov_out_CH4(13) = UxCH4_Cov_lag_b9
Alias Cov_out_CH4(14) = UyCH4_Cov_lag_b9
Alias Cov_out_CH4(15) = UzCH4_Cov_lag_b9
Alias Cov_out_CH4(16) = nmbr_smpl_CH4_lag_b9
Alias Cov_out_CH4(17) = P77_Avg_lag_b8
Alias Cov_out_CH4(18) = T77_Avg_lag_b8
Alias Cov_out_CH4(19) = CH4_Avg_lag_b8
Alias Cov_out_CH4(20) = CH4_Var_lag_b8
Alias Cov_out_CH4(21) = UxCH4_Cov_lag_b8
Alias Cov_out_CH4(22) = UyCH4_Cov_lag_b8
Alias Cov_out_CH4(23) = UzCH4_Cov_lag_b8
Alias Cov_out_CH4(24) = nmbr_smpl_CH4_lag_b8
Alias Cov_out_CH4(25) = P77_Avg_lag_b7
Alias Cov_out_CH4(26) = T77_Avg_lag_b7
Alias Cov_out_CH4(27) = CH4_Avg_lag_b7
Alias Cov_out_CH4(28) = CH4_Var_lag_b7
Alias Cov_out_CH4(29) = UxCH4_Cov_lag_b7
Alias Cov_out_CH4(30) = UyCH4_Cov_lag_b7
Alias Cov_out_CH4(31) = UzCH4_Cov_lag_b7
Alias Cov_out_CH4(32) = nmbr_smpl_CH4_lag_b7
Alias Cov_out_CH4(33) = P77_Avg_lag_b6
Alias Cov_out_CH4(34) = T77_Avg_lag_b6
Alias Cov_out_CH4(35) = CH4_Avg_lag_b6
Alias Cov_out_CH4(36) = CH4_Var_lag_b6
Alias Cov_out_CH4(37) = UxCH4_Cov_lag_b6
Alias Cov_out_CH4(38) = UyCH4_Cov_lag_b6
Alias Cov_out_CH4(39) = UzCH4_Cov_lag_b6
Alias Cov_out_CH4(40) = nmbr_smpl_CH4_lag_b6
Alias Cov_out_CH4(41) = P77_Avg_lag_b5
Alias Cov_out_CH4(42) = T77_Avg_lag_b5
Alias Cov_out_CH4(43) = CH4_Avg_lag_b5
Alias Cov_out_CH4(44) = CH4_Var_lag_b5
Alias Cov_out_CH4(45) = UxCH4_Cov_lag_b5
Alias Cov_out_CH4(46) = UyCH4_Cov_lag_b5
Alias Cov_out_CH4(47) = UzCH4_Cov_lag_b5
Alias Cov_out_CH4(48) = nmbr_smpl_CH4_lag_b5
Alias Cov_out_CH4(49) = P77_Avg_lag_b4
Alias Cov_out_CH4(50) = T77_Avg_lag_b4
Alias Cov_out_CH4(51) = CH4_Avg_lag_b4
Alias Cov_out_CH4(52) = CH4_Var_lag_b4
Alias Cov_out_CH4(53) = UxCH4_Cov_lag_b4
Alias Cov_out_CH4(54) = UyCH4_Cov_lag_b4
Alias Cov_out_CH4(55) = UzCH4_Cov_lag_b4
Alias Cov_out_CH4(56) = nmbr_smpl_CH4_lag_b4
Alias Cov_out_CH4(57) = P77_Avg_lag_b3
Alias Cov_out_CH4(58) = T77_Avg_lag_b3
Alias Cov_out_CH4(59) = CH4_Avg_lag_b3
Alias Cov_out_CH4(60) = CH4_Var_lag_b3
Alias Cov_out_CH4(61) = UxCH4_Cov_lag_b3
Alias Cov_out_CH4(62) = UyCH4_Cov_lag_b3
Alias Cov_out_CH4(63) = UzCH4_Cov_lag_b3
Alias Cov_out_CH4(64) = nmbr_smpl_CH4_lag_b3
Alias Cov_out_CH4(65) = P77_Avg_lag_b2
Alias Cov_out_CH4(66) = T77_Avg_lag_b2
Alias Cov_out_CH4(67) = CH4_Avg_lag_b2
Alias Cov_out_CH4(68) = CH4_Var_lag_b2
Alias Cov_out_CH4(69) = UxCH4_Cov_lag_b2
Alias Cov_out_CH4(70) = UyCH4_Cov_lag_b2
Alias Cov_out_CH4(71) = UzCH4_Cov_lag_b2
Alias Cov_out_CH4(72) = nmbr_smpl_CH4_lag_b2
Alias Cov_out_CH4(73) = P77_Avg_lag_b1
Alias Cov_out_CH4(74) = T77_Avg_lag_b1
Alias Cov_out_CH4(75) = CH4_Avg_lag_b1
Alias Cov_out_CH4(76) = CH4_Var_lag_b1
Alias Cov_out_CH4(77) = UxCH4_Cov_lag_b1
Alias Cov_out_CH4(78) = UyCH4_Cov_lag_b1
Alias Cov_out_CH4(79) = UzCH4_Cov_lag_b1
Alias Cov_out_CH4(80) = nmbr_smpl_CH4_lag_b1
Alias Cov_out_CH4(81) = P77_Avg_lag_0
Alias Cov_out_CH4(82) = T77_Avg_lag_0
Alias Cov_out_CH4(83) = CH4_Avg_lag_0
Alias Cov_out_CH4(84) = CH4_Var_lag_0
Alias Cov_out_CH4(85) = UxCH4_Cov_lag_0
Alias Cov_out_CH4(86) = UyCH4_Cov_lag_0
Alias Cov_out_CH4(87) = UzCH4_Cov_lag_0
Alias Cov_out_CH4(88) = nmbr_smpl_CH4_lag_0
Alias Cov_out_CH4(89) = P77_Avg_lag_f1
Alias Cov_out_CH4(90) = T77_Avg_lag_f1
Alias Cov_out_CH4(91) = CH4_Avg_lag_f1
Alias Cov_out_CH4(92) = CH4_Var_lag_f1
Alias Cov_out_CH4(93) = UxCH4_Cov_lag_f1
Alias Cov_out_CH4(94) = UyCH4_Cov_lag_f1
Alias Cov_out_CH4(95) = UzCH4_Cov_lag_f1
Alias Cov_out_CH4(96) = nmbr_smpl_CH4_lag_f1
Alias Cov_out_CH4(97) = P77_Avg_lag_f2
Alias Cov_out_CH4(98) = T77_Avg_lag_f2
Alias Cov_out_CH4(99) = CH4_Avg_lag_f2
Alias Cov_out_CH4(100) = CH4_Var_lag_f2
Alias Cov_out_CH4(101) = UxCH4_Cov_lag_f2
Alias Cov_out_CH4(102) = UyCH4_Cov_lag_f2
Alias Cov_out_CH4(103) = UzCH4_Cov_lag_f2
Alias Cov_out_CH4(104) = nmbr_smpl_CH4_lag_f2
Alias Cov_out_CH4(105) = P77_Avg_lag_f3
Alias Cov_out_CH4(106) = T77_Avg_lag_f3
Alias Cov_out_CH4(107) = CH4_Avg_lag_f3
Alias Cov_out_CH4(108) = CH4_Var_lag_f3
Alias Cov_out_CH4(109) = UxCH4_Cov_lag_f3
Alias Cov_out_CH4(110) = UyCH4_Cov_lag_f3
Alias Cov_out_CH4(111) = UzCH4_Cov_lag_f3
Alias Cov_out_CH4(112) = nmbr_smpl_CH4_lag_f3
Alias Cov_out_CH4(113) = P77_Avg_lag_f4
Alias Cov_out_CH4(114) = T77_Avg_lag_f4
Alias Cov_out_CH4(115) = CH4_Avg_lag_f4
Alias Cov_out_CH4(116) = CH4_Var_lag_f4
Alias Cov_out_CH4(117) = UxCH4_Cov_lag_f4
Alias Cov_out_CH4(118) = UyCH4_Cov_lag_f4
Alias Cov_out_CH4(119) = UzCH4_Cov_lag_f4
Alias Cov_out_CH4(120) = nmbr_smpl_CH4_lag_f4
Alias Cov_out_CH4(121) = P77_Avg_lag_f5
Alias Cov_out_CH4(122) = T77_Avg_lag_f5
Alias Cov_out_CH4(123) = CH4_Avg_lag_f5
Alias Cov_out_CH4(124) = CH4_Var_lag_f5
Alias Cov_out_CH4(125) = UxCH4_Cov_lag_f5
Alias Cov_out_CH4(126) = UyCH4_Cov_lag_f5
Alias Cov_out_CH4(127) = UzCH4_Cov_lag_f5
Alias Cov_out_CH4(128) = nmbr_smpl_CH4_lag_f5
Alias Cov_out_CH4(129) = P77_Avg_lag_f6
Alias Cov_out_CH4(130) = T77_Avg_lag_f6
Alias Cov_out_CH4(131) = CH4_Avg_lag_f6
Alias Cov_out_CH4(132) = CH4_Var_lag_f6
Alias Cov_out_CH4(133) = UxCH4_Cov_lag_f6
Alias Cov_out_CH4(134) = UyCH4_Cov_lag_f6
Alias Cov_out_CH4(135) = UzCH4_Cov_lag_f6
Alias Cov_out_CH4(136) = nmbr_smpl_CH4_lag_f6
Alias Cov_out_CH4(137) = P77_Avg_lag_f7
Alias Cov_out_CH4(138) = T77_Avg_lag_f7
Alias Cov_out_CH4(139) = CH4_Avg_lag_f7
Alias Cov_out_CH4(140) = CH4_Var_lag_f7
Alias Cov_out_CH4(141) = UxCH4_Cov_lag_f7
Alias Cov_out_CH4(142) = UyCH4_Cov_lag_f7
Alias Cov_out_CH4(143) = UzCH4_Cov_lag_f7
Alias Cov_out_CH4(144) = nmbr_smpl_CH4_lag_f7
Alias Cov_out_CH4(145) = P77_Avg_lag_f8
Alias Cov_out_CH4(146) = T77_Avg_lag_f8
Alias Cov_out_CH4(147) = CH4_Avg_lag_f8
Alias Cov_out_CH4(148) = CH4_Var_lag_f8
Alias Cov_out_CH4(149) = UxCH4_Cov_lag_f8
Alias Cov_out_CH4(150) = UyCH4_Cov_lag_f8
Alias Cov_out_CH4(151) = UzCH4_Cov_lag_f8
Alias Cov_out_CH4(152) = nmbr_smpl_CH4_lag_f8
Alias Cov_out_CH4(153) = P77_Avg_lag_f9
Alias Cov_out_CH4(154) = T77_Avg_lag_f9
Alias Cov_out_CH4(155) = CH4_Avg_lag_f9
Alias Cov_out_CH4(156) = CH4_Var_lag_f9
Alias Cov_out_CH4(157) = UxCH4_Cov_lag_f9
Alias Cov_out_CH4(158) = UyCH4_Cov_lag_f9
Alias Cov_out_CH4(159) = UzCH4_Cov_lag_f9
Alias Cov_out_CH4(160) = nmbr_smpl_CH4_lag_f9
Alias Cov_out_CH4(161) = P77_Avg_lag_f10
Alias Cov_out_CH4(162) = T77_Avg_lag_f10
Alias Cov_out_CH4(163) = CH4_Avg_lag_f10
Alias Cov_out_CH4(164) = CH4_Var_lag_f10
Alias Cov_out_CH4(165) = UxCH4_Cov_lag_f10
Alias Cov_out_CH4(166) = UyCH4_Cov_lag_f10
Alias Cov_out_CH4(167) = UzCH4_Cov_lag_f10
Alias Cov_out_CH4(168) = nmbr_smpl_CH4_lag_f10
Dim   UCH4_Cov_lag(2*MAX_LAG2 + 1)
Units UCH4_Cov_lag     = mmol m-2 s-1
Dim   VCH4_Cov_lag(2*MAX_LAG2 + 1)
Units VCH4_Cov_lag     = mmol m-2 s-1
Dim   WCH4_Cov_lag(2*MAX_LAG2 + 1)
Alias WCH4_Cov_lag(1)  = WCH4_Cov_lag_b10
Alias WCH4_Cov_lag(2)  = WCH4_Cov_lag_b9
Alias WCH4_Cov_lag(3)  = WCH4_Cov_lag_b8
Alias WCH4_Cov_lag(4)  = WCH4_Cov_lag_b7
Alias WCH4_Cov_lag(5)  = WCH4_Cov_lag_b6
Alias WCH4_Cov_lag(6)  = WCH4_Cov_lag_b5
Alias WCH4_Cov_lag(7)  = WCH4_Cov_lag_b4
Alias WCH4_Cov_lag(8)  = WCH4_Cov_lag_b3
Alias WCH4_Cov_lag(9)  = WCH4_Cov_lag_b2
Alias WCH4_Cov_lag(10) = WCH4_Cov_lag_b1
Alias WCH4_Cov_lag(11) = WCH4_Cov_lag_0
Alias WCH4_Cov_lag(12) = WCH4_Cov_lag_f1
Alias WCH4_Cov_lag(13) = WCH4_Cov_lag_f2
Alias WCH4_Cov_lag(14) = WCH4_Cov_lag_f3
Alias WCH4_Cov_lag(15) = WCH4_Cov_lag_f4
Alias WCH4_Cov_lag(16) = WCH4_Cov_lag_f5
Alias WCH4_Cov_lag(17) = WCH4_Cov_lag_f6
Alias WCH4_Cov_lag(18) = WCH4_Cov_lag_f7
Alias WCH4_Cov_lag(19) = WCH4_Cov_lag_f8
Alias WCH4_Cov_lag(20) = WCH4_Cov_lag_f9
Alias WCH4_Cov_lag(21) = WCH4_Cov_lag_f10
Units WCH4_Cov_lag     = mmol m-2 s-1
Dim   WCH4_cov_major_sign
Dim   WCH4_Cov_lag_max(2)
Alias WCH4_Cov_lag_max(1) = WCH4_Cov
Alias WCH4_Cov_lag_max(2) = lag_CH4
Units WCH4_Cov            = mmol m-2 s-1
Units lag_CH4             = scans
Dim   UCH4_Cov
Dim   VCH4_Cov
Units UCH4_Cov = mmol m-2 s-1
Units VCH4_Cov = mmol m-2 s-1
Dim   WCH4_Cov_fc
Units WCH4_Cov_fc = mmol m-2 s-1
Dim   press_77_Avg
Dim   tmpr_77_Avg
Dim   CH4_Avg
Dim   CH4_SIGMA
Dim   CH4_Avg_MolFrac
Units press_77_Avg = kPa
Units tmpr_77_Avg  = deg C
Units CH4_Avg      = mmol m-3
Units CH4_SIGMA    = mmol m-3
Units CH4_Avg_MolFrac = nmolCH4 mol-1
Dim   UxCH4_Cov
Dim   UyCH4_Cov
Dim   UzCH4_Cov
Units UxCH4_Cov = mmol m-2 s-1
Units UyCH4_Cov = mmol m-2 s-1
Units UzCH4_Cov = mmol m-2 s-1
Dim   nmbr_smpl_CH4
Units nmbr_smpl_CH4 = Samples
Dim   CH4_E_WPL_fc
Dim   CH4_T_WPL_fc
Units CH4_E_WPL_fc = mmolCH4 m-2 s-1
Units CH4_T_WPL_fc = mmolCH4 m-2 s-1
Dim   FCH4
Dim   FCH4_mass
Units FCH4      = nmolCH4 m-2 s-1
Units FCH4_mass = ngCH4 m-2 s-1
Dim   press_77_Eqv
Dim   tmpr_77_Avg2
Dim   Spec_Sc_A
Dim   Spec_Sc_B
Dim   Spec_Sc_C
Dim   Spec_Sc_Bapk
Dim   Spec_Sc_Ctk
Dim   FreqFactor_WCH4 = 1.0
Units FreqFactor_WCH4 = adimensional
Dim   Cov_out_CH4_SST(4)
Alias Cov_out_CH4_SST(1) = CH4_Var_SST
Alias Cov_out_CH4_SST(2) = UxCH4_Cov_SST
Alias Cov_out_CH4_SST(3) = UyCH4_Cov_SST
Alias Cov_out_CH4_SST(4) = UzCH4_Cov_SST
Dim   UCH4_Cov_SST, VCH4_Cov_SST, WCH4_Cov_SST
Dim   RN_WCH4_Cov = 0
Dim   nmbr_interval_qc_ga77 = 0
Dim   FCH4_SSITC_TEST
Units FCH4_SSITC_TEST = adimensional
DataTable (delay_ga_77, TRUE, (OFFSET + MAX_LAG))
TableHide
Sample (1, amb_press_77, IEEE4)
Sample (1, amb_tmpr_77,  IEEE4)
Sample (1, CH4_77,       IEEE4)
Sample (1, diag_77,      IEEE4)
Sample (1, rssi_77,      IEEE4)
Sample (1, bad_CH4_rcd,  IEEE4)
EndTable
DataTable (comp_cov_ga_77, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
Average    (3, Cov_array_CH4(1, 1), IEEE4, CH4_bad_data_flg(1))
Covariance (4, Cov_array_CH4(1, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(1)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(1)))
FieldNames ("nmbr_smpl_CH4_lag_b10")
Average    (3, Cov_array_CH4(2, 1), IEEE4, CH4_bad_data_flg(2))
Covariance (4, Cov_array_CH4(2, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(2)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(2)))
FieldNames ("nmbr_smpl_CH4_lag_b9")
Average    (3, Cov_array_CH4(3, 1), IEEE4, CH4_bad_data_flg(3))
Covariance (4, Cov_array_CH4(3, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(3)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(3))))
FieldNames ("nmbr_smpl_CH4_lag_b8")
Average    (3, Cov_array_CH4(4, 1), IEEE4, CH4_bad_data_flg(4))
Covariance (4, Cov_array_CH4(4, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(4)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(4)))
FieldNames ("nmbr_smpl_CH4_lag_b7")
Average    (3, Cov_array_CH4(5, 1), IEEE4, CH4_bad_data_flg(5))
Covariance (4, Cov_array_CH4(5, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(5)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(5)))
FieldNames ("nmbr_smpl_CH4_lag_b6")
Average    (3, Cov_array_CH4(6, 1), IEEE4, CH4_bad_data_flg(6))
Covariance (4, Cov_array_CH4(6, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(6)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(6)))
FieldNames ("nmbr_smpl_CH4_lag_b5")
Average    (3, Cov_array_CH4(7, 1), IEEE4, CH4_bad_data_flg(7))
Covariance (4, Cov_array_CH4(7, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(7)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(7)))
FieldNames ("nmbr_smpl_CH4_lag_b4")
Average    (3, Cov_array_CH4(8, 1), IEEE4, CH4_bad_data_flg(8))
Covariance (4, Cov_array_CH4(8, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(8)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(8)))
FieldNames ("nmbr_smpl_CH4_lag_b3")
Average    (3, Cov_array_CH4(9, 1), IEEE4, CH4_bad_data_flg(9))
Covariance (4, Cov_array_CH4(9, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(9)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(9)))
FieldNames ("nmbr_smpl_CH4_lag_b2")
Average    (3, Cov_array_CH4(10, 1), IEEE4, CH4_bad_data_flg(10))
Covariance (4, Cov_array_CH4(10, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(10)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(10)))
FieldNames ("nmbr_smpl_CH4_lag_b1")
Average    (3, Cov_array_CH4(11, 1), IEEE4, CH4_bad_data_flg(11))
Covariance (4, Cov_array_CH4(11, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(11)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(11)))
FieldNames ("nmbr_smpl_CH4_lag_0")
Average    (3, Cov_array_CH4(12, 1), IEEE4, CH4_bad_data_flg(12))
Covariance (4, Cov_array_CH4(12, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(12)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(12)))
FieldNames ("nmbr_smpl_CH4_lag_f1")
Average    (3, Cov_array_CH4(13, 1), IEEE4, CH4_bad_data_flg(13))
Covariance (4, Cov_array_CH4(13, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(13)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(13)))
FieldNames ("nmbr_smpl_CH4_lag_f2")
Average    (3, Cov_array_CH4(14, 1), IEEE4, CH4_bad_data_flg(14))
Covariance (4, Cov_array_CH4(14, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(14)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(14)))
FieldNames ("nmbr_smpl_CH4_lag_f3")
Average    (3, Cov_array_CH4(15, 1), IEEE4, CH4_bad_data_flg(15))
Covariance (4, Cov_array_CH4(15, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(15)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(15)))
FieldNames ("nmbr_smpl_CH4_lag_f4")
Average    (3, Cov_array_CH4(16, 1), IEEE4, CH4_bad_data_flg(16))
Covariance (4, Cov_array_CH4(16, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(16)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(16)))
FieldNames ("nmbr_smpl_CH4_lag_f5")
Average    (3, Cov_array_CH4(17, 1), IEEE4, CH4_bad_data_flg(17))
Covariance (4, Cov_array_CH4(17, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(17)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(17)))
FieldNames ("nmbr_smpl_CH4_lag_f6")
Average    (3, Cov_array_CH4(18, 1), IEEE4, CH4_bad_data_flg(18))
Covariance (4, Cov_array_CH4(18, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(18)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(18)))
FieldNames ("nmbr_smpl_CH4_lag_f7")
Average    (3, Cov_array_CH4(19, 1), IEEE4, CH4_bad_data_flg(19))
Covariance (4, Cov_array_CH4(19, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(19)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(19)))
FieldNames ("nmbr_smpl_CH4_lag_f8")
Average    (3, Cov_array_CH4(20, 1), IEEE4, CH4_bad_data_flg(20))
Covariance (4, Cov_array_CH4(20, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(20)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(20)))
FieldNames ("nmbr_smpl_CH4_lag_f9")
Average    (3, Cov_array_CH4(21, 1), IEEE4, CH4_bad_data_flg(21))
Covariance (4, Cov_array_CH4(21, 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(21)), 4)
Totalize   (1, n, IEEE4, (sonic_disable_f OR CH4_bad_data_flg(21)))
FieldNames ("nmbr_smpl_CH4_lag_f10")
EndTable
DataTable (comp_cov_ga77_5min, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTERVAL_SST, Min, 0)
Covariance (4, Cov_array_CH4((MAX_LAG2 + 1), 3), IEEE4, (sonic_disable_f OR CH4_bad_data_flg(MAX_LAG2 + 1)), 4)
EndTable
#EndIf
#If (SENSOR_T_RH) Then
Public tmpr_rh(7)
Alias tmpr_rh(1) = T_probe
Alias tmpr_rh(2) = RH_probe
Alias tmpr_rh(3) = T_DP_probe
Alias tmpr_rh(4) = e_probe
Alias tmpr_rh(5) = e_sat_probe
Alias tmpr_rh(6) = H2O_density_probe
Alias tmpr_rh(7) = rho_d_probe
Units T_probe           = deg C
Units RH_probe          = %
Units T_DP_probe        = deg C
Units e_probe           = kPa
Units e_sat_probe       = kPa
Units H2O_density_probe = g m-3
Units rho_d_probe       = g m-3
Dim stats_out_tmpr_rh(8)
Alias stats_out_tmpr_rh(1) = TA_1_1_3
Alias stats_out_tmpr_rh(2) = RH_1_1_3
Alias stats_out_tmpr_rh(3) = T_DP_1_1_3
Alias stats_out_tmpr_rh(4) = e_probe_Avg
Alias stats_out_tmpr_rh(5) = e_sat_probe_Avg
Alias stats_out_tmpr_rh(6) = H2O_density_probe_Avg
Alias stats_out_tmpr_rh(7) = rho_d_probe_Avg
Alias stats_out_tmpr_rh(8) = rho_a_probe_Avg
Units TA_1_1_3             = deg C
Units RH_1_1_3             = %
Units T_DP_1_1_3           = deg C
Units e_probe_Avg          = kPa
Units e_sat_probe_Avg      = kPa
Units H2O_density_probe_Avg = g m-3
Units rho_d_probe_Avg       = g m-3
Units rho_a_probe_Avg       = kg m-3
DataTable (stats_tmpr_rh, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
#If (SENSOR_T_RH)      Then
Average (1, T_probe,          IEEE4, FALSE)
Average (3, RH_probe,         IEEE4, (RH_probe < 3))
Average (1, e_sat_probe,      IEEE4, FALSE)
Average (2, H2O_density_probe,IEEE4, (RH_probe < 3))
#EndIf
EndTable
#EndIf
#If (SENSOR_TE525) Then
Public P
Units  P = mm
Dim P_cumul_win_interval
Units P_cumul_win_interval = mm
#EndIf
#If (SENSOR_Rn) Then
Dim   nr_mean(7 - 1*SENSOR_SN500)
Alias nr_mean(1) = NETRAD
Alias nr_mean(2) = ALB
Alias nr_mean(3) = SW_IN_net_rdmtr
Alias nr_mean(4) = SW_OUT
Alias nr_mean(5) = LW_IN
Alias nr_mean(6) = LW_OUT
Alias nr_mean(7) = T_nr_Avg
Alias nr_mean(8) = T_nr_out_Avg
Units NETRAD          = W m-2
Units ALB             = %
Units SW_IN_net_rdmtr = W m-2
Units SW_OUT          = W m-2
Units LW_IN           = W m-2
Units LW_OUT          = W m-2
Units T_nr_Avg        = Klvin
#If (SENSOR_SN500) Then
Units T_nr_out_Avg    = Klvin
#EndIf
Public nr(8)
Alias nr(1) = NETRAD_raw
Alias nr(2) = albedo
Alias nr(3) = R_SW_in
Alias nr(4) = R_SW_out
Alias nr(5) = R_LW_in
Alias nr(6) = R_LW_out
Alias nr(7) = T_nr
Alias nr(8) = T_nr_out
Units NETRAD_raw = W m-2
Units albedo     = %
Units R_SW_in    = W m-2
Units R_SW_out   = W m-2
Units R_LW_in    = W m-2
Units R_LW_out   = W m-2
Units T_nr       = Klvin
Units T_nr_out   = Klvin
Dim   body_tmpr_SN500(4)
Alias body_tmpr_SN500(1) = LW_in_sgnl_mV
Alias body_tmpr_SN500(2) = LW_in_tmpr
Alias body_tmpr_SN500(3) = LW_out_sgnl_mV
Alias body_tmpr_SN500(4) = LW_out_tmpr
Const SN500_HEATER_T_TD_THRSHLD = 2
Dim sn500_heater_set_dummy
Dim sn500_heater_on_f As Boolean
Dim sn500_heater_secs = SCN_INTV/1000
DataTable (stats_net_radiation, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
Average (7, NETRAD_raw, IEEE4, slowsequence_disable_f)
Average (1, T_nr_out,   IEEE4, slowsequence_disable_f)
EndTable
#EndIf
#If (SENSOR_HFP) Then
Dim shf_plate_cal(NMBR_HFP)
Public shf_plate(NMBR_HFP)
Units  shf_plate = W m-2
Dim   shf_plate_avg(NMBR_HFP)
Alias shf_plate_avg(1) = G_plate_1_1_1
#If (NMBR_HFP > 1) Then
Alias shf_plate_avg(2) = G_plate_1_1_2
#EndIf
Units shf_plate_avg = W m-2
DataTable (stats_SHF, TRUE, 1)
TableHide
DataInterval (0, OUTPUT_INTV, Min, 0)
#If (SENSOR_HFP01) Then
Average (NMBR_HFP, shf_plate(1), IEEE4, slowsequence_disable_f)
#EndIf
EndTable
#EndIf
#If (SENSOR_TCAV) Then
Public Tsoil(NMBR_TCAV)
Units Tsoil = deg C
#EndIf
#If (SENSOR_CS65X) Then
Public cs65x_wc(NMBR_CS65X)
Public cs65x_ec(NMBR_CS65X)
Public cs65x_tmpr(NMBR_CS65X)
Dim cs65x_raw(3)
Units cs65x_wc = %
Units cs65x_ec = dS m-1
Units cs65x_tmpr = deg C
Dim SWC_array(NMBR_CS65X)
Alias SWC_array(1) = SWC_1_1_1
#If (NMBR_CS65X > 1) Then
Alias SWC_array(2) = SWC_1_1_2
#EndIf
Units SWC_array = %
#EndIf
#If (SENSOR_CS65X OR SENSOR_TCAV) Then
Dim TS_array(3)
Alias TS_array(1) = TS_1_1_1
Alias TS_array(2) = TS_1_1_2
Alias TS_array(3) = TS_1_1_3
Units TS_array    = deg C
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X) Then
Const NMBR_SOIL_T_WTR_DEL_SAMPLES = INT((60*1000)/SLW_SCN_INTV +1)
Dim    G_surface_rep(NMBR_HFP)
Alias  G_surface_rep(1) = G_1_1_1
#If (NMBR_HFP > 1) Then
Alias  G_surface_rep(2) = G_1_1_2
#EndIf
Units  G_surface_rep = W m-2
Dim    G_surface
Units  G_surface = W m-2
Dim Tsoil_current(3)
Dim Tsoil_prev(3) = {NaN, NaN, NaN}
Dim soil_wtr_current(NMBR_CS65X)
Dim soil_wtr_prev (3) = {NaN, NaN, NaN}
Dim   SG_rep(NMBR_HFP)
Alias SG_rep(1) = SG_1_1_1
#If (NMBR_HFP > 1) Then
Alias SG_rep(2) = SG_1_1_2
#EndIf
Units SG_rep = W m-2
Dim   SG
Units SG = W m-2
Dim Offset_intv_delta_ht_storage
#EndIf
#If (SENSOR_Rn AND SENSOR_HFP AND SENSOR_CS65X) Then
Dim   energy_closure
Units energy_closure = fraction
#If (SENSOR_TE525) Then
Public poor_energy_closure_flg As Boolean
#EndIf
#EndIf
#If (SENSOR_Rn) Then
Dim   SW_IN
Units SW_IN = W m-2
#EndIf
#If (SENSOR_CS310) Then
Public PPFD_IN
Units  PPFD_IN = umolPhoton m-2 s-1
#EndIf
DisplayMenu ("System Control", TRUE)
SubMenu ("Site Var Settings")
MenuItem ("Meas Height",  height_measurement)
MenuItem ("Surface Type", surface_type)
MenuPick (CROP, GRASS, FOREST, SHRUB, BARELAND, WATER, ICE)
MenuItem ("Canopy Height",height_canopy)
MenuItem ("d, 0 = auto",  displacement_user)
MenuItem ("z0,0 = auto",  roughness_user)
#If (SENSOR_GPS) Then
MenuItem ("GPS Height",   height_GPS16X)
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X) Then
MenuItem ("Bulk Density", soil_bulk_density)
MenuItem ("C_dry_soil",   Cds)
MenuItem ("HFP Depth",    thick_abv_SHFP)
#EndIf
#If (CSAT3A_EC150) Then
MenuItem ("IRGA Coord x", separation_x_irga)
MenuItem ("IRGA Coord y", separation_y_irga)
#EndIf
MenuItem ("Sonic Azmth", sonic_azimuth)
MenuItem ("Latitude",    latitude)
MenuItem ("Hemisph_NS",  hemisphere_NS)
MenuPick (NORTH, SOUTH)
MenuItem ("Longitude",   longitude)
MenuItem ("Hemisph_EW",  hemisphere_EW)
MenuPick (EAST, WEST)
MenuItem ("Elevation",   elevation)
SubMenu ("Planar Fit Alpha")
MenuItem ("<=60or>=300",  alpha_PF_60_300)
MenuItem (">60 & <=170",  alpha_PF_60_170)
MenuItem (">170 & <190",  alpha_PF_170_190)
MenuItem (">=190 & <300", alpha_PF_190_300)
EndSubMenu
SubMenu ("Planar Fit Beta")
MenuItem ("<=60or>=300",  beta_PF_60_300)
MenuItem (">60 & <=170",  beta_PF_60_170)
MenuItem (">170 & <190",  beta_PF_170_190)
MenuItem (">=190 & <300", beta_PF_190_300)
EndSubMenu
SubMenu ("Footprt Fetch Intrst")
MenuItem ("<=60or>=300",  fetch_intrst_60_300)
MenuItem (">60 & <=170",  fetch_intrst_60_170)
MenuItem (">170 & <190",  fetch_intrst_170_190)
MenuItem (">=190 & <300", fetch_intrst_190_300)
EndSubMenu
SubMenu ("Fetch WD Filter")
MenuItem ("Low thrshld", fetch_wd_thrshold_low)
MenuItem ("Top thrshld", fetch_wd_thrshold_top)
EndSubMenu
EndSubMenu
SubMenu ("Instrument Settings")
SubMenu ("Change Press Source")
MenuItem ("Select Source", press_source)
MenuPick (BB, UB, EB)
MenuItem ("Set Source", set_press_source_flg)
MenuPick (TRUE, FALSE)
EndSubMenu
SubMenu ("Switch IRGA Power")
DisplayValue ("IRGA PW on", irga_actual_pwr_on)
DisplayValue ("Message",    message)
MenuItem ("IRGA ON/OFF", irga_power)
MenuPick (PWR_ON, PWR_OFF)
MenuItem ("Set IRGA Pwr", set_irga_power_flg)
MenuPick (TRUE, FALSE)
EndSubMenu
SubMenu ("Select IRGA Heater")
MenuItem ("Selct Heater", heater_user)
MenuPick (H_AUTO, H_MAX, H_OFF)
MenuItem ("Set Selcted", set_heater_flg)
MenuPick (TRUE, FALSE)
EndSubMenu
SubMenu ("Select T for CO2")
MenuItem ("Fast-T OnOff", select_CO2_fast_tmpr)
MenuPick (FAST_ON, FAST_OFF)
MenuItem ("Set Selcted", set_CO2_fast_tmpr_flg)
MenuPick (TRUE, FALSE)
EndSubMenu
SubMenu ("Shadow Correction")
MenuItem ("Selct Crrctn", shadow_corr)
MenuPick (CORR_ON, CORR_OFF)
MenuItem ("Set Selcted", set_shadow_corr_flg)
MenuPick (TRUE, FALSE)
EndSubMenu
#If (CSAT3A_EC150) Then
#If (CSAT_TYP_3AH) Then
SubMenu ("CSAT3AH Heating Ctrl")
MenuItem ("User Ctrl On", CSAT3H_user_ctrl_flg)
MenuPick (TRUE, FALSE)
EndSubMenu
#EndIf
#EndIf
EndSubMenu
SubMenu ("On-Site Zero/Span")
SubMenu ("CO2/H2O Zero")
DisplayValue ("CO2_mixratio", CO2_mixratio_kd)
DisplayValue ("H2O_mixratio", H2O_mixratio_kd)
MenuItem ("Set Zero", set_zero_flg)
MenuPick (TRUE, FALSE)
EndSubMenu
SubMenu ("CO2 Span")
MenuItem ("Spn CO2 umol", CO2_span_gas)
MenuItem ("Set CO2 Span", set_CO2_span_flg)
MenuPick (TRUE, FALSE)
DisplayValue ("CO2_mixratio", CO2_mixratio_kd)
EndSubMenu
SubMenu ("H2O Span")
MenuItem ("Spn H2O T_DP", T_DP_span_gas)
MenuItem ("Set H2O Span", set_H2O_span_flg)
MenuPick (TRUE, FALSE)
DisplayValue ("H2O_mixratio", H2O_mixratio_kd)
DisplayValue ("Msurd T_DP C", T_DP_amb)
#If (SENSOR_T_RH) Then
DisplayValue ("T_DP_Probe C", T_DP_Probe)
#EndIf
EndSubMenu
SubMenu ("Reset zro/spn coefs")
SubMenu ("Reset CO2 zro coef")
MenuItem ("Change coef", CO2_zero_coeff)
MenuItem ("Set change",  rst_CO2_zro_coef_flg)
MenuPick (TRUE, FALSE)
DisplayValue ("Status",  config_status)
EndSubMenu
SubMenu ("Reset CO2 spn coef")
MenuItem ("Change coef", CO2_span_coeff)
MenuItem ("Set change",  rst_CO2_spn_coef_flg)
MenuPick (TRUE, FALSE)
DisplayValue ("Status",  config_status)
EndSubMenu
SubMenu ("Reset H2O zro coef")
MenuItem ("Change coef", H2O_zero_coeff)
MenuItem ("Set change",  rst_H2O_zro_coef_flg)
MenuPick (TRUE, FALSE)
DisplayValue ("Status",  config_status)
EndSubMenu
SubMenu ("Reset H2O spn coef")
MenuItem ("Change coef", H2O_span_coeff)
MenuItem ("Set change",  rst_H2O_spn_coef_flg)
MenuPick (TRUE, FALSE)
DisplayValue ("Status",  config_status)
EndSubMenu
EndSubMenu
EndSubMenu
EndMenu
DataTable (Flux_AmeriFluxFormat, TRUE, FLUX_SIZE_CPU)
DataInterval (0, OUTPUT_INTV, Min, 0)
TableFile ("CRD:"&Status.SerialNumber(1,1)&"_Flux_AmeriFluxFormat_", -259, -1, 0, DAY_FLUX_CRD, day, 0, 0)
Sample (2, TIMESTAMP_START, IEEE8)
Sample (2, CO2,           IEEE4)
Sample (2, H2O,           IEEE4)
#If (SENSOR_LI7700) Then
Sample (1,CH4_Avg_MolFrac,IEEE4)
FieldNames ("CH4")
#EndIf
Sample (1, FC,            IEEE4)
Sample (1, FC_SSITC_TEST, IEEE4)
Sample (1, FH2O,          IEEE4)
Sample (1, LE_SSITC_TEST, IEEE4)
FieldNames ("FH2O_SSITC_TEST")
#If (SENSOR_LI7700) Then
Sample (1, FCH4,   IEEE4)
Sample (1,FCH4_SSITC_TEST,IEEE4)
#EndIf
Sample (1, LE,            IEEE4)
Sample (1, LE_SSITC_TEST, IEEE4)
Sample (1, H,             IEEE4)
Sample (1, H_SSITC_TEST,  IEEE4)
#If (SENSOR_HFP AND SENSOR_CS65X)  Then
Sample (1, G_surface,     IEEE4)
FieldNames ("G")
Sample (1, SG,            IEEE4)
#EndIf
Sample (1, FETCH_MAX,     IEEE4)
Sample (1, FETCH_90,      IEEE4)
Sample (1, FETCH_80,      IEEE4)
Sample (1, FETCH_70,      IEEE4)
Sample (1, FETCH_FILTER,  IEEE4)
Sample (1, MO_LENGTH,      IEEE4)
Sample (1, TAU,            IEEE4)
Sample (1, TAU_SSITC_TEST, IEEE4)
Sample (1, U_SIGMA,        IEEE4)
Sample (1, USTAR,          IEEE4)
Sample (1, V_SIGMA,        IEEE4)
Sample (1, W_SIGMA,        IEEE4)
Sample (1, WD,             IEEE4)
Sample (1, WS,             IEEE4)
Sample (1, WS_MAX,         IEEE4)
Sample (1, ZL,             IEEE4)
Sample (1, PA,             IEEE4)
Sample (1, TA_1_1_1,       IEEE4)
Sample (1, RH_1_1_1,       IEEE4)
Sample (1, TA_1_1_2,       IEEE4)
Sample (1, RH_1_1_2,       IEEE4)
#If (SENSOR_T_RH) Then
Sample  (2, TA_1_1_3,      IEEE4)
#EndIf
Sample (1, VPD,            IEEE4)
Sample (1, T_SONIC,        IEEE4)
Sample (1, T_SONIC_SIGMA,  IEEE4)
Sample (1, PBLH_F,         IEEE4)
#If (SENSOR_TCAV) Then
Average (1, TS_1_1_1, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_1")
#If (NMBR_TCAV > 1) Then
Average (1, TS_1_1_2, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_2")
#EndIf
#EndIf
#If ((NOT SENSOR_TCAV) AND SENSOR_CS65X) Then
Average (1, TS_1_1_1, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_1")
#If (NMBR_CS65X > 1) Then
Average (1, TS_1_1_2, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_2")
#EndIf
#EndIf
#If (SENSOR_CS65X) Then
Average (1, SWC_1_1_1, IEEE4, slowsequence_disable_f)
FieldNames ("SWC_1_1_1")
#If (NMBR_CS65X > 1) Then
Average (1, SWC_1_1_2, IEEE4, slowsequence_disable_f)
FieldNames ("SWC_1_1_2")
#EndIf
#EndIf
#If (SENSOR_Rn) Then
Sample (1, ALB,    IEEE4)
Sample (1, NETRAD, IEEE4)
#EndIf
#If (SENSOR_CS310) Then
Average (1, PPFD_IN, IEEE4, slowsequence_disable_f)
FieldNames("PPFD_IN")
#EndIf
#If (SENSOR_Rn) Then
Average (1, SW_IN, IEEE4, slowsequence_disable_f)
FieldNames ("SW_IN")
#EndIf
#If (SENSOR_Rn) Then
Sample (3, SW_OUT, IEEE4)
#EndIf
#If (SENSOR_TE525) Then
Totalize (1, P, IEEE4, 0)
FieldNames ("P")
#EndIf
EndTable
DataTable (Flux_CSFormat, TRUE, FLUX_SIZE_CPU)
DataInterval (0, OUTPUT_INTV, Min, 0)
TableFile ("CRD:"&Status.SerialNumber(1,1)&"_Flux_CSFormat_", 64, -1, 0, DAY_FLUX_CRD, day, 0, LastFileName_flux_CSFormat)
Sample (1, FC_mass, IEEE4)
Sample (1, FC_QC,   IEEE4)
Totalize (1, n, Long, (sonic_disable_f OR irga_disable_f OR CO2_bad_rng_sig_array(MAX_LAG +1)))
FieldNames ("FC_samples")
Sample (1, LE,      IEEE4)
Sample (1, LE_QC,   IEEE4)
Totalize (1, n, Long, (sonic_disable_f OR irga_disable_f OR H2O_bad_rng_sig_array(MAX_LAG +1)))
FieldNames ("LE_samples")
Sample (1, ET,      IEEE4)
Sample (1, LE_QC,   IEEE4)
FieldNames ("ET_QC")
Totalize (1, n, Long, (sonic_disable_f OR irga_disable_f OR H2O_bad_rng_sig_array(MAX_LAG +1)))
FieldNames ("ET_samples")
Sample (1, H,       IEEE4)
Sample (1, H_QC,    IEEE4)
Totalize (1, n, Long, (sonic_disable_f OR irga_disable_f OR H2O_bad_rng_sig_array(MAX_LAG +1)))
FieldNames ("H_samples")
#If (SENSOR_LI7700) Then
Sample (1,FCH4_mass,IEEE4)
Totalize (1, n, Long, (sonic_disable_f OR CH4_bad_data_flg(MAX_LAG2 +1)))
FieldNames ("FCH4_samples")
#EndIf
#If (SENSOR_Rn) Then
Sample (1, NETRAD, IEEE4)
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X)  Then
Sample (1, G_surface, IEEE4)
FieldNames ("G")
Sample (1, SG, IEEE4)
#EndIf
#If (SENSOR_Rn AND SENSOR_HFP AND SENSOR_CS65X) Then
Sample (1, energy_closure, IEEE4)
#If (SENSOR_TE525) Then
Sample (1, truefalse (2 + poor_energy_closure_flg), String)
FieldNames ("poor_enrg_clsur")
#EndIf
#EndIf
Sample (1, Bowen_ratio,   IEEE4)
Sample (1, TAU,           IEEE4)
Sample (1, TAU_QC,        IEEE4)
Sample (1, USTAR,         IEEE4)
Sample (1, TSTAR,         IEEE4)
Sample (1, TKE,           IEEE4)
Sample (1, TA_1_1_1,      IEEE4)
Sample (2, RH_1_1_1,      IEEE4)
Sample (1, e_amb_Avg,     IEEE4)
FieldNames ("e_amb")
Sample (1, e_sat_amb_Avg, IEEE4)
FieldNames ("e_sat_amb")
Sample (1, TA_1_1_2,      IEEE4)
Sample (2, RH_1_1_2,      IEEE4)
Sample (1, e_Avg,         IEEE4)
FieldNames ("e")
Sample (1, e_sat_Avg,     IEEE4)
FieldNames ("e_sat")
#If (SENSOR_T_RH) Then
Sample (1, TA_1_1_3,      IEEE4)
Sample (2, RH_1_1_3,      IEEE4)
Sample (3, e_probe_Avg,   IEEE4)
FieldNames ("e_probe,e_sat_probe,H2O_density_probe")
#EndIf
Sample (1, PA,            IEEE4)
Sample (1, VPD,           IEEE4)
Sample (2, Ux_Avg,        IEEE4)
FieldNames ("Ux,Ux_SIGMA")
Sample (2, Uy_Avg,        IEEE4)
FieldNames ("Uy,Uy_SIGMA")
Sample (2, Uz_Avg,        IEEE4)
FieldNames ("Uz,Uz_SIGMA")
Sample (1, T_SONIC,       IEEE4)
Sample (1, T_SONIC_SIGMA, IEEE4)
Sample (1, sonic_azimuth, IEEE4)
Sample (4, WS,            IEEE4)
Sample (1, WD,            IEEE4)
Sample (1, WS_MAX,        IEEE4)
Sample (2, CO2_density_Avg, IEEE4)
FieldNames ("CO2_density,CO2_density_SIGMA")
Sample (2, H2O_density_Avg, IEEE4)
FieldNames ("H2O_density,H2O_density_SIGMA")
Minimum (1, CO2_sig_strgth, IEEE4, irga_disable_f, FALSE)
FieldNames ("CO2_sig_strgth_Min")
Minimum (1, H2O_sig_strgth, IEEE4, irga_disable_f, FALSE)
FieldNames ("H2O_sig_strgth_Min")
#If (SENSOR_LI7700) Then
Sample (1, press_77_Avg, IEEE4)
FieldNames ("LI7700_amb_press")
Sample (1, tmpr_77_Avg,  IEEE4)
FieldNames ("LI7700_amb_tmpr")
Sample (1, CH4_Avg,      IEEE4)
FieldNames ("CH4_density")
Sample (1, CH4_SIGMA,    IEEE4)
FieldNames ("CH4_density_SIGMA")
Minimum (1, rssi_77_ts, IEEE4, diag_77_ts, FALSE)
FieldNames ("CH4_sig_strgth_Min")
#EndIf
#If (SENSOR_TE525) Then
Totalize (1, P, IEEE4, 0)
FieldNames ("P")
#EndIf
#If (SENSOR_Rn) Then
Sample (1, ALB, IEEE4)
Average (1, SW_IN, IEEE4, slowsequence_disable_f)
FieldNames ("SW_IN")
#EndIf
#If (SENSOR_Rn) Then
Sample (3, SW_OUT, IEEE4)
Sample (2, T_nr_Avg,       IEEE4)
FieldNames ("T_nr_in,T_nr_out")
#EndIf
#If (SENSOR_CS310) Then
Average (1, PPFD_IN, IEEE4, slowsequence_disable_f)
FieldNames ("PPFD_IN")
#EndIf
Average (5, sun_azimuth, IEEE4, slowsequence_disable_f)
FieldNames ("sun_azimuth,sun_elevation,hour_angle,sun_declination,air_mass_coeff")
Totalize (1, daytime_frac_scan_intv, IEEE4, slowsequence_disable_f)
FieldNames ("daytime")
#If(SENSOR_TCAV OR SENSOR_CS65X)  Then
#EndIf
#If (SENSOR_TCAV) Then
Average (1, TS_1_1_1, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_1")
#If (NMBR_TCAV > 1) Then
Average (1, TS_1_1_2, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_2")
#EndIf
#EndIf
#If ((NOT SENSOR_TCAV) AND SENSOR_CS65X)  Then
Average (1, TS_1_1_1, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_1")
#If (NMBR_CS65X > 1) Then
Average (1, TS_1_1_2, IEEE4, slowsequence_disable_f)
FieldNames ("TS_1_1_2")
#EndIf
#EndIf
#If (SENSOR_CS65X) Then
Average (1, SWC_1_1_1, IEEE4, slowsequence_disable_f)
FieldNames ("SWC_1_1_1")
#If (NMBR_CS65X > 1) Then
Average (1, SWC_1_1_2, IEEE4, slowsequence_disable_f)
FieldNames ("SWC_1_1_2")
#EndIf
#EndIf
#If (SENSOR_TCAV AND SENSOR_CS65X)  Then
Average (1, cs65x_tmpr(1), IEEE4, slowsequence_disable_f)
FieldNames ("TS_CS65X_1_1_1")
#If (NMBR_CS65X > 1) Then
Average (1, cs65x_tmpr(2), IEEE4, slowsequence_disable_f)
FieldNames ("TS_CS65X_1_1_2")
#EndIf
#EndIf
#If (SENSOR_CS65X) Then
Average (1, cs65x_ec(1), IEEE4, slowsequence_disable_f)
FieldNames ("cs65x_ec_1_1_1")
#If (NMBR_CS65X > 1) Then
Average (1, cs65x_ec(2), IEEE4, slowsequence_disable_f)
FieldNames ("cs65x_ec_1_1_2")
#EndIf
#EndIf
#If (SENSOR_HFP) Then
Sample (NMBR_HFP, G_plate_1_1_1, IEEE4)
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X) Then
Sample (NMBR_HFP, G_1_1_1,  IEEE4)
Sample (NMBR_HFP, SG_1_1_1, IEEE4)
#EndIf
Sample (1, FETCH_MAX,       IEEE4)
Sample (1, FETCH_90,        IEEE4)
Sample (1, FETCH_80,        IEEE4)
Sample (1, FETCH_70,        IEEE4)
Sample (1, FETCH_FILTER,    IEEE4)
Sample (1, FETCH_INTRST,    IEEE4)
Sample (1, FP_FETCH_INTRST, IEEE4)
Sample (1, FP_EQUATION,     String)
#If (NOT ONE_FL_TABLE) Then
EndTable
DataTable (Flux_Notes, TRUE, FLUX_SIZE_CPU)
DataInterval (0, OUTPUT_INTV, Min, 0)
TableFile ("CRD:"&Status.SerialNumber(1,1)&"_Flux_Notes_", 64, -1, 0,DAY_FLUX_CRD, day, 0, 0)
#EndIf
Sample (2, UxUy_Cov,  IEEE4)
Sample (1, UyUz_Cov,  IEEE4)
Sample (3, TsUx_Cov,  IEEE4)
Sample (1, USTAR_R,  IEEE4)
Sample (1, U,        IEEE4)
Sample (1, U_SIGMA,  IEEE4)
Sample (1, V,        IEEE4)
Sample (1, V_SIGMA,  IEEE4)
Sample (1, W,        IEEE4)
Sample (1, W_SIGMA,  IEEE4)
Sample (1, UV_Cov,   IEEE4)
Sample (1, UW_Cov,   IEEE4)
Sample (1, VW_Cov,   IEEE4)
Sample (1, UT_SONIC_Cov, IEEE4)
Sample (1, VT_SONIC_Cov, IEEE4)
Sample (1, WT_SONIC_Cov, IEEE4)
Sample (1, UW_Cov_fc,       IEEE4)
Sample (1, VW_Cov_fc,       IEEE4)
Sample (1, WT_SONIC_Cov_fc, IEEE4)
Sample (1, WT_SONIC_Cov_fc_SND,  IEEE4)
Totalize (1, n, Long, sonic_disable_f)
FieldNames ("sonic_samples")
Sample (1, diag_sonic_aggregate, Long)
Totalize (1, n, Long, (diag_sonic <> -1))
FieldNames ("no_sonic_head_Tot")
Totalize (1, n, Long, (diag_sonic <> NAN))
FieldNames ("no_new_sonic_data_Tot")
Totalize (1, n, Long, sonic_amp_l_f   IMP (diag_sonic = NAN))
FieldNames ("sonic_amp_l_f_Tot")
Totalize (1, n, Long, sonic_amp_h_f   IMP (diag_sonic = NAN))
FieldNames ("sonic_amp_h_f_Tot")
Totalize (1, n, Long, sonic_sig_lck_f IMP (diag_sonic = NAN))
FieldNames ("sonic_sig_lck_f_Tot")
Totalize (1, n, Long, sonic_del_T_f   IMP (diag_sonic = NAN))
FieldNames ("sonic_del_T_f_Tot")
Totalize (1, n, Long, sonic_aq_sig_f  IMP (diag_sonic = NAN))
FieldNames ("sonic_aq_sig_f_Tot")
Totalize (1, n, Long, sonic_cal_err_f IMP (diag_sonic = NAN))
FieldNames ("sonic_cal_err_f_Tot")
Sample (3, UxCO2_Cov, IEEE4)
Sample (3, UxH2O_Cov, IEEE4)
Sample (1, UCO2_Cov, IEEE4)
Sample (1, VCO2_Cov, IEEE4)
Sample (1, WCO2_Cov, IEEE4)
Sample (1, UH2O_Cov, IEEE4)
Sample (1, VH2O_Cov, IEEE4)
Sample (1, WH2O_Cov, IEEE4)
Sample (1, WCO2_Cov_fc,  IEEE4)
Sample (1, WH2O_Cov_fc,  IEEE4)
Sample (1, CO2_E_WPL_fc, IEEE4)
Sample (1, CO2_T_WPL_fc, IEEE4)
Sample (1, H2O_E_WPL_fc, IEEE4)
Sample (1, H2O_T_WPL_fc, IEEE4)
Totalize (1, n, Long, (irga_disable_f OR CO2_bad_rng_sig_array(MAX_LAG +1)))
FieldNames ("CO2_samples")
Totalize (1, n, Long, (irga_disable_f OR H2O_bad_rng_sig_array(MAX_LAG +1)))
FieldNames ("H2O_samples")
Sample (1, diag_irga_aggregate, Long)
Totalize (1, n, Long, diag_irga <> -1)
FieldNames ("no_irga_head_Tot")
Totalize (1, n, Long, diag_irga <> NAN)
FieldNames ("no_new_irga_data_Tot")
Totalize (1, n, Long, irga_bad_data_f       IMP (diag_irga = NAN))
FieldNames ("irga_bad_data_f_Tot")
Totalize (1, n, Long, irga_gen_fault_f      IMP (diag_irga = NAN))
FieldNames ("irga_gen_fault_f_Tot")
Totalize (1, n, Long, irga_startup_f        IMP (diag_irga = NAN))
FieldNames ("irga_startup_f_Tot")
Totalize (1, n, Long, irga_motor_spd_f      IMP (diag_irga = NAN))
FieldNames ("irga_motor_spd_f_Tot")
Totalize (1, n, Long, irga_tec_tmpr_f       IMP (diag_irga = NAN))
FieldNames ("irga_tec_tmpr_f_Tot")
Totalize (1, n, Long, irga_src_pwr_f        IMP (diag_irga = NAN))
FieldNames ("irga_src_pwr_f_Tot")
Totalize (1, n, Long, irga_src_tmpr_f       IMP (diag_irga = NAN))
FieldNames ("irga_src_tmpr_f_Tot")
Totalize (1, n, Long, irga_src_curr_f       IMP (diag_irga = NAN))
FieldNames ("irga_src_curr_f_Tot")
Totalize (1, n, Long, irga_off_f            IMP (diag_irga = NAN))
FieldNames ("irga_off_f_Tot")
Totalize (1, n, Long, irga_sync_f           IMP (diag_irga = NAN))
FieldNames ("irga_sync_f_Tot")
Totalize (1, n, Long, irga_amb_tmpr_f       IMP (diag_irga = NAN))
FieldNames ("irga_amb_tmpr_f_Tot")
Totalize (1, n, Long, irga_amb_press_f      IMP (diag_irga = NAN))
FieldNames ("irga_amb_press_f_Tot")
Totalize (1, n, Long, irga_CO2_I_f          IMP (diag_irga = NAN))
FieldNames ("irga_CO2_I_f_Tot")
Totalize (1, n, Long, irga_CO2_Io_f         IMP (diag_irga = NAN))
FieldNames ("irga_CO2_Io_f_Tot")
Totalize (1, n, Long, irga_H2O_I_f          IMP (diag_irga = NAN))
FieldNames ("irga_H2O_I_f_Tot")
Totalize (1, n, Long, irga_H2O_Io_f         IMP (diag_irga = NAN))
FieldNames ("irga_H2O_Io_f_Tot")
Totalize (1, n, Long, irga_CO2_Io_var_f     IMP (diag_irga = NAN))
FieldNames ("irga_CO2_Io_var_f_Tot")
Totalize (1, n, Long, irga_H2O_Io_var_f     IMP (diag_irga = NAN))
FieldNames ("irga_H2O_Io_var_f_Tot")
Totalize (1, n, Long, irga_CO2_sig_strgth_f IMP (diag_irga = NAN))
FieldNames ("irga_CO2_sig_strgth_f_Tot")
Totalize (1, n, Long, irga_H2O_sig_strgth_f IMP (diag_irga = NAN))
FieldNames ("irga_H2O_sig_strgth_f_Tot")
Totalize (1, n, Long, irga_cal_err_f        IMP (diag_irga = NAN))
FieldNames ("irga_cal_err_f_Tot")
Totalize (1, n, Long, irga_htr_ctrl_off_f   IMP (diag_irga = NAN))
FieldNames ("irga_htr_ctrl_off_f_Tot")
#If (SENSOR_LI7700) Then
Sample (1, UxCH4_Cov, IEEE4)
Sample (1, UyCH4_Cov, IEEE4)
Sample (1, UzCH4_Cov, IEEE4)
Sample (1, UCH4_Cov, IEEE4)
Sample (1, VCH4_Cov, IEEE4)
Sample (1, WCH4_Cov, IEEE4)
Sample (1, WCH4_Cov_fc,  IEEE4)
Sample (1, CH4_E_WPL_fc, IEEE4)
Sample (1, CH4_T_WPL_fc, IEEE4)
Totalize (1, n, Long, CH4_bad_data_flg(MAX_LAG2 + 1))
FieldNames ("CH4_samples")
Sample (1, diag_77_aggregate, Long)
#EndIf
Sample (1, alpha, IEEE4)
Sample (1, beta,  IEEE4)
Sample (1, gamma, IEEE4)
Sample (2, fetch_wd_thrshold_low, IEEE4)
Sample (1, height_measurement,    IEEE4)
Sample (1, height_canopy,         IEEE4)
Sample (1, surface_type_text,    String)
Sample (1, displacement_user,     IEEE4)
Sample (1, d,                     IEEE4)
Sample (1, roughness_user,        IEEE4)
Sample (1, z0,                    IEEE4)
Sample (1, z,                     IEEE4)
Sample (1, MO_LENGTH,             IEEE4)
Sample (1, ZL,                    IEEE4)
Sample (1, iteration_FreqFactor,  IEEE4)
Sample (1, latitude,              IEEE4)
Sample (1, longitude,             IEEE4)
Sample (1, elevation,             IEEE4)
Sample (1, UTC_OFST,              Long)
FieldNames ("UTC_OFFSET")
Sample (2, separation_x_irga,        IEEE4)
Sample (1, separation_lat_dist_irga, IEEE4)
Sample (1, separation_lag_dist_irga, IEEE4)
Sample (1, separation_lag_scan_irga, IEEE4)
#If (SENSOR_LI7700) Then
Sample (1, SEPARATION_X_GA_77,       IEEE4)
Sample (1, SEPARATION_Y_GA_77,       IEEE4)
Sample (1, separation_lat_dist_CH4,  IEEE4)
Sample (1, separation_lag_dist_CH4,  IEEE4)
Sample (1, separation_lag_scan_CH4,  IEEE4)
#EndIf
Sample (1, MAX_LAG,  Long)
FieldNames ("MAX_LAG")
Sample (1, lag_irga, IEEE4)
#If (SENSOR_LI7700) Then
Sample (1, lag_CH4,   IEEE4)
FieldNames ("lag_LI7700")
#EndIf
Sample (1, FreqFactor_UW_VW,     IEEE4)
Sample (1, FreqFactor_WT_SONIC,  IEEE4)
Sample (1, FreqFactor_WCO2_WH2O, IEEE4)
#If (SENSOR_LI7700) Then
Sample (1, FreqFactor_WCH4,      IEEE4)
#EndIf
Sample (2, rho_d_amb_Avg,        IEEE4)
FieldNames ("rho_d_amb,rho_a_amb")
Sample (2, rho_d_Avg,            IEEE4)
FieldNames ("rho_d,rho_a")
#If (SENSOR_T_RH) Then
Sample  (2, rho_d_probe_Avg,     IEEE4)
FieldNames ("rho_d_probe,rho_a_probe")
#EndIf
Sample (1, Cp, IEEE4)
Sample (1, Lv, IEEE4)
Average(1, T_panel, IEEE4, FALSE)
FieldNames ("T_panel")
Average  (1, V_batt, IEEE4, slowsequence_disable_f)
FieldNames ("V_batt")
Totalize (1, n,      Long, slowsequence_disable_f)
FieldNames ("slowsequence_Tot")
#If (SENSOR_SN500) Then
Totalize (1, sn500_heater_secs,  IEEE4, (NOT sn500_heater_on_f))
FieldNames("sn500_heater_secs")
#EndIf
#If (SENSOR_HFP) Then
Sample (1, shf_plate_cal(1), IEEE4)
FieldNames ("shfp_cal_1_1_1")
#If (NMBR_HFP > 1) Then
Sample (1, shf_plate_cal(2), IEEE4)
FieldNames ("shfp_cal_1_1_2")
#EndIf
#If (NMBR_HFP > 2) Then
Sample (1, shf_plate_cal(3), IEEE4)
FieldNames ("shfp_cal_1_1_3")
#EndIf
#EndIf
Average  (1, process_time, IEEE4, slowsequence_disable_f)
FieldNames ("process_time")
Maximum  (1, process_time, IEEE4, slowsequence_disable_f, FALSE)
FieldNames ("process_time_Max")
Maximum  (1, buff_depth,   IEEE4, slowsequence_disable_f, FALSE)
FieldNames ("buff_depth_Max")
EndTable
DataTable (Time_Series, TRUE, -1)
DataInterval (0, SCN_INTV, mSec, 0)
TableFile ("CRD:"&Status.SerialNumber(1,1)&"_Time_Series_", 64, -1, 0, DAY_TSRS_CRD, day, 0, LastFileName_Time_Series)
Sample (3, Ux, IEEE4)
FieldNames ("Ux,Uy,Uz")
Sample (1, Ts, IEEE4)
FieldNames ("T_SONIC")
Sample (1, diag_sonic, IEEE4)
FieldNames ("diag_sonic")
Sample (1, CO2_density_slow_tmpr, IEEE4)
FieldNames ("CO2_density")
Sample (1, CO2_density_fast_tmpr, IEEE4)
FieldNames ("CO2_density_fast_tmpr")
Sample (1, H2O_density,           IEEE4)
FieldNames ("H2O_density")
Sample (1, diag_irga,             IEEE4)
FieldNames ("diag_irga")
#If (IRGASON) Then
Sample (1, Tc,                   IEEE4)
FieldNames ("T_SONIC_corr")
#EndIf
Sample (4, T_amb,IEEE4)
FieldNames ("TA_1_1_1,PA,CO2_sig_strgth,H2O_sig_strgth")
#If (SENSOR_LI7700) Then
Sample (1, CH4_77_ts,   IEEE4)
FieldNames ("LI7700_CH4D")
Sample (1, press_77_ts, IEEE4)
FieldNames ("LI7700_pressure")
Sample (1, tmpr_77_ts,  IEEE4)
FieldNames ("LI7700_temperature")
Sample (1, rssi_77_ts,  IEEE4)
FieldNames ("LI7700_sig_strgth")
Sample (1, diag_77_ts,  IEEE4)
FieldNames ("LI7700_diag")
#EndIf
EndTable
DataTable (Diagnostic, TRUE, 1)
Sample (6, sonic_amp_l_f,    Boolean)
Sample (22, irga_bad_data_f, Boolean)
Sample (4,  CO2_zero_coeff,  IEEE4)
EndTable
DataTable (System_Operatn_Notes, TRUE, NMBR_RCRDS_OPRTN_NOTES_CPU)
CardOut (0, NMBR_RCRDS_OPRTN_NOTES_CRD)
Sample (1, message, String)
FieldNames ("Message")
Sample (2, curr_value_str, String)
FieldNames ("Current Value,Previous Value")
EndTable
Sub Rotation12_Momentum (alph, gamm, _
U_mean,  V_mean,  W_mean,  UU_cov,  VV_cov,  WW_cov,  UVcov,   UWcov,   VWcov, _
Umean_R, Vmean_R, Wmean_R, UUcov_R, VVcov_R, WWcov_R, UVcov_R, UWcov_R, VWcov_R )
UWcov_R =  UU_cov*COS(gamm)*COS(gamm) + VV_cov*SIN(gamm)*SIN(gamm)
VWcov_R =  UWcov*COS(gamm) + VWcov*SIN(gamm)
Umean_R = COS(alph)*(U_mean*COS(gamm) + V_mean*SIN(gamm)) - W_mean*SIN(alph)
Vmean_R = 0
Wmean_R = SIN(alph)*(U_mean*COS(gamm) + V_mean*SIN(gamm)) + W_mean*COS(alph)
UUcov_R = COS(alph)*COS(alph)*UWcov_R + _
WW_cov*SIN(alph)*SIN(alph) + UVcov*COS(alph)*COS(alph)*SIN(2*gamm) - _
SIN(2*alph)*VWcov_R
VVcov_R = UU_cov*SIN(gamm)*SIN(gamm) + VV_cov*COS(gamm)*COS(gamm) - UVcov*SIN(2*gamm)
WWcov_R = SIN(alph)*SIN(alph)*UWcov_R  + _
WW_cov*COS(alph)*COS(alph) + UVcov*SIN(alph)*SIN(alph)*SIN(2*gamm) + _
SIN(2*alph)*VWcov_R
UVcov_R = -0.5*(UU_cov - VV_cov)*COS(alph)*SIN(2*gamm) + _
UVcov*COS(alph)*COS(2*gamm) + _
SIN(alph)*(UWcov*SIN(gamm) - VWcov*COS(gamm))
UWcov_R =  0.5*SIN(2*alph)*(UWcov_R - WW_cov + UVcov*SIN(2*gamm)) + COS(2*alph)*VWcov_R
VWcov_R = -SIN(alph)*(0.5*(UU_cov - VV_cov)*SIN(2*gamm)-UVcov*COS(2*gamm))- _
COS(alph)*(UWcov*SIN(gamm) - VWcov*COS(gamm))
EndSub
Sub Rotation12_Scalar_Covariance (alph, gamm, SU_cov,  SV_cov, SW_cov, SUcov_R, SVcov_R, SWcov_R)
SUcov_R =  COS(alph)*(SU_cov*COS(gamm) + SV_cov*SIN(gamm)) - SW_cov*SIN(alph)
SVcov_R = -SU_cov*SIN(gamm) + SV_cov*COS(gamm)
SWcov_R =  SIN(alph)*(SU_cov*COS(gamm) + SV_cov*SIN(gamm)) + SW_cov*COS(alph)
EndSub
Sub Rotation23_Momentum(alph, bet, _
U_mean,  V_mean,  W_mean,  UU_cov,  VV_cov,  WW_cov,  UVcov,   UWcov,   VWcov, _
Umean_R, Vmean_R, Wmean_R, UUcov_R, VVcov_R, WWcov_R, UVcov_R, UWcov_R, VWcov_R )
Wmean_R =  U_mean*SIN(alph) + W_mean*COS(alph)
VWcov_R =  UU_cov*SIN(alph)*SIN(alph) + UWcov*SIN(2*alph) + WW_cov*COS(alph)*COS(alph)
UVcov_R =  (UVcov*SIN(alph) + VWcov*COS(alph))*SIN(2*bet)
UWcov_R =  UWcov*COS(2*alph) + 0.5*(UU_cov - WW_cov)*SIN(2*alph)
Umean_R = U_mean*COS(alph) -  W_mean*SIN(alph)
Vmean_R = V_mean*COS(bet)  +  Wmean_R*SIN(bet)
Wmean_R = -V_mean*SIN(bet) +  Wmean_R*COS(bet)
UUcov_R = UU_cov*COS(alph)*COS(alph) + WW_cov*SIN(alph)*SIN(alph) - UWcov*SIN(2*alph)
VVcov_R = VV_cov*COS(bet)*COS(bet) + UVcov_R + VWcov_R*SIN(bet)*SIN(bet)
WWcov_R = VV_cov*SIN(bet)*SIN(bet) - UVcov_R + VWcov_R*COS(bet)*COS(bet)
UVcov_R = UWcov_R*SIN(bet) + (UVcov*COS(alph) - VWcov*SIN(alph))*COS(bet)
UWcov_R = UWcov_R*COS(bet) - (UVcov*COS(alph) - VWcov*SIN(alph))*SIN(bet)
VWcov_R = 0.5*(VWcov_R - VV_cov)*SIN(2*beta) + (UVcov*SIN(alph) + VWcov*COS(alph))*COS(2*bet)
EndSub
Sub Rotation23_Scalar_Covariance (alph, bet, _
SU_cov,   SV_cov,   SW_cov, _
SU_cov_R, SV_cov_R, SW_cov_R)
SU_cov_R = SU_cov*COS(alph) - SW_cov*SIN(alph)
SV_cov_R = (SU_cov*SIN(alph) + SW_cov*COS(alph))*SIN(bet) + SV_cov*COS(bet)
SW_cov_R = (SU_cov*SIN(alph) + SW_cov*COS(alph))*COS(bet) - SV_cov*SIN(bet)
EndSub
Sub Displacement_roughness_heights (S_type, d_user, z0_user, h_canopy, h_measurement, displacement, roughness, h_aerodynamic)
If ((S_type = CROP) OR (S_type = GRASS)) Then
Select Case h_canopy
Case Is = 0.0
displacement = 0.0
roughness    = 0.01
Case Is > 0.0
displacement = 10.0^(0.979*LOG10(h_canopy) - 0.154)
roughness    = 10.0^(0.977*LOG10(h_canopy) - 0.883)
EndSelect
EndIf
If ((S_type = FOREST) OR (S_type = SHRUB)) Then
displacement = 2.0*h_canopy/3.0
roughness    = 0.06*h_canopy
EndIf
If ((S_type = BARELAND) OR (S_type = WATER) OR (S_type = ICE)) Then
displacement = 0.0
roughness    = 0.01
EndIf
If (d_user <> 0.0)  Then displacement = d_user
If (z0_user <> 0.0) Then roughness    = z0_user
h_aerodynamic = h_measurement - displacement
EndSub
Sub FreqFactorCSAT_UW_VW_BA_LA (height_aerodynamic, stability, U_total, freq_factor)
Dim cosp_uw
Dim tran_func_BA
Dim tran_func_LA_ww
Dim tran_func_LA_uu
Dim freq
Dim freq_factor_numerator
Dim freq_factor_denominator
Dim weight
Dim J As Long
Dim zu
Dim pu_csat
Dim PI2_pu_freq_csat
Dim A_uw, B_uw
If ((stability <> NaN) AND (U_total <> NaN)) Then
freq_factor_numerator   = 0.0
freq_factor_denominator = 0.0
zu      = height_aerodynamic/U_total
pu_csat = PATH_LENGTH_CSAT/U_total
Select Case stability
Case Is > 0.0 AND Is <= 4.0
A_uw =  0.124*((1.0 + 7.9*stability)^0.75)
B_uw = 23.252*((1.0 + 7.9*stability)^(-0.825))
Case Is > 4
A_uw =  0.124*((1.0 + 7.9*4.0)^0.75)
B_uw = 23.252*((1.0 + 7.9*4.0)^(-0.825))
EndSelect
For J = 0 To FREQ_BIN
freq  = START_FREQ*(STEP_BASE_FREQ^J)
PI2_pu_freq_csat = 2.0*PI*pu_csat*freq
If stability > 0.0 Then
cosp_uw = freq*zu/(A_uw + B_uw*(freq*zu)^2.1)
Else
Select Case (zu*freq)
Case Is < 0.24
cosp_uw = 20.78*freq*zu/((1.0 + 31.0*freq*zu)^1.575)
Case Is >= 0.24
cosp_uw = 12.66*freq*zu/((1.0 + 9.6*freq*zu)^2.4)
EndSelect
EndIf
tran_func_BA    = 1.0 - (SIN (10800*OUTPUT_INTV*freq)/(PI*60*OUTPUT_INTV*freq))^2
tran_func_LA_uu = (SIN (180.0*pu_csat*freq)/(PI*pu_csat*freq))^2.0
If PI2_pu_freq_csat >= 0.01 Then
tran_func_LA_ww = (4.0/PI2_pu_freq_csat)*(1.0 + (PI2_pu_freq_csat + 3.0)/(2.0*PI2_pu_freq_csat*EXP(PI2_pu_freq_csat)) - 3.0/(2.0*PI2_pu_freq_csat))
Else
tran_func_LA_ww = 1.0
EndIf
weight = 2.0 + 2.0*(J MOD 2) + (J = 0) + (J = FREQ_BIN)
freq_factor_numerator   += weight*cosp_uw
freq_factor_denominator += weight*cosp_uw*tran_func_BA*SQR(tran_func_LA_uu*tran_func_LA_ww)
Next J
freq_factor = freq_factor_numerator/freq_factor_denominator
Else
freq_factor = 1.0
EndIf
EndSub
Sub FreqFactorCSAT_wTs_BA_LA (height_aerodynamic, stability, U_total, tran_func_LA_Dijk(2,35), freq_factor)
Dim cosp_wTs
Dim tran_func_BA
Dim Tran_func_LA_wTs
Dim freq
Dim freq_factor_numerator
Dim freq_factor_denominator
Dim weight
Dim J  As Long
Dim jj As Long
Dim Prev_jj As Long
Dim zu
Dim pu_csat
Dim PI2_pu_freq_csat
Dim A_wTs, B_wTs
If ((stability <> NaN) AND (U_total <> NaN)) Then
freq_factor_numerator   = 0.0
freq_factor_denominator = 0.0
Prev_jj                 = 1
zu      = height_aerodynamic/U_total
pu_csat = PATH_LENGTH_CSAT/U_total
Select Case stability
Case Is > 0.0 AND Is <= 4.0
A_wTs = 0.2840*((1.0 + 6.4*stability)^0.75)
B_wTs = 9.3447*((1.0 + 6.4*stability)^(-0.825))
Case Is > 4.0
A_wTs = 0.2840*((1.0 + 6.4*4.0)^0.75)
B_wTs = 9.3447*((1.0 + 6.4*4.0)^(-0.825))
EndSelect
For J = 0 To FREQ_BIN
freq = START_FREQ*(STEP_BASE_FREQ^J)
PI2_pu_freq_csat = 2.0*PI*pu_csat*freq
If (stability > 0.0) Then
cosp_wTs   = zu*freq/(A_wTs + B_wTs*(zu*freq)^2.1)
Else
Select Case (zu*freq)
Case Is < 0.54
cosp_wTs = 12.92*zu*freq/((1 + 26.7*zu*freq)^1.375)
Case Is >= 0.54
cosp_wTs =  4.378*zu*freq/((1 + 3.8*zu*freq)^2.4)
EndSelect
EndIf
tran_func_BA = 1.0 - (SIN (10800*OUTPUT_INTV*freq)/(PI*60*OUTPUT_INTV*freq))^2.0
For jj = Prev_jj To 34
If  (PI2_pu_freq_csat >= tran_func_LA_Dijk(1,jj)) AND  (PI2_pu_freq_csat < tran_func_LA_Dijk(1, jj+1)) Then
Tran_func_LA_wTs = tran_func_LA_Dijk(2,jj) + (PI2_pu_freq_csat - tran_func_LA_Dijk(1,jj))*(tran_func_LA_Dijk(2,jj+1) _
-tran_func_LA_Dijk(2,jj))/(tran_func_LA_Dijk(1,jj+1) - tran_func_LA_Dijk(1,jj))
Prev_jj = jj
ExitFor
EndIf
Next jj
If (PI2_pu_freq_csat >= tran_func_LA_Dijk(1, 35)) Then Tran_func_LA_wTs = tran_func_LA_Dijk(2, 35)
weight = 2.0 + 2.0*(J MOD 2) + (J = 0) + (J = FREQ_BIN)
freq_factor_numerator   += weight*cosp_wTs
freq_factor_denominator += weight*cosp_wTs*tran_func_BA*Tran_func_LA_wTs
Next J
freq_factor = freq_factor_numerator/freq_factor_denominator
Else
freq_factor = 1.0
EndIf
EndSub
Sub Separation_Lag_Lateral_Distances (wnd_dir, separation_x, separation_y, separation_lat_dis, separation_lag_dis)
separation_lag_dis =  separation_x*COS(wnd_dir) + separation_y*SIN(wnd_dir)
separation_lat_dis = -separation_x*SIN(wnd_dir) + separation_y*COS(wnd_dir)
EndSub
Sub FreqFactorCSOPEC_wco2_wh2o_BA_LA_SP (height_aerodynamic, stability, U_total, separation_lat_dis, freq_factor)
Dim cosp_wco2_wh2o
Dim tran_func_BA
Dim tran_func_LA_ww
Dim tran_func_LA_co2_h2o
Dim tran_func_SP_wco2_wh2o
Dim freq
Dim freq_factor_numerator
Dim freq_factor_denominator
Dim weight
Dim J As Long
Dim zu
Dim pu_csat
Dim pu_irga
Dim du_irga
Dim PI2_pu_csat
Dim PI2_pu_irga
Dim PI2_pu_freq_csat
Dim PI2_pu_freq_irga
Dim A_wco2_wh2o, B_wco2_wh2o
If ((stability <> NaN) AND (U_total <> NaN) AND (separation_lat_dis <> NaN)) Then
freq_factor_numerator   = 0.0
freq_factor_denominator = 0.0
zu      = height_aerodynamic/U_total
pu_csat = PATH_LENGTH_CSAT/U_total
pu_irga = PATH_LENGTH_IRGA/U_total
du_irga = ABS(separation_lat_dis)/U_total
PI2_pu_csat = 2.0*PI*pu_csat
PI2_pu_irga = 2.0*PI*pu_irga
Select Case stability
Case Is > 0.0 AND Is <= 4.0
A_wco2_wh2o = 0.2840*((1.0 + 6.4*stability)^0.75)
B_wco2_wh2o = 9.3447*((1.0 + 6.4*stability)^(-0.825))
Case Is > 4
A_wco2_wh2o = 0.2840*((1.0 + 6.4*4.0)^0.75)
B_wco2_wh2o = 9.3447*((1.0 + 6.4*4.0)^(-0.825))
EndSelect
For J = 0 To FREQ_BIN
freq = START_FREQ*(STEP_BASE_FREQ^J)
PI2_pu_freq_csat  = PI2_pu_csat*freq
PI2_pu_freq_irga  = PI2_pu_irga*freq
If stability > 0.0 Then
cosp_wco2_wh2o = zu*freq/(A_wco2_wh2o + B_wco2_wh2o*(zu*freq)^2.1)
Else
Select Case (zu*freq)
Case Is < 0.54
cosp_wco2_wh2o = 12.92*zu*freq/((1.0 + 26.7*zu*freq)^1.375)
Case Is >= 0.54
cosp_wco2_wh2o =  4.378*zu*freq/((1.0 + 3.8*zu*freq)^2.4)
EndSelect
EndIf
tran_func_BA = 1.0 - (SIN (10800.0*OUTPUT_INTV*freq)/(PI*60.0*OUTPUT_INTV*freq))^2.0
tran_func_SP_wco2_wh2o = EXP(-9.9*(du_irga*freq)^1.5)
If PI2_pu_freq_csat >= 0.01 Then
tran_func_LA_ww  = (4.0/PI2_pu_freq_csat)*(1.0+ (PI2_pu_freq_csat+3.0)/(2.0*PI2_pu_freq_csat*EXP(PI2_pu_freq_csat)) -3.0/(2.0*PI2_pu_freq_csat))
Else
tran_func_LA_ww  = 1.0
EndIf
If PI2_pu_freq_irga >= 0.01 Then
tran_func_LA_co2_h2o = (1.0/PI2_pu_freq_irga)*(3.0 + (PI2_pu_freq_irga + 4.0)/(PI2_pu_freq_irga*EXP(PI2_pu_freq_irga)) -4.0/PI2_pu_freq_irga)
Else
tran_func_LA_co2_h2o  = 1.0
EndIf
weight = 2.0 + 2.0*(J MOD 2) + (J = 0) + (J = FREQ_BIN)
freq_factor_numerator    += weight*cosp_wco2_wh2o
freq_factor_denominator  += weight*cosp_wco2_wh2o*tran_func_BA*SQR(tran_func_LA_ww*tran_func_LA_co2_h2o)*Tran_func_SP_wco2_wh2o
Next J
freq_factor = freq_factor_numerator/freq_factor_denominator
Else
freq_factor = 1.0
EndIf
EndSub
#If (SENSOR_LI7700) Then
Sub FreqFactorCSOPEC_wch4_BA_LA_SP (height_aerodynamic, stability, U_total, separation_lat_dis, path_length_ga, freq_factor)
Dim cosp_wch4
Dim tran_func_BA
Dim tran_func_LA_ww
Dim tran_func_LA_ch4
Dim tran_func_SP_wch4
Dim freq
Dim freq_factor_numerator
Dim freq_factor_denominator
Dim weight
Dim J As Long
Dim zu
Dim pu_csat
Dim pu_ga77
Dim du_ga77
Dim PI2_pu_csat
Dim PI2_pu_ga77
Dim PI2_pu_freq_csat
Dim PI2_pu_freq_ga77
Dim A_wch4, B_wch4
If ((stability <> NaN) AND (U_total <> NaN) AND (separation_lat_dis <> NaN)) Then
freq_factor_numerator   = 0.0
freq_factor_denominator = 0.0
zu      = height_aerodynamic/U_total
pu_csat = PATH_LENGTH_CSAT/U_total
pu_ga77 = path_length_ga/U_total
du_ga77 = ABS(separation_lat_dis)/U_total
PI2_pu_csat = 2.0*PI*pu_csat
PI2_pu_ga77 = 2.0*PI*pu_ga77
Select Case stability
Case Is > 0.0 AND Is <= 4.0
A_wch4 = 0.2840*((1.0 + 6.4*stability)^0.75)
B_wch4 = 9.3447*((1.0 + 6.4*stability)^(-0.825))
Case Is > 4
A_wch4 = 0.2840*((1.0 + 6.4*4.0)^0.75)
B_wch4 = 9.3447*((1.0 + 6.4*4.0)^(-0.825))
EndSelect
For J = 0 To FREQ_BIN
freq = START_FREQ*(STEP_BASE_FREQ^J)
PI2_pu_freq_csat  = PI2_pu_csat*freq
PI2_pu_freq_ga77  = PI2_pu_ga77*freq
If stability > 0.0 Then
cosp_wch4 = zu*freq/(A_wch4 + B_wch4*(zu*freq)^2.1)
Else
Select Case (zu*freq)
Case Is < 0.54
cosp_wch4 = 12.92*zu*freq/((1.0 + 26.7*zu*freq)^1.375)
Case Is >= 0.54
cosp_wch4 = 4.378*zu*freq/((1.0 + 3.8*zu*freq)^2.4)
EndSelect
EndIf
tran_func_BA = 1.0 - (SIN (10800.0*OUTPUT_INTV*freq)/(PI*60.0*OUTPUT_INTV*freq))^2.0
tran_func_SP_wch4 = EXP(-9.9*(du_ga77*freq)^1.5)
If PI2_pu_freq_csat >= 0.01 Then
tran_func_LA_ww  = (4.0/PI2_pu_freq_csat)*(1.0+ (PI2_pu_freq_csat+3.0)/(2.0*PI2_pu_freq_csat*EXP(PI2_pu_freq_csat)) -3.0/(2.0*PI2_pu_freq_csat))
Else
tran_func_LA_ww  = 1.0
EndIf
If PI2_pu_freq_ga77 >= 0.01 Then
tran_func_LA_ch4 = (1.0/PI2_pu_freq_ga77)*(3.0 + (PI2_pu_freq_ga77 + 4.0)/(PI2_pu_freq_ga77*EXP(PI2_pu_freq_ga77)) -4.0/PI2_pu_freq_ga77)
Else
tran_func_LA_ch4  = 1.0
EndIf
weight = 2.0 + 2.0*(J MOD 2) + (J = 0) + (J = FREQ_BIN)
freq_factor_numerator    += weight*cosp_wch4
freq_factor_denominator  += weight*cosp_wch4*tran_func_BA*SQR(tran_func_LA_ww*tran_func_LA_ch4)*tran_func_SP_wch4
Next J
freq_factor = freq_factor_numerator/freq_factor_denominator
Else
freq_factor = 1.0
EndIf
EndSub
#EndIf
Sub Data_Quality_SSITC_w_WndDir_Momentum (Planar_Fit As Boolean, stability, SIGMA_u, SIGMA_w, U_star, lat, wnd_dir, RNS, QC)
Dim    ITC_uw(2)
Alias  ITC_uw(1) = ITCuu
Alias  ITC_uw(2) = ITCww
Dim    ITC_uw_max(2)
Alias  ITC_uw_max(1) = ITC_uu_ww
Alias  ITC_uw_max(2) = ITC_uu_ww_max_seq
Dim Coriolis_parameter
Dim RNS_category(8) As Boolean
Dim ITC_category(8) As Boolean
Dim   Lowest_Seq_1st_Occurrence(3)
Alias Lowest_Seq_1st_Occurrence(1) = RNS_Momentum_1st_Occurrence
Alias Lowest_Seq_1st_Occurrence(2) = ITC_Momentum_1st_Occurrence
Alias Lowest_Seq_1st_Occurrence(3) = Wnd_Momentum_1st_Occurrence
Dim Lowest_Seq_Max(2)
Dim J As Long
QC = 0
RNS_category(1) = (RNS  < 0.16)
RNS_category(2) = ((RNS >= 0.16) AND (RNS < 0.31))
RNS_category(3) = (RNS  < 0.31)
RNS_category(4) = ((RNS >= 0.31) AND (RNS < 0.76))
RNS_category(5) = (RNS  < 0.76)
RNS_category(6) = ((RNS >= 0.76) AND (RNS < 1.01))
RNS_category(7) = ((RNS >= 1.01) AND (RNS < 2.51))
RNS_category(8) = ((RNS >= 2.51) AND (RNS < 10.0))
For J = 1 To 8
RNS_Momentum_1st_Occurrence = -J *RNS_category(J)
If (RNS_Momentum_1st_Occurrence = J) Then
ExitFor
EndIf
Next J
Coriolis_parameter = 2.0*Omega*SIN(lat)
Select Case stability
Case Is <= -0.032
ITCuu = 4.15*ABS(stability)^0.125
ITCww = 2.00*ABS(stability)^0.125
Case Is > -0.032 AND Is <= 0.0
ITCuu = 2.7
ITCww = 1.3
Case Is < 0.4 AND Is > 0.0
ITCuu = 0.44*LN(ABS(Coriolis_parameter)/U_star) + 6.3
ITCww = 0.21*LN(ABS(Coriolis_parameter)/U_star) + 3.1
Case Is >= 0.4
ITCuu = -(SIGMA_u/U_star)/9.1
ITCww = -(SIGMA_w/U_star)/9.1
EndSelect
ITCuu = ABS((ITCuu - (SIGMA_u/U_star))/ITCuu)
ITCww = ABS((ITCww - (SIGMA_w/U_star))/ITCww)
If (NOT Planar_Fit) Then
MaxSpa(ITC_uu_ww, 2, ITCuu)
Else
ITC_uu_ww = ITCww
EndIf
ITC_category(1) = (ITC_uu_ww < 0.31)
ITC_category(2) = (ITC_uu_ww < 0.31)
ITC_category(3) = ((ITC_uu_ww >= 0.31) AND (ITC_uu_ww < 0.76))
ITC_category(4) = (ITC_uu_ww < 0.31)
ITC_category(5) = ((ITC_uu_ww >= 0.31) AND (ITC_uu_ww < 1.01))
ITC_category(6) = ((ITC_uu_ww >= 0.76) AND (ITC_uu_ww < 1.01))
ITC_category(7) = ((ITC_uu_ww >= 1.01) AND (ITC_uu_ww < 2.51))
ITC_category(8) = ((ITC_uu_ww >= 2.51) AND (ITC_uu_ww < 10.00))
For J = 1 To 8
ITC_Momentum_1st_Occurrence = -J *ITC_category(J)
If (ITC_Momentum_1st_Occurrence = J) Then
ExitFor
EndIf
Next J
If ((wnd_dir < 151.0) OR (wnd_dir > 209.0)) Then
Wnd_Momentum_1st_Occurrence = 1
ElseIf (((wnd_dir >= 151.0) AND (wnd_dir < 171.0)) OR ((wnd_dir > 189.0) AND (wnd_dir <= 209.0)))
Wnd_Momentum_1st_Occurrence = 7
ElseIf ((wnd_dir >= 171.0) AND (wnd_dir <= 189.0))
Wnd_Momentum_1st_Occurrence = 0
EndIf
If ((RNS_Momentum_1st_Occurrence = 0) OR (ITC_Momentum_1st_Occurrence =0) OR (Wnd_Momentum_1st_Occurrence = 0)) Then
QC = 9
Else
MaxSpa (Lowest_Seq_Max(1), 3, RNS_Momentum_1st_Occurrence)
QC = Lowest_Seq_Max(1)
EndIf
If (((RNS = NaN) OR (ITC_uu_ww = NaN) OR (wnd_dir = NaN)) AND (QC = 9)) Then  QC = NaN
EndSub
Sub Data_Quality_SSITC_wo_WndDir_Momentum (Planar_Fit As Boolean, stability, SIGMA_u, SIGMA_w, U_star, lat, RNS, TAU_SSITC)
Dim    ITC_uw(2)
Alias  ITC_uw(1) = ITCu
Alias  ITC_uw(2) = ITCw
Dim    ITC_uw_max(2)
Alias  ITC_uw_max(1) = ITC_u_w
Alias  ITC_uw_max(2) = ITC_u_w_max_seq
Dim Coriolis_parameter
Dim RNS_category(8) As Boolean
Dim ITC_category(8) As Boolean
Dim   Lowest_Seq_1st_Occurrence(2)
Alias Lowest_Seq_1st_Occurrence(1) = RNS_Momentum_1st_Occur
Alias Lowest_Seq_1st_Occurrence(2) = ITC_Momentum_1st_Occur
Dim Lowest_Seq_Max(2)
Dim J As Long
TAU_SSITC = 0
RNS_category(1) = (RNS  < 0.16)
RNS_category(2) = ((RNS >= 0.16) AND (RNS < 0.31))
RNS_category(3) = (RNS  < 0.31)
RNS_category(4) = ((RNS >= 0.31) AND (RNS < 0.76))
RNS_category(5) = (RNS  < 0.76)
RNS_category(6) = ((RNS >= 0.76) AND (RNS < 1.01))
RNS_category(7) = ((RNS >= 1.01) AND (RNS  < 2.51))
RNS_category(8) = ((RNS >= 2.51) AND (RNS  < 10.0))
For J = 1 To 8
RNS_Momentum_1st_Occur = -J *RNS_category(J)
If (RNS_Momentum_1st_Occur = J) Then
ExitFor
EndIf
Next J
Coriolis_parameter = 2.0*Omega*SIN(lat)
Select Case stability
Case Is <= -0.032
ITCu = 4.15*ABS(stability)^0.125
ITCw = 2.00*ABS(stability)^0.125
Case Is > -0.032 AND Is <= 0.0
ITCu = 2.7
ITCw = 1.3
Case Is < 0.4 AND Is > 0.0
ITCu = 0.44*LN(ABS(Coriolis_parameter)/U_star) + 6.3
ITCw = 0.21*LN(ABS(Coriolis_parameter)/U_star) + 3.1
Case Is >= 0.4
ITCu = -(SIGMA_u/U_star)/9.1
ITCw = -(SIGMA_w/U_star)/9.1
EndSelect
ITCu = ABS((ITCu - (SIGMA_u/U_star))/ITCu)
ITCw = ABS((ITCw - (SIGMA_w/U_star))/ITCw)
If (NOT Planar_Fit) Then
MaxSpa(ITC_u_w, 2, ITCu)
Else
ITC_u_w = ITCw
EndIf
ITC_category(1) = (ITC_u_w < 0.31)
ITC_category(2) = (ITC_u_w < 0.31)
ITC_category(3) = ((ITC_u_w >= 0.31) AND (ITC_u_w < 0.76))
ITC_category(4) = (ITC_u_w < 0.31)
ITC_category(5) = ((ITC_u_w >= 0.31) AND (ITC_u_w < 1.01))
ITC_category(6) = ((ITC_u_w >= 0.76) AND (ITC_u_w < 1.01))
ITC_category(7) = ((ITC_u_w >= 1.01) AND (ITC_u_w < 2.51))
ITC_category(8) = ((ITC_u_w >= 2.51) AND (ITC_u_w < 10.01))
For J = 1 To 8
ITC_Momentum_1st_Occur = -J *ITC_category(J)
If (ITC_Momentum_1st_Occur = J) Then
ExitFor
EndIf
Next J
If  ((RNS_Momentum_1st_Occur = 0) OR (ITC_Momentum_1st_Occur =0)) Then
TAU_SSITC = 9
Else
MaxSpa (Lowest_Seq_Max(1), 2, RNS_Momentum_1st_Occur)
TAU_SSITC = Lowest_Seq_Max(1)
EndIf
If (((RNS = NaN) OR (ITC_u_w = NaN)) AND (TAU_SSITC = 9)) Then  TAU_SSITC = NaN
If (TAU_SSITC <> NaN) Then
TAU_SSITC = INT(TAU_SSITC/3.1)
EndIf
EndSub
Sub Data_Quality_SSITC_w_WndDir_Scalar (stability, SIGMA_w, U_star, Ts_std, T_star, lat, wnd_dir, RNS, QC)
Dim ITC_TsTs
Dim ITC_wTs
Dim ITC_ww
Dim Coriolis_parameter
Dim RNS_category(8) As Boolean
Dim ITC_category(8) As Boolean
Dim   Lowest_Seq_1st_Occurrence(3)
Alias Lowest_Seq_1st_Occurrence(1) = RNS_Scalar_1st_Occurrence
Alias Lowest_Seq_1st_Occurrence(2) = ITC_Scalar_1st_Occurrence
Alias Lowest_Seq_1st_Occurrence(3) = Wnd_Scalar_1st_Occurrence
Dim Lowest_Seq_Max(2)
Dim J As Long
QC = 0
RNS_category(1) = (RNS  < 0.16)
RNS_category(2) = ((RNS >= 0.16) AND (RNS < 0.31))
RNS_category(3) = (RNS  < 0.31)
RNS_category(4) = ((RNS >= 0.31) AND (RNS < 0.76))
RNS_category(5) = (RNS  < 0.76)
RNS_category(6) = ((RNS >= 0.76) AND (RNS < 1.01))
RNS_category(7) = ((RNS >= 1.01) AND (RNS  < 2.51))
RNS_category(8) = ((RNS >= 2.51) AND (RNS  < 10.0))
For J = 1 To 8
RNS_Scalar_1st_Occurrence = -J *RNS_category(J)
If (RNS_Scalar_1st_Occurrence = J) Then
ExitFor
EndIf
Next J
Coriolis_parameter = 2.0*Omega*SIN(lat)
Select Case stability
Case Is <= -0.032
ITC_ww = 2.00*ABS(stability)^0.125
Case Is > -0.032 AND Is <= 0.0
ITC_ww = 1.3
Case Is < 0.4 AND Is > 0.0
ITC_ww = 0.21*LN(ABS(Coriolis_parameter)/U_star) + 3.1
Case Is >= 0.4
ITC_ww = -(SIGMA_w/U_star)/9.1
EndSelect
ITC_ww = ABS((ITC_ww - (SIGMA_w/U_star))/ITC_ww)
Select Case stability
Case Is < -1.0
ITC_TsTs = ABS(stability)^(-1/3)
Case Is <= -0.062 AND Is >= -1.0
ITC_TsTs = ABS(stability)^(-0.25)
Case Is < 0.02 AND Is > -0.062
ITC_TsTs = 0.5*ABS(stability)^(-0.50)
Case  Is >= 0.02 AND Is < 1.0
ITC_TsTs = 1.4*stability^(-0.25)
Case Is >= 1.0
ITC_TsTs = -(Ts_std/ABS(T_star))/9.1
EndSelect
ITC_TsTs = ABS((ITC_TsTs - Ts_std/ABS(T_star))/ITC_TsTs)
ITC_wTs = IIF((ITC_TsTs > ITC_ww), ITC_TsTs, ITC_ww)
ITC_category(1) = (ITC_wTs < 0.31)
ITC_category(2) = (ITC_wTs < 0.31)
ITC_category(3) = ((ITC_wTs >= 0.31) AND (ITC_wTs < 0.76))
ITC_category(4) = (ITC_wTs < 0.31)
ITC_category(5) = ((ITC_wTs >= 0.31) AND (ITC_wTs < 1.01))
ITC_category(6) = ((ITC_wTs >= 0.76) AND (ITC_wTs < 1.01))
ITC_category(7) = ((ITC_wTs >= 1.01) AND (ITC_wTs < 2.51))
ITC_category(8) = ((ITC_wTs >= 2.51) AND (ITC_wTs < 10.00))
For J = 1 To 8
ITC_Scalar_1st_Occurrence = -J *ITC_category(J)
If (ITC_Scalar_1st_Occurrence = J) Then
ExitFor
EndIf
Next J
If ((wnd_dir <= 151.0) OR (wnd_dir >= 209.0)) Then
Wnd_Scalar_1st_Occurrence = 1
ElseIf (((wnd_dir > 151.0) AND (wnd_dir <= 171.0)) OR ((wnd_dir >= 189.0) AND (wnd_dir < 209.0)))
Wnd_Scalar_1st_Occurrence = 7
ElseIf ((wnd_dir > 171.0) AND (wnd_dir < 189.0))
Wnd_Scalar_1st_Occurrence = 0
EndIf
If  ((RNS_Scalar_1st_Occurrence = 0) OR (ITC_Scalar_1st_Occurrence = 0) OR (Wnd_Scalar_1st_Occurrence = 0)) Then
QC = 9
Else
MaxSpa (Lowest_Seq_Max(1), 3, RNS_Scalar_1st_Occurrence)
QC = Lowest_Seq_Max(1)
EndIf
If (((RNS = NaN) OR (ITC_wTs = NaN) OR (wnd_dir = NaN)) AND (QC = 9)) Then  QC = NaN
EndSub
Sub Data_Quality_SSITC_wo_WndDir_Scalar (stability, SIGMA_w, U_star, SIGMA_Ts, T_star, lat, RNS, SSITC)
Dim ITC_TsTs
Dim ITC_wTs
Dim ITC_ww
Dim Coriolis_parameter
Dim RNS_category(8) As Boolean
Dim ITC_category(8) As Boolean
Dim   Lowest_Seq_1st_Occurrence(2)
Alias Lowest_Seq_1st_Occurrence(1) = RNS_Scalar_1st_Occur
Alias Lowest_Seq_1st_Occurrence(2) = ITC_Scalar_1st_Occur
Dim Lowest_Seq_Max(2)
Dim J As Long
SSITC = 0
RNS_category(1) = (RNS  < 0.16)
RNS_category(2) = ((RNS >= 0.16) AND (RNS < 0.31))
RNS_category(3) = (RNS  < 0.31)
RNS_category(4) = ((RNS >= 0.31) AND (RNS < 0.76))
RNS_category(5) = (RNS  < 0.76)
RNS_category(6) = ((RNS >= 0.76) AND (RNS < 1.01))
RNS_category(7) = ((RNS >= 1.01) AND (RNS  < 2.51))
RNS_category(8) = ((RNS >= 2.51) AND (RNS  < 10.0))
For J = 1 To 8
RNS_Scalar_1st_Occur = -J *RNS_category(J)
If (RNS_Scalar_1st_Occur = J) Then
ExitFor
EndIf
Next J
Coriolis_parameter = 2.0*Omega*SIN(lat)
Select Case stability
Case Is <= -0.032
ITC_ww = 2.00*ABS(stability)^0.125
Case Is > -0.032 AND Is <= 0.0
ITC_ww = 1.3
Case Is < 0.4 AND Is > 0.0
ITC_ww = 0.21*LN(ABS(Coriolis_parameter)/U_star) + 3.1
Case Is >= 0.4
ITC_ww = -(SIGMA_w/U_star)/9.1
EndSelect
ITC_ww = ABS((ITC_ww - (SIGMA_w/U_star))/ITC_ww)
Select Case stability
Case Is < -1.0
ITC_TsTs = ABS(stability)^(-1.0/3.0)
Case Is <= -0.062 AND Is >= -1.0
ITC_TsTs = ABS(stability)^(-0.25)
Case Is < 0.02 AND Is > -0.062
ITC_TsTs = 0.5*ABS(stability)^(-0.50)
Case  Is >= 0.02 AND Is < 1.0
ITC_TsTs = 1.4*stability^(-0.25)
Case Is >= 1.0
ITC_TsTs = -(SIGMA_Ts/ABS(T_star))/9.1
EndSelect
ITC_TsTs = ABS((ITC_TsTs - SIGMA_Ts/ABS(T_star))/ITC_TsTs)
ITC_wTs = IIF((ITC_TsTs > ITC_ww), ITC_TsTs, ITC_ww)
ITC_category(1) = (ITC_wTs < 0.31)
ITC_category(2) = (ITC_wTs < 0.31)
ITC_category(3) = ((ITC_wTs >= 0.31) AND (ITC_wTs < 0.76))
ITC_category(4) = (ITC_wTs < 0.31)
ITC_category(5) = ((ITC_wTs >= 0.31) AND (ITC_wTs < 1.01))
ITC_category(6) = ((ITC_wTs >= 0.76) AND (ITC_wTs < 1.01))
ITC_category(7) = ((ITC_wTs >= 1.01) AND (ITC_wTs < 2.51))
ITC_category(8) = ((ITC_wTs >= 2.51) AND (ITC_wTs < 10.00))
For J = 1 To 8
ITC_Scalar_1st_Occur = -J *ITC_category(J)
If (ITC_Scalar_1st_Occur = J) Then
ExitFor
EndIf
Next J
If  ((RNS_Scalar_1st_Occur = 0) OR (ITC_Scalar_1st_Occur =0)) Then
SSITC = 9
Else
MaxSpa (Lowest_Seq_Max(1), 2, RNS_Scalar_1st_Occur)
SSITC = Lowest_Seq_Max(1)
EndIf
If (((RNS = NaN) OR (ITC_wTs = NaN)) AND (SSITC = 9)) Then  SSITC = NaN
If (SSITC <> NaN) Then
SSITC = INT(SSITC/3.1)
EndIf
EndSub
Sub Planetary_Boundary_Layer_Height (Obukhov, h_PBL)
If (Obukhov <> NaN) Then
Select Case Obukhov
Case Is < 0.0
If (Obukhov < -1013.3) Then
h_PBL = 1000.0
ElseIf (Obukhov <= -650) Then
h_PBL = 1200.0 - 200.0*((Obukhov + 650.0)/(-1013.3+650.0))
ElseIf (Obukhov <= -30.0) Then
h_PBL = 1500.0 - 300.0*((Obukhov + 30.0)/(-650.0 + 30.0))
ElseIf (Obukhov <= -5.0) Then
h_PBL = 2000.0 - 500.0*((Obukhov + 5.0)/(-30.0 + 5.0))
ElseIf (Obukhov <= 0.0) Then
h_PBL = 2000.0 + 20.0*(Obukhov + 5.0)
EndIf
Case Is > 0.0
If (Obukhov > 1316.4) Then
h_PBL = 1000.0
ElseIf (Obukhov >= 1000.0) Then
h_PBL = 800.0 + 200.0*((Obukhov - 1000.0)/(1316.4-1000.0))
ElseIf (Obukhov >= 130.0) Then
h_PBL = 250.0 + 550.0*((Obukhov -130.0)/(1000.0 - 130.0))
ElseIf (Obukhov >= 84.0) Then
h_PBL = 200.0 + 50.0*((Obukhov - 84.0)/(130.0 -84.0))
ElseIf (Obukhov > 0.0) Then
h_PBL = 200.0 - (84.0 - Obukhov)*(50.0/46.0)
EndIf
EndSelect
Else
h_PBL = NaN
EndIf
EndSub
Function Tc_from_Ts_H2O_P (T_s, h2o_dnsty, P_atm)
Dim T_numerator
Dim T_denominator
T_numerator = P_atm + (2*Rv - (Gamma_v + 1)*Rd)*h2o_dnsty*T_s - _
SQR(P_atm^2 + ((Gamma_v - 1)*Rd*h2o_dnsty*T_s)^2 + 2*(2*Gamma_p - Gamma_v -1)*Rd*h2o_dnsty*P_atm*T_s)
T_denominator = 2*h2o_dnsty*((Rv - Gamma_p*Rd) + ((Rv - Rd)*(Rv - Gamma_v*Rd)*h2o_dnsty*T_s)/P_atm)
Return (T_numerator/T_denominator)
EndFunction
#If (SENSOR_T_RH) Then
Sub dewpoint_from_RH_T_P (T_air, RH_air, press_atm, e_sat_air, e_air, rho_H2O, rho_d_air, T_DP_air)
Dim Enhance_factor1_air
Dim Enhance_factor2_air
Dim x_tmp_air
Dim Td_gp_air
Enhance_factor1_air = 1.00041 + press_atm*(3.48e-5 + 7.4e-9*(T_air + 30.6 - 0.38*press_atm)^2.0)
Select Case T_air
Case Is >= 0
e_sat_air = 0.61121*Enhance_factor1_air*EXP((17.368*T_air)/(T_air + 238.88))
Case Is < 0
e_sat_air = 0.61121*Enhance_factor1_air*EXP((17.966*T_air)/(T_air + 247.15))
EndSelect
e_air     = (RH_air*e_sat_air)/100
rho_H2O   = e_air/(Rv*(T_air + T_0C_K))
rho_d_air = (press_atm - e_air)/(Rd*(T_air + T_0C_K))
Enhance_factor2_air = 1.00072 + (3.46e-5)*press_atm
x_tmp_air = LN(e_air/(0.61121*Enhance_factor2_air))
Td_gp_air = 240.97*x_tmp_air/(17.502 - x_tmp_air)
Enhance_factor1_air  = 1.00041 + press_atm*(3.48e-5 + 7.4e-9*(Td_gp_air + 30.6 - 0.38*press_atm)^2.0)
x_tmp_air            = LN(e_air/(0.61121*Enhance_factor1_air))
Select Case Td_gp_air
Case Is >= 0
T_DP_air = (238.88*x_tmp_air)/(17.368 - x_tmp_air)
Case Is < 0
T_DP_air = (247.15*x_tmp_air)/(17.966 - x_tmp_air)
EndSelect
EndSub
#EndIf
Sub dewpoint_from_H2O_T_P (T_air, rho_H2O, press_atm, e_sat_air, e_air, RH_air, rho_d_air, rho_a_air, T_DP_air)
Dim Enhance_factor1_air
Dim Enhance_factor2_air
Dim x_tmp_air
Dim Td_gp_air
Enhance_factor1_air = 1.00041 + press_atm*(3.48e-5 + 7.4e-9*(T_air + 30.6 - 0.38*press_atm)^2.0)
Select Case T_air
Case Is >= 0
e_sat_air = 0.61121*Enhance_factor1_air*EXP((17.368*T_air)/(T_air + 238.88))
Case Is < 0
e_sat_air = 0.61121*Enhance_factor1_air*EXP((17.966*T_air)/(T_air + 247.15))
EndSelect
e_air     = Rv*rho_H2O*(T_air + T_0C_K)
RH_air    = 100*e_air/e_sat_air
rho_d_air = (press_atm - e_air)/(Rd*(T_air + T_0C_K))
rho_a_air = (rho_H2O + rho_d_air)/1000
Enhance_factor2_air = 1.00072 + (3.46e-5)*press_atm
x_tmp_air = LN(e_air/(0.61121*Enhance_factor2_air))
Td_gp_air = 240.97*x_tmp_air/(17.502 - x_tmp_air)
Enhance_factor1_air  = 1.00041 + press_atm*(3.48e-5 + 7.4e-9*(Td_gp_air + 30.6 - 0.38*press_atm)^2.0)
x_tmp_air            = LN(e_air/(0.61121*Enhance_factor1_air))
Select Case Td_gp_air
Case Is >= 0
T_DP_air = (238.88*x_tmp_air)/(17.368 - x_tmp_air)
Case Is < 0
T_DP_air = (247.15*x_tmp_air)/(17.966 - x_tmp_air)
EndSelect
EndSub
Sub FootprintCharacteristics_Kljun (U_star, SIGMA_w, height_aerodynamic, Obukhov, roughness, upwnd_dist, FP_win_range, x_max, FP_90pct_range, FP_80pct_range, FP_70pct_range)
Dim k1, k2, k3, k4
Dim h_PBL
Dim zh_ratio
Dim suz
Dim k1_suz_zh
Dim FP_cumulative
Dim FP_cumulative_prev
Dim x_inflection_L
Dim x_inflection_R
Dim x_L
Dim x_R
Dim integration_interval
Dim FP_L
Dim FP_M1
Dim FP_M2
Dim FP_M3
Dim FP_R
Dim interval_count
Dim J As Long
k1 = 0.175/(3.418 - LN(roughness))
k2 = 3.68254
k3 = 4.277*(3.418 - LN(roughness))
k4 = 1.685*(3.418 - LN(roughness))
If ((U_star <> NaN) AND (SIGMA_w <> NaN) AND (Obukhov <> NaN)) Then
Select Case Obukhov
Case Is <= 0.0
If (Obukhov < -1013.3) Then
h_PBL = 1000.0
ElseIf (Obukhov <= -650.0) Then
h_PBL = 1200.0 - 200.0*((Obukhov + 650.0)/(-1013.3 + 650.0))
ElseIf (Obukhov <= -30.0) Then
h_PBL = 1500.0 - 300.0*((Obukhov + 30.0)/(-650.0 + 30.0))
ElseIf (Obukhov <= -5.0) Then
h_PBL = 2000.0 - 500.0*((Obukhov + 5.0)/(-30.0 + 5.0))
ElseIf (Obukhov <= 0.0) Then
h_PBL = 2000.0 + 20.0*(Obukhov + 5.0)
EndIf
Case Is > 0.0
If (Obukhov > 1316.4) Then
h_PBL = 1000.0
ElseIf (Obukhov >= 1000.0) Then
h_PBL = 800.0 + 200.0*((Obukhov - 1000.0)/(1316.4-1000.0))
ElseIf (Obukhov >= 130.0) Then
h_PBL = 250.0 + 550.0*((Obukhov -130.0)/(1000.0 - 130.0))
ElseIf (Obukhov >= 84.0) Then
h_PBL = 200.0 + 50.0*((Obukhov - 84.0)/(130.0 -84.0))
ElseIf (Obukhov > 0.0) Then
h_PBL = 200.0 - (84.0 - Obukhov)*(50.0/46.0)
EndIf
EndSelect
zh_ratio  = height_aerodynamic/h_PBL
suz       = ((SIGMA_w/U_star)^0.8)/height_aerodynamic
k1_suz_zh = k1*suz*(1-zh_ratio)
x_max = (k3 - k4)/suz
x_inflection_L = x_max*(k3*((SQR(k2) - 1)/SQR(k2))-k4)/(k3-k4)
x_inflection_R = x_max*(k3*((SQR(k2) + 1)/SQR(k2))-k4)/(k3-k4)
FP_cumulative  = 0.0
FP_win_range   = 0.0
FP_90pct_range = 0.0
FP_80pct_range = 0.0
FP_70pct_range = 0.0
x_R  = - k4/suz
integration_interval = (x_inflection_L - x_R)/NMBR_INT_INTERV_SEGMENT
FP_R = 0
For J = 1 To NMBR_INT_INTERV_SEGMENT
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_R = (suz*x_R + k4)/k3
FP_R = k1_suz_zh*(FP_R^k2)*EXP(k2*(1.0 - FP_R))
FP_cumulative += integration_interval*(FP_L + FP_R)/2
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
Next J
integration_interval = (x_max - x_inflection_L)/NMBR_INT_INTERV_SEGMENT
For J = 1 To NMBR_INT_INTERV_SEGMENT
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_R = (suz*x_R + k4)/k3
FP_R = k1_suz_zh*(FP_R^k2)*EXP(k2*(1.0 - FP_R))
FP_cumulative += integration_interval*(FP_L + FP_R)/2.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.80) AND (FP_80pct_range = 0.0)) Then
FP_80pct_range = x_R - integration_interval*(FP_cumulative - 0.80)/(FP_cumulative - FP_cumulative_prev)
EndIf
Next J
integration_interval = (x_inflection_R - x_max)/NMBR_INT_INTERV_SEGMENT
For J = 1 To 2*NMBR_INT_INTERV_SEGMENT
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_R = (suz*x_R + k4)/k3
FP_R = k1_suz_zh*(FP_R^k2)*EXP(k2*(1.0 - FP_R))
FP_cumulative += integration_interval*(FP_L + FP_R)/2.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.80) AND (FP_80pct_range = 0.0)) Then
FP_80pct_range = x_R - integration_interval*(FP_cumulative - 0.80)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.90) AND (FP_90pct_range = 0.0)) Then
FP_90pct_range = x_R - integration_interval*(FP_cumulative - 0.90)/(FP_cumulative - FP_cumulative_prev)
ExitFor
EndIf
Next J
integration_interval = 4.0*height_aerodynamic
While ((FP_cumulative < 0.9) AND (x_R - x_max < 200.0*height_aerodynamic))
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_M1 = (suz*(x_L + 0.25*integration_interval) + k4)/k3
FP_M1 = k1_suz_zh*(FP_M1^k2)*EXP(k2*(1.0 - FP_M1))
FP_M2 = (suz*(x_L + 0.50*integration_interval) + k4)/k3
FP_M2 = k1_suz_zh*(FP_M2^k2)*EXP(k2*(1.0 - FP_M2))
FP_M3 = (suz*(x_L + 0.75*integration_interval) + k4)/k3
FP_M3 = k1_suz_zh*(FP_M3^k2)*EXP(k2*(1.0 - FP_M3))
FP_R = (suz*x_R + k4)/k3
FP_R = k1_suz_zh*(FP_R^k2)*EXP(k2*(1.0 - FP_R))
FP_cumulative += integration_interval*(7.0*FP_L + 32.0*FP_M1 + 12.0*FP_M2+ 32.0*FP_M3+ 7.0*FP_R)/90.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.80) AND (FP_80pct_range = 0.0)) Then
FP_80pct_range = x_R - integration_interval*(FP_cumulative - 0.80)/(FP_cumulative - FP_cumulative_prev)
EndIf
Wend
If ((FP_cumulative >= 0.90) AND (FP_90pct_range = 0.0)) Then
FP_90pct_range = x_R - integration_interval*(FP_cumulative - 0.9)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative < 0.90) AND (FP_90pct_range = 0.0)) Then
FP_90pct_range = NaN
EndIf
If (x_R < upwnd_dist) Then
If ((upwnd_dist - x_R) < (100.0*height_aerodynamic)) Then
interval_count       = INT((upwnd_dist - x_R)/integration_interval)
integration_interval = (upwnd_dist - x_R)/interval_count
For J = 1 To interval_count
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_M1 = (suz*(x_L + 0.25*integration_interval) + k4)/k3
FP_M1 = k1_suz_zh*(FP_M1^k2)*EXP(k2*(1.0 - FP_M1))
FP_M2 = (suz*(x_L + 0.50*integration_interval) + k4)/k3
FP_M2 = k1_suz_zh*(FP_M2^k2)*EXP(k2*(1.0 - FP_M2))
FP_M3 = (suz*(x_L + 0.75*integration_interval) + k4)/k3
FP_M3 = k1_suz_zh*(FP_M3^k2)*EXP(k2*(1.0 - FP_M3))
FP_R = (suz*x_R + k4)/k3
FP_R = k1_suz_zh*(FP_R^k2)*EXP(k2*(1.0 - FP_R))
FP_cumulative += integration_interval*(7.0*FP_L + 32.0*FP_M1 + 12.0*FP_M2+ 32.0*FP_M3+ 7.0*FP_R)/90.0
If ((FP_cumulative >= 0.9) AND (FP_90pct_range = NaN)) Then
FP_90pct_range = x_R - integration_interval*(FP_cumulative - 0.9)/(FP_cumulative - FP_cumulative_prev)
EndIf
Next J
Select Case FP_cumulative
Case Is < 1.00
FP_win_range = 100.0*FP_cumulative
Case Is >= 1.0
FP_win_range = 99.0
EndSelect
Else
FP_win_range = 99.0
EndIf
EndIf
Else
x_max          = NaN
FP_win_range   = NaN
FP_90pct_range = NaN
FP_80pct_range = NaN
FP_70pct_range = NaN
EndIf
EndSub
Sub FootprintCharacteristics_KormannMeixner (U_star, height_aerodynamic, stability, U_total, upwnd_dist, FP_win_range, x_max, FP_90pct_range, FP_80pct_range, FP_70pct_range)
Dim m_KM
Dim n_KM
Dim wnd_const
Dim r_KM
Dim Phi_c
Dim kp
Dim Xi
Dim Mu
Dim Gamma_Mu
Dim xgz
Dim xz
Dim FP_cumulative
Dim FP_cumulative_prev
Dim x_inflection_L
Dim x_inflection_R
Dim x_L
Dim x_R
Dim integration_interval
Dim FP_L
Dim FP_M1
Dim FP_M2
Dim FP_M3
Dim FP_R
Dim J As Long
If ((U_star <> NaN) AND (stability <> NaN) AND (U_total <> NaN)) Then
If (stability > 0) Then
Select Case stability
Case Is <= 4.0
m_KM = (U_star/(k*U_total))*(1.0 + 5.0*stability)
n_KM = 1.0/(1.0 + 5.0*stability)
Phi_c = 1.0 + 5.0 * stability
Case Is > 4.0
m_KM = (U_star/(k*U_total))*(1.0 + 5.0*4.0)
n_KM = 1.0/(1.0 + 5.0*4.0)
Phi_c = 1.0 + 5.0 * 4.0
EndSelect
Else
Select Case stability
Case Is >= -4.0
m_KM = (U_star/(k*U_total))/((1.0 - 16.0*stability)^0.25)
n_KM = (1.0 - 24.0*stability)/(1.0 - 16.0*stability)
Phi_c = 1.0 /(SQR(1.0 - 16.0*stability))
Case Is < -4.0
m_KM = (U_star/(k*U_total))/((1.0 - 16.0*(-4.0))^0.25)
n_KM = (1.0-24.0*(-4.0))/(1.0 - 16.0*(-4.0))
Phi_c = 1.0 /(SQR(1.0 + 16.0*4))
EndSelect
EndIf
wnd_const = U_total/(height_aerodynamic^m_KM)
r_KM = 2.0 + m_KM - n_KM
kp = (k * U_star * height_aerodynamic^(1.0 - n_KM))/Phi_c
Xi = wnd_const/(kp*r_KM*r_KM)
Mu = (m_KM + 1.0)/r_KM
Gamma_Mu = SQR(2.0*PI/Mu)*(((Mu + 1.0/(12.0*Mu - 0.1/Mu))/EXP(1.0))^Mu)
xgz = ((Xi^Mu)*(height_aerodynamic^(m_KM +1.0)))/Gamma_Mu
xz  = Xi*(height_aerodynamic^r_KM)
x_max          = xz/(Mu + 1.0)
x_inflection_L = x_max*(1.0 - 1.0/SQR(Mu + 2.0))
x_inflection_R = x_max*(1.0 + 1.0/SQR(Mu + 2.0))
FP_cumulative  = 0.0
FP_win_range   = 0.0
FP_90pct_range = 0.0
FP_80pct_range = 0.0
FP_70pct_range = 0.0
integration_interval = x_inflection_L/NMBR_INT_INTERV_SEGMENT
x_R  = 0.0
FP_R = 0.0
For J = 1 To NMBR_INT_INTERV_SEGMENT
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_R = xgz*EXP(-xz/x_R)/(x_R^(Mu + 1.0))
FP_cumulative += integration_interval*(FP_L + FP_R)/2.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
Next J
integration_interval = (x_max - x_inflection_L)/NMBR_INT_INTERV_SEGMENT
For J = 1 To NMBR_INT_INTERV_SEGMENT
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_R = xgz*EXP(-xz/x_R)/(x_R^(Mu + 1.0))
FP_cumulative += integration_interval*(FP_L + FP_R)/2.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.80) AND (FP_80pct_range = 0.0)) Then
FP_80pct_range = x_R - integration_interval*(FP_cumulative - 0.80)/(FP_cumulative - FP_cumulative_prev)
EndIf
Next J
integration_interval = (x_inflection_R - x_max)/NMBR_INT_INTERV_SEGMENT
For J = 1 To 2*NMBR_INT_INTERV_SEGMENT
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_R = xgz*EXP(-xz/x_R)/(x_R^(Mu + 1))
FP_cumulative += integration_interval*(FP_L + FP_R)/2.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.80) AND (FP_80pct_range = 0.0)) Then
FP_80pct_range = x_R - integration_interval*(FP_cumulative - 0.80)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.90) AND (FP_90pct_range = 0.0)) Then
FP_90pct_range = x_R - integration_interval*(FP_cumulative - 0.90)/(FP_cumulative - FP_cumulative_prev)
ExitFor
EndIf
Next J
integration_interval = 2.0*height_aerodynamic
While ((FP_cumulative < 0.9) AND (x_R - x_max < 1000.0*height_aerodynamic))
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_M1 = xgz*EXP(-xz/(x_L + 0.25*integration_interval))/((x_L + 0.25*integration_interval)^(Mu + 1.0))
FP_M2 = xgz*EXP(-xz/(x_L + 0.50*integration_interval))/((x_L + 0.50*integration_interval)^(Mu + 1.0))
FP_M3 = xgz*EXP(-xz/(x_L + 0.75*integration_interval))/((x_L + 0.75*integration_interval)^(Mu + 1.0))
FP_R = xgz*EXP(-xz/x_R)/(x_R^(Mu + 1.0))
FP_cumulative += integration_interval*(7.0*FP_L + 32.0*FP_M1 + 12.0*FP_M2 + 32.0*FP_M3 +7.0*FP_R)/90.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.70) AND (FP_70pct_range = 0.0)) Then
FP_70pct_range = x_R - integration_interval*(FP_cumulative - 0.70)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((FP_cumulative >= 0.80) AND (FP_80pct_range = 0.0)) Then
FP_80pct_range = x_R - integration_interval*(FP_cumulative - 0.80)/(FP_cumulative - FP_cumulative_prev)
EndIf
Wend
If ((FP_cumulative >= 0.90) AND (FP_90pct_range = 0.0)) Then
FP_90pct_range = x_R - integration_interval*(FP_cumulative - 0.90)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((x_R < upwnd_dist) OR (FP_90pct_range = 0)) Then
integration_interval = 2*integration_interval
For J = 1 To  250
x_L = x_R
x_R = x_R + integration_interval
FP_cumulative_prev = FP_cumulative
FP_L = FP_R
FP_M1 = xgz*EXP(-xz/(x_L + 0.25*integration_interval))/((x_L + 0.25*integration_interval)^(Mu + 1.0))
FP_M2 = xgz*EXP(-xz/(x_L + 0.50*integration_interval))/((x_L + 0.50*integration_interval)^(Mu + 1.0))
FP_M3 = xgz*EXP(-xz/(x_L + 0.75*integration_interval))/((x_L + 0.75*integration_interval)^(Mu + 1.0))
FP_R = xgz*EXP(-xz/x_R)/(x_R^(Mu + 1.0))
FP_cumulative += integration_interval*(7.0*FP_L + 32.0*FP_M1 + 12.0*FP_M2 + 32.0*FP_M3 +7.0*FP_R)/90.0
If ((x_L < upwnd_dist) AND (x_R >= upwnd_dist)) Then
FP_win_range = 100.0*(FP_cumulative_prev + (FP_cumulative - FP_cumulative_prev)*(upwnd_dist - x_L)/integration_interval)
EndIf
If ((FP_cumulative >= 0.9) AND (FP_90pct_range = 0)) Then
FP_90pct_range = x_R - integration_interval*(FP_cumulative - 0.9)/(FP_cumulative - FP_cumulative_prev)
EndIf
If ((x_R > upwnd_dist) AND (FP_90pct_range > x_max)) Then
ExitFor
EndIf
Next J
If (FP_win_range = 0.0) Then
Select Case FP_cumulative
Case Is < 1.0
FP_win_range = 100.0*FP_cumulative
Case Is >= 1.0
FP_win_range = 99.0
EndSelect
EndIf
If (FP_win_range > 100) Then
FP_win_range = 99.99
EndIf
If ((FP_cumulative < 0.90) AND (FP_90pct_range = 0)) Then
FP_90pct_range = x_R
EndIf
EndIf
Else
x_max          = NaN
FP_win_range   = NaN
FP_90pct_range = NaN
FP_80pct_range = NaN
FP_70pct_range = NaN
EndIf
EndSub
BeginProg
#If (SENSOR_HFP) Then
shf_plate_cal(1) = 1000/HFP_SNSTVT_1
#If (NMBR_HFP > 1) Then
shf_plate_cal(2) = 1000/HFP_SNSTVT_2
#EndIf
#EndIf
Timer (1, Sec, 0)
secs_snc_pwr_swtch = 0
SemaphoreGet (1)
stn_conf_array_file = FileOpen ("CPU:stn_conf_array.dat", "rb", 0)
stn_conf_array_file_size = FileSize (stn_conf_array_file)
FileClose (stn_conf_array_file)
SemaphoreRelease (1)
If (stn_conf_array_file_size <> 4*NMBR_STN_VAR + 2) Then
sonic_azimuth      = 0.0
latitude           = 69.0
hemisphere_NS      = NORTH
longitude          = -134.0
hemisphere_EW      = WEST
elevation          = 0
height_measurement = 2.0
surface_type       = GRASS
height_canopy      = 0.5
displacement_user  = 0.0
roughness_user     = 0.0
separation_x_irga = 0
separation_y_irga = 0
fetch_wd_thrshold_low  = 0
fetch_wd_thrshold_top  = 360
#If (SENSOR_GPS) Then
height_GPS16X = 2.0
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X) Then
soil_bulk_density = 1300.0
Cds               =  870.0
thick_abv_SHFP    =    0.16
#EndIf
Else
Calfile (stn_conf_array(1), NMBR_STN_VAR, "CPU:stn_conf_array.dat", 1)
EndIf
If ((sonic_azimuth < 0.0) OR (sonic_azimuth > 360.0)) Then
sonic_azimuth = 0.0
EndIf
If (ABS(latitude) > 90.0) Then
latitude = 69.0
EndIf
If ((hemisphere_NS <> NORTH) AND (hemisphere_NS <> SOUTH)) Then
hemisphere_NS = NORTH
EndIf
If (ABS(longitude) > 180.0) Then
longitude = -134.0
EndIf
If ((hemisphere_EW <> EAST) AND (hemisphere_EW <> WEST)) Then
hemisphere_EW = WEST
EndIf
If ((elevation > 8000.0) OR (elevation < -1000.0)) Then
elevation = 0
EndIf
If ((height_measurement > 250.0) OR (height_measurement < 0.2)) Then
height_measurement = 2.0
EndIf
If (((surface_type = CROP) OR (surface_type = GRASS) OR (surface_type = SHRUB)) AND (height_measurement > 100.0)) Then
height_measurement = 2.0
EndIf
If ((surface_type < CROP) OR (surface_type > ICE)) Then
surface_type = GRASS
EndIf
If ((surface_type = BARELAND) OR (surface_type = WATER) OR (surface_type = ICE)) Then
height_canopy = 0.0
EndIf
If (((surface_type = CROP) OR (surface_type = GRASS) OR (surface_type = SHRUB)) AND (height_canopy > 15.0)) Then
height_canopy = 0.5
EndIf
If ((surface_type = FOREST) AND (height_canopy > 100.0)) Then
height_canopy = 0.5
EndIf
If (displacement_user > height_measurement) OR (displacement_user < 0.0) Then
displacement_user = 0.0
EndIf
If (roughness_user > height_measurement) OR (roughness_user < 0.0) Then
roughness_user = 0.0
EndIf
If ((fetch_wd_thrshold_low < 0) OR (fetch_wd_thrshold_low >= 360) OR (fetch_wd_thrshold_low >= fetch_wd_thrshold_top)) Then
fetch_wd_thrshold_low = 0
EndIf
If ((fetch_wd_thrshold_top < 0) OR (fetch_wd_thrshold_top >= 360) OR (fetch_wd_thrshold_low >= fetch_wd_thrshold_top)) Then
fetch_wd_thrshold_top = 360
EndIf
#If (SENSOR_GPS) Then
If (height_GPS16X < 0) OR (height_GPS16X > 100.0) Then
height_GPS16X = height_measurement
EndIf
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X) Then
If  ((soil_bulk_density > 1800.0) OR (soil_bulk_density < 600.0)) Then
soil_bulk_density = 1300.0
EndIf
If ((Cds < 400.0) OR (Cds > 1500.0)) Then
Cds =  870.0
EndIf
If ((thick_abv_SHFP > 0.30) OR (thick_abv_SHFP < 0.0)) Then
thick_abv_SHFP = 0.16
EndIf
#EndIf
Call Displacement_roughness_heights (surface_type, displacement_user, roughness_user, height_canopy, height_measurement, d, z0, z)
For i = 14 To 17
If  (NOT (stn_conf_array(i) > 0.0)) Then
stn_conf_array(i) = 100.0*z
EndIf
Next
z_prev = z
Move(stn_conf_array_prev(1), NMBR_STN_VAR , stn_conf_array(1), NMBR_STN_VAR)
surface_type_text = surface_type_array(surface_type)
Calfile (stn_conf_array(1), NMBR_STN_VAR, "CPU:stn_conf_array.dat", 0)
SemaphoreGet (1)
planar_fit_angle_conf_array_file      = FileOpen ("CPU:planar_fit_angle_conf_array.dat", "rb", 0)
planar_fit_angle_conf_array_file_size = FileSize (planar_fit_angle_conf_array_file)
FileClose (planar_fit_angle_conf_array_file)
SemaphoreRelease (1)
If (planar_fit_angle_conf_array_file_size <> (4*8 + 2)) Then
Move (planar_fit_angle_conf_array(1,1), 8 , 0, 1)
Calfile (planar_fit_angle_conf_array(1, 1), 8, "CPU:planar_fit_angle_conf_array.dat", 0)
Else
Calfile (planar_fit_angle_conf_array(1, 1), 8, "CPU:planar_fit_angle_conf_array.dat", 1)
For i =1 To 4
If (planar_fit_angle_conf_array (i, 1) <> 0) OR (planar_fit_angle_conf_array (i, 2) <> 0) Then
Planar_Fit_flg = TRUE
ExitFor
EndIf
Next i
EndIf
Move (planar_fit_angle_conf_array_prev(1,1), 8, planar_fit_angle_conf_array(1,1), 8)
datalogger_clock = status.timestamp(4,1)
TIMESTAMP_START = Left (datalogger_clock, 4) & Mid (datalogger_clock, 6, 2) & Mid (datalogger_clock, 9, 2) & Mid (datalogger_clock,12,2)& Mid (datalogger_clock,15,2)
TIMESTAMP_START = Left (TIMESTAMP_START, 12)
Erase(TIMESTAMP_END)
bytes_rcd_Time_Series = (16 + 4*13 - 4*(IRGASON))
#If (SENSOR_LI7700) Then
bytes_rcd_Time_Series += 4*5
#EndIf
bytes_tbl_Time_Series = (DAY_TSRS_CRD*24*3600*(1000/SCN_INTV)*1.1)*bytes_rcd_Time_Series
bytes_tbl_Time_Series = bytes_tbl_Time_Series + 1024*3.11
day_snc_0101_1990 = SecsSince1990(status.TimeStamp(1,1), 1)/(24*3600)
days_actv_tbl_Time_Series = DAY_TSRS_CRD - (day_snc_0101_1990 MOD DAY_TSRS_CRD)
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series
bytes_rcd_AmeriFluxFormat = 12*2 + 9*42
#If (SENSOR_LI7700) Then
bytes_rcd_AmeriFluxFormat += 9*3
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X)  Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*2
#EndIf
#If (SENSOR_T_RH) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*3
#EndIf
#If (SENSOR_CS65X) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*NMBR_CS65X
#EndIf
#If (SENSOR_TCAV) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*NMBR_TCAV
#EndIf
#If ((NOT SENSOR_TCAV) AND SENSOR_CS65X)  Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*NMBR_CS65X
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*1
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*1
#EndIf
#If (SENSOR_CS310) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*1
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*1
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*3
#EndIf
#If (SENSOR_TE525) Then
bytes_rcd_AmeriFluxFormat = bytes_rcd_AmeriFluxFormat + 9*1
#EndIf
bytes_tbl_AmeriFluxFormat = DAY_FLUX_CRD*(24*60/OUTPUT_INTV)*1.1*bytes_rcd_AmeriFluxFormat + 1024*5.0
bytes_rcd_flux_CSFormat = 16 + 4*61 + 16*1
#If (SENSOR_LI7700) Then
bytes_rcd_flux_CSFormat += 4*7
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X))  Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*2
#EndIf
#If (SENSOR_Rn AND SENSOR_HFP AND SENSOR_CS65X) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#If (SENSOR_TE525) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#EndIf
#EndIf
#If (SENSOR_T_RH) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*6
#EndIf
#If (SENSOR_TE525) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#EndIf
#If (SENSOR_Rn) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*4
#EndIf
#If (SENSOR_SN500) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#EndIf
#If (SENSOR_CS310) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*1
#EndIf
#If (SENSOR_TCAV) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*NMBR_TCAV
#EndIf
#If ((NOT SENSOR_TCAV) AND SENSOR_CS65X)  Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*NMBR_CS65X
#EndIf
#If (SENSOR_CS65X) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*NMBR_CS65X
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*NMBR_CS65X
#EndIf
#If (SENSOR_HFP) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*NMBR_HFP
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X) Then
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*NMBR_HFP
bytes_rcd_flux_CSFormat = bytes_rcd_flux_CSFormat + 4*NMBR_HFP
#EndIf
x_tmp = 4*120
#If (SENSOR_LI7700) Then
x_tmp = x_tmp + 4*18
#EndIf
#If (SENSOR_T_RH) Then
x_tmp = x_tmp + 4*2
#EndIf
#If (SENSOR_SN500) Then
x_tmp = x_tmp + 4*1
#EndIf
#If (SENSOR_HFP) Then
x_tmp = x_tmp + 4*NMBR_HFP
#EndIf
#If (ONE_FL_TABLE) Then
bytes_rcd_flux_CSFormat = (bytes_rcd_flux_CSFormat + x_tmp)
days_actv_tbl_flux_CSFormat = DAY_FLUX_CRD - (day_snc_0101_1990 MOD DAY_FLUX_CRD)
days_totl_tbl_flux_CSFormat = days_actv_tbl_flux_CSFormat
card_bytes_free_assgnd = (days_actv_tbl_flux_CSFormat/DAY_FLUX_CRD)*bytes_tbl_AmeriFluxFormat
#Else
bytes_rcd_flux_notes = 16 + x_tmp
bytes_tbl_flux_notes = DAY_FLUX_CRD*(24*60/OUTPUT_INTV)*1.1*bytes_rcd_flux_notes + 1024*5.0
days_actv_tbl_flux_CSFormat_notes = DAY_FLUX_CRD - (day_snc_0101_1990 MOD DAY_FLUX_CRD)
days_totl_tbl_flux_CSFormat_notes = days_actv_tbl_flux_CSFormat_notes
card_bytes_free_assgnd = (days_actv_tbl_flux_CSFormat_notes/DAY_FLUX_CRD)*bytes_tbl_AmeriFluxFormat
#EndIf
bytes_tbl_flux_CSFormat  = DAY_FLUX_CRD*(24*60/OUTPUT_INTV)*1.1*bytes_rcd_flux_CSFormat + 1024*5.0
card_bytes_free = Status.CardBytesFree
If  (card_bytes_free >= 0) AND (Status.CardStatus = "Card OK.") Then
card_bytes_free_unassgnd = card_bytes_free - card_bytes_free_assgnd
#If (ONE_FL_TABLE) Then
While (((days_totl_tbl_flux_CSFormat >= days_totl_tbl_Time_Series) AND (card_bytes_free_unassgnd > bytes_tbl_Time_Series)) OR _
((days_totl_tbl_flux_CSFormat < days_totl_tbl_Time_Series)  AND (card_bytes_free_unassgnd > (bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat))))
If (days_totl_tbl_flux_CSFormat >= days_totl_tbl_Time_Series) Then
card_bytes_free_assgnd    = card_bytes_free_assgnd    + bytes_tbl_Time_Series
days_more_tbl_Time_Series = days_more_tbl_Time_Series + DAY_TSRS_CRD
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series + days_more_tbl_Time_Series
Else
card_bytes_free_assgnd      = card_bytes_free_assgnd + bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat
days_more_tbl_flux_CSFormat = days_more_tbl_flux_CSFormat + DAY_FLUX_CRD
days_totl_tbl_flux_CSFormat = days_more_tbl_flux_CSFormat + days_actv_tbl_flux_CSFormat
EndIf
card_bytes_free_unassgnd = card_bytes_free - card_bytes_free_assgnd
Wend
If (days_totl_tbl_Time_Series >= days_totl_tbl_flux_CSFormat) Then
card_storage_available_days = days_totl_tbl_flux_CSFormat
Else
card_storage_available_days = days_totl_tbl_Time_Series
EndIf
#Else
While (((days_totl_tbl_flux_CSFormat_notes >= days_totl_tbl_Time_Series) AND (card_bytes_free_unassgnd > bytes_tbl_Time_Series)) OR _
((days_totl_tbl_flux_CSFormat_notes < days_totl_tbl_Time_Series)  AND (card_bytes_free_unassgnd > (bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat + bytes_tbl_flux_notes))))
If (days_totl_tbl_flux_CSFormat_notes >= days_totl_tbl_Time_Series) Then
card_bytes_free_assgnd    = card_bytes_free_assgnd    + bytes_tbl_Time_Series
days_more_tbl_Time_Series = days_more_tbl_Time_Series + DAY_TSRS_CRD
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series + days_more_tbl_Time_Series
Else
card_bytes_free_assgnd            = card_bytes_free_assgnd + bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat + bytes_tbl_flux_notes
days_more_tbl_flux_CSFormat_notes = days_more_tbl_flux_CSFormat_notes + DAY_FLUX_CRD
days_totl_tbl_flux_CSFormat_notes = days_actv_tbl_flux_CSFormat_notes + days_more_tbl_flux_CSFormat_notes
EndIf
card_bytes_free_unassgnd  = card_bytes_free - card_bytes_free_assgnd
Wend
If (days_totl_tbl_Time_Series >= days_totl_tbl_flux_CSFormat_notes) Then
card_storage_available_days = days_totl_tbl_flux_CSFormat_notes
Else
card_storage_available_days = days_totl_tbl_Time_Series
EndIf
#EndIf
Else
days_actv_tbl_Time_Series          = NaN
days_more_tbl_Time_Series          = NaN
days_totl_tbl_Time_Series          = NaN
#If (ONE_FL_TABLE) Then
days_actv_tbl_flux_CSFormat       = NaN
days_more_tbl_flux_CSFormat       = NaN
days_totl_tbl_flux_CSFormat       = NaN
#Else
days_actv_tbl_flux_CSFormat_notes = NaN
days_more_tbl_flux_CSFormat_notes = NaN
days_totl_tbl_flux_CSFormat_notes = NaN
#EndIf
card_storage_available_days       = NaN
EndIf
RealTime(realtime_array(1))
#If (SENSOR_HFP AND SENSOR_CS65X) Then
Offset_intv_delta_ht_storage = ((3600.0*realtime_array(4) + 60*realtime_array(5) + realtime_array(6)) MOD (60*OUTPUT_INTV))
#EndIf
SDMSpeed (SDM_CLCK_SPD)
#If (SENSOR_GPS) Then
PortPairConfig (GPS16X_PORT, 2)
#EndIf
#If (SENSOR_LI7700) Then
SetSetting ("EthernetEnable",TRUE)
SetStatus ("EthernetPower",0)
IPRoute (LI7700_IP_ADDR_str,0)
#EndIf
Scan (SCN_INTV, mSec, SCAN_BUFFER_SIZE, 0)
#If (SENSOR_GPS) Then
GPS (latitude_GPS_degree, GPS16X_COM_PORT, UTC_OFST*3600, TIME_DIFF_RST_DATALOGGER, nmea_sentence(1))
#EndIf
#If (SENSOR_LI7700) Then
If ( ga_77_scan_cntr > GA_77_SCAN_BUFF_SIZE ) Then
SerialInRecord (ga_77_socket,ga_77_in_bytes_str,&h44,0,&h0A,ga_77_nmbr_bytes_rtrnd,11)
If ( ga_77_nmbr_bytes_rtrnd = 0 ) Then
ga_77_scan_cntr = 0
ga_77_tcip_ip_socket_close_timer = Timer (0,Sec,0)
Move (ga_77(1),5,NAN,1)
bad_CH4_rcd = -1
Move (diag_bits_77(1),12,1,1)
Else
ga_77_tcip_ip_socket_close_timer = Timer (0,Sec,3)
SplitStr (ga_77_tmp(1),ga_77_in_bytes_str,CHR(09),9,4)
ga_77_tmp(10) = Right (ga_77_in_bytes_str,3)
ga_77_checksum_f = (ga_77_tmp(10) EQV (CheckSum ("D"&ga_77_in_bytes_str,7,ga_77_nmbr_bytes_rtrnd-2)))
If ( ga_77_checksum_f ) Then
diag_77 = ga_77_tmp(4)
CH4_77 = ga_77_tmp(6)
amb_tmpr_77 = ga_77_tmp(7)
amb_press_77 = ga_77_tmp(8)
rssi_77 = ga_77_tmp(9)
diag_77_tmp = IIF (diag_77 <> NAN,diag_77,&hfffe)
diag_77_tmp = diag_77_tmp >> 4
diag_77_aggregate = diag_77_aggregate OR diag_77_tmp
For i = 1 To 12
diag_bits_77(i) = diag_77_tmp AND &h1
diag_77_tmp = diag_77_tmp >> 1
Next i
bad_CH4_rcd = 0
If ( (diag_77 = NAN) OR (ga_77_not_ready_f <> 0) OR (ga_77_no_signal_f <>0) ) Then
bad_CH4_rcd = -1
ElseIf ( (ga_77_ref_unlocked_f <> 0) OR (ga_77_lsr_tmpr_unreg_f <> 0) OR (ga_77_blk_tmpr_unreg_f <>0) ) Then
bad_CH4_rcd = -1
ElseIf ( (ga_77_motor_spinning_f <> 0) OR (ga_77_pump_on_f <> 0) OR (ga_77_calibrating_f <>0) ) Then
bad_CH4_rcd = -1
ElseIf ( (CH4_77 = NAN) OR (CH4_77 > CH4_UPPER_BOUND) OR (CH4_77 < CH4_LOWER_BOUND) ) Then
bad_CH4_rcd = -1
ElseIf ( (amb_tmpr_77 = NAN) OR (amb_press_77 = NAN) ) Then
bad_CH4_rcd = -1
ElseIf ( (rssi_77 = NAN) OR (rssi_77 < RSSI_THRESHOLD) ) Then
bad_CH4_rcd = -1
Else
bad_CH4_rcd = 0
EndIf
Else
Move (ga_77(1),5,NAN,1)
bad_CH4_rcd = -1
Move (diag_bits_77(1),12,1,1)
EndIf
EndIf
If ( NOT (ga_77_clear_buff_f) AND ( ga_77_in_bytes_str = "Y" ) ) Then ( ga_77_clear_buff_f = TRUE )
If ( ga_77_clear_buff_f AND ga_77_checksum_f ) Then
ga_77_clear_buff_f = FALSE
ga_77_scan_cntr = 0
ga_77_nmbr_bytes_rtrnd = 0
SerialFlush (ga_77_socket)
EndIf
Else
ga_77_scan_cntr += 1
Move (ga_77(1),5,NAN,1)
bad_CH4_rcd = -1
Move (diag_bits_77(1),12,1,1)
EndIf
CallTable delay_ga_77
#EndIf
#If (SENSOR_T_RH)
VoltSe(T_probe,1,mV1000,9,False,0,60,0.14,-80)
VoltSe(RH_probe,1,mV1000,10,False,0,60,0.1,0)
#EndIf
If (set_CO2_fast_tmpr_flg AND (CO2_fast_tmpr <> select_CO2_fast_tmpr)) Then
CO2_fast_tmpr = select_CO2_fast_tmpr
set_CO2_fast_tmpr_flg = FALSE
EndIf
EC100 (sonic_irga_raw(1), EC100SDM_ADR, 2)
If ((sonic_irga_raw(5) = NaN) AND (sonic_irga_raw(8) = NaN) AND ec100_set_reset_f) Then
Move (sonic_irga_raw(1), 13, sonic_irga_raw_prev(1), 13)
ec100_set_reset_f = FALSE
Else
Move (sonic_irga_raw_prev(1), 13, sonic_irga_raw(1), 13)
EndIf
If (CO2_fast_tmpr) Then
sonic_irga_raw(14) = sonic_irga_raw(6)
sonic_irga_raw(6)  = sonic_irga_raw(13)
sonic_irga_raw(13) = sonic_irga_raw(14)
EndIf
CallTable delay_3d
CallTable delay_cs
If ((sonic_irga_raw(8) = NaN) AND (NOT get_ec100_config_f))  Then
NaN_cnt += 1
If ((NaN_cnt > (600 + SLW_SCN_INTV)/SCN_INTV) AND (NOT irga_vlt_low_auto_off) AND _
(NOT irga_pwr_off_f) AND (V_batt_runng > SYSTEM_PWR_OFF_SET_PT)) Then
config_ec100_f = TRUE
NaN_cnt        = 0
EndIf
Else
NaN_cnt = 0
EndIf
If (set_irga_power_flg) Then
set_irga_power_flg = FALSE
If (NOT irga_pwr_switch_f) Then
Select Case irga_power
Case PWR_ON
irga_pwr_off_f = FALSE
Case PWR_OFF
irga_pwr_off_f = TRUE
EndSelect
Else
irga_power = irga_pwr_array (1, 2)
Select Case irga_power
Case PWR_ON
prev_value_str = "IRGA on"
curr_value_str = prev_value_str
Case PWR_OFF
prev_value_str = "IRGA off"
curr_value_str = prev_value_str
EndSelect
message = "Auto pwr swtchng: Manual oprtn cancld."
CallTable System_Operatn_Notes
EndIf
EndIf
If ((irga_pwr_off_f_prev <> irga_pwr_off_f) AND (NOT irga_pwr_switch_f)) Then
If (irga_pwr_off_f AND (secs_snc_pwr_swtch >= 120)) Then
irga_pwr_switch_f    = TRUE
irga_pwr_array(1, 2) = PWR_OFF
irga_pwr_array(2, 2) = H_OFF
prev_value_str       = "IRGA on"
curr_value_str       = "IRGA off"
message              = "IRGA manually off."
irga_pwr_off_f_prev  = irga_pwr_off_f
ElseIf (irga_pwr_off_f AND (secs_snc_pwr_swtch < 120)) Then
message = "EC100 being turned off w/in 120 s."
ElseIf ((NOT irga_pwr_off_f) AND (V_batt_runng > SYSTEM_PWR_OFF_SET_PT) AND (secs_snc_pwr_swtch > 100)) Then
irga_pwr_switch_f    = TRUE
irga_pwr_array(1, 2) = PWR_ON
irga_pwr_array(2, 2) = heater_user
prev_value_str      = "IRGA off"
curr_value_str      = "IRGA on"
message             = "IRGA manually on."
irga_pwr_off_f_prev = irga_pwr_off_f
ElseIf ((NOT irga_pwr_off_f) AND (V_batt_runng <= SYSTEM_PWR_OFF_SET_PT)) Then
message        = "IRGA cannot be on: low volt."
irga_pwr_off_f = irga_pwr_off_f_prev
ElseIf ((NOT irga_pwr_off_f) AND (V_batt_runng > SYSTEM_PWR_OFF_SET_PT) AND (secs_snc_pwr_swtch <= 100))  Then
message = "IRGA being turned on w/in 100 s."
EndIf
EndIf
If (CO2_span_gas <> CO2_span_gas_prev) Then
prev_value_str = CO2_span_gas_prev & " umol mol-1"
curr_value_str = CO2_span_gas      & " umol mol-1"
message        = "CO2 span gas value rest."
CallTable System_Operatn_Notes
CO2_span_gas_prev = CO2_span_gas
EndIf
If (T_DP_span_gas <> T_DP_span_gas_prev) Then
prev_value_str = T_DP_span_gas_prev & " Deg C"
curr_value_str = T_DP_span_gas      & " Deg C"
message        = "H2O span gas value rest."
CallTable System_Operatn_Notes
T_DP_span_gas_prev = T_DP_span_gas
EndIf
Select Case config_ec100_initial_f
Case TRUE
If (sonic_irga_raw(8) <> NAN) Then
If (get_ec100_config_f AND config_ec100_f) Then
Call Config (ec100_setting_array(1,1), 11, get_ec100_config_f)
config_type    = "Recrd prev config"
config_status  = "Started"
curr_value_str = "Recrding"
If (operatn_failed_cnt = 0) Then
prev_value_str = "Starting"
Else
prev_value_str = curr_value_str
EndIf
If (NOT get_ec100_config_f) Then
config_status = "Recrded"
press_source   = ec100_setting_array(2, 2)
CO2_zero_coeff = ec100_setting_array(5, 2)
CO2_span_coeff = ec100_setting_array(6, 2)
H2O_zero_coeff = ec100_setting_array(7, 2)
H2O_span_coeff = ec100_setting_array(8 ,2)
heater_actual  = ec100_setting_array(9, 2)
heater_user    = heater_actual
irga_power     = ec100_setting_array(10, 2)
shadow_corr    = ec100_setting_array(11, 2)
For i = 1 To 11
ec100_reset_array(i, 2) = ec100_setting_array(i,2)
Next i
CallTable Config_Setting_Notes
message = "EC100: Prev config recrded"
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
message = "Recrd prev EC100 config: Failed " & operatn_failed_cnt & "."
If (operatn_failed_cnt > 3) Then
get_ec100_config_f = FALSE
message = "Recrd prev EC100 config: Failed, chck EC100 LED."
EndIf
EndIf
CallTable System_Operatn_Notes
NaN_cnt = 0
EndIf
If (config_ec100_f AND (NOT get_ec100_config_f)) Then
If ((ec100_setting_array (1, 2) <> BANDWIDTH) OR (ec100_setting_array (2, 2) <> DIFFERENTIAL_PRESS) _
OR (ec100_setting_array (4, 2) <> TEMPERATURE_SOURCE) OR (ec100_setting_array (9, 2) <> H_AUTO)) Then
Call Config (config_ec100_array(1, 1), 4, config_ec100_f)
config_type    = "Requrd confg"
config_status  = "Confgrng"
curr_value_str = "Config as requrd"
If (operatn_failed_cnt = 0) Then
prev_value_str = "Recrdng"
Else
prev_value_str = curr_value_str
EndIf
If (NOT config_ec100_f) Then
config_status       = "Confgrd"
get_ec100_config_f  = TRUE
message = "EC100 confgrd as requrd"
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
message = "EC100 config for requrd failed #" & operatn_failed_cnt & "."
If (operatn_failed_cnt > 3) Then
config_ec100_f = FALSE
message = "EC100 config for requrd failed #" & operatn_failed_cnt & " chck EC100 LED."
EndIf
EndIf
CallTable System_Operatn_Notes
NaN_cnt = 0
Else
curr_value_str = "Config chck"
prev_value_str = "Recrding"
message        = "EC100 config matches as requrd"
config_ec100_f = FALSE
CallTable System_Operatn_Notes
NaN_cnt = 0
EndIf
EndIf
If (get_ec100_config_f AND (NOT config_ec100_f)) Then
Call Config (ec100_setting_array(1, 1), 11, get_ec100_config_f)
config_type    = "Recrd reconfig"
config_status  = "Started"
curr_value_str = "Rcrding"
If (operatn_failed_cnt = 0) Then
prev_value_str = "Config as requrd"
Else
prev_value_str = curr_value_str
EndIf
If (NOT get_ec100_config_f) Then
config_status  = "Recrded"
For i = 1 To 11
ec100_reset_array(i, 2) = ec100_setting_array(i, 2)
Next i
CallTable Config_Setting_Notes
message = "EC100 reconfig recrded."
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
message = "Reading EC100 confgs failed: # " & operatn_failed_cnt & "."
If (operatn_failed_cnt > 3) Then
get_ec100_config_f = FALSE
message = "Reading EC100 confgs failed, chck EC100 LED."
EndIf
EndIf
CallTable System_Operatn_Notes
NaN_cnt        = 0
config_ec100_f = FALSE
EndIf
If ((NOT config_ec100_f) AND (NOT get_ec100_config_f)) Then
For i = 1 To 4
Select Case i
Case 1
prev_value_str = "CO2zro coef: N/A"
curr_value_str = "CO2zro coef: " & CO2_zero_coeff
rst_CO2_zro_coef_flg = ((CO2_zero_coeff < 0.990) OR (CO2_zero_coeff > 1.011))
Case 2
prev_value_str = "CO2spn coef: N/A"
curr_value_str = "CO2spn coef: " & CO2_span_coeff
rst_CO2_spn_coef_flg = ((CO2_span_coeff < 0.962) OR (CO2_span_coeff > 1.039))
Case 3
prev_value_str = "H2Ozro coef: N/A"
curr_value_str = "H2Ozro coef: " & H2O_zero_coeff
rst_H2O_zro_coef_flg = ((H2O_zero_coeff < 0.979) OR (H2O_zero_coeff > 1.020))
Case 4
prev_value_str = "H2Ospn coef: N/A"
curr_value_str = "H2Ospn coef: " & H2O_span_coeff
rst_H2O_spn_coef_flg = ((H2O_span_coeff < 0.940) OR (H2O_span_coeff > 1.057))
EndSelect
If (rst_zro_spn_coef_flg_array (i)) Then
Select Case i
Case 1
message = "CO2zro coef out of rng to reset."
Case 2
message = "CO2spn coef out of rng to reset."
Case 3
message = "H2Ozro coef out of rng to reset."
Case 4
message = "H2Ospn coef out of rng to reset."
EndSelect
Else
Select Case i
Case 1
message = "CO2zro coef in rng."
rst_zro_spn_coeff_array (1, 2) = CO2_zero_coeff
Case 2
message = "CO2spn coef in rng."
rst_zro_spn_coeff_array (2, 2) = CO2_span_coeff
Case 3
message = "H2Ozro coef in rng."
rst_zro_spn_coeff_array (3, 2) = H2O_zero_coeff
Case 4
message = "H2Ospn coef in rng."
rst_zro_spn_coeff_array (4, 2) = H2O_span_coeff
EndSelect
EndIf
CallTable System_Operatn_Notes
Next i
NaN_cnt = 0
config_ec100_initial_f = FALSE
prev_value_str = "Chck coeffs"
EndIf
Else
If (NaN_cnt > (600 + SLW_SCN_INTV)/SCN_INTV) Then
If (prev_value_str = NaN) Then
prev_value_str = "Not running"
curr_value_str = "Initialztn"
EndIf
message = "While starting, NaN diag: " & NaN_cnt
CallTable System_Operatn_Notes
NaN_cnt = 0
EndIf
EndIf
Case FALSE
If (irga_pwr_switch_f) Then
Call Config (irga_pwr_array(1, 1), 2, irga_pwr_switch_f)
config_type   = "IRGA pwr"
config_status = "Switching"
Select Case irga_pwr_array(1, 2)
Case PWR_ON
prev_value_str_pwr = "IRGA off"
Case PWR_OFF
prev_value_str_pwr = "IRGA on"
EndSelect
If (NOT irga_pwr_switch_f) Then
config_status      = "Switched"
config_command     = 21
get_ec100_config_f = TRUE
Select Case V_batt_runng
Case Is < SYSTEM_PWR_OFF_SET_PT
irga_vlt_low_auto_off = TRUE
irga_user_set_pwr_on  = (NOT irga_pwr_off_f)
irga_pwr_off_f        = TRUE
irga_pwr_off_f_prev   = TRUE
Case Is >= SYSTEM_PWR_OFF_SET_PT
If (irga_vlt_low_auto_off AND irga_pwr_off_f) Then
irga_vlt_low_auto_off = FALSE
irga_pwr_off_f        = FALSE
irga_pwr_off_f_prev   = FALSE
ElseIf (irga_vlt_low_auto_off AND (NOT irga_pwr_off_f)) Then
irga_vlt_low_auto_off = FALSE
irga_user_set_pwr_on  = TRUE
ElseIf (NOT irga_vlt_low_auto_off) Then
irga_user_set_pwr_on = (NOT irga_pwr_off_f)
EndIf
EndSelect
Timer (1, Sec, 2)
secs_snc_pwr_swtch = 0
operatn_failed_cnt = 0
CallTable System_Operatn_Notes
Else
operatn_failed_cnt = operatn_failed_cnt + 1
If (operatn_failed_cnt > 2000/SCN_INTV) Then
prev_value_str = prev_value_str_pwr
curr_value_str = prev_value_str_pwr
message = "IRGA switch failed #" & operatn_failed_cnt & "."
CallTable System_Operatn_Notes
irga_pwr_switch_f     = FALSE
irga_pwr_off_f        = FALSE
irga_pwr_off_f_prev   = FALSE
irga_power            = ec100_reset_array (10, 2)
irga_pwr_array (1, 2) = ec100_reset_array (10, 2)
irga_pwr_array (2, 2) = heater_user
EndIf
EndIf
NaN_cnt        = 0
config_ec100_f = FALSE
ElseIf ((Left(config_status, 11) = "Switched on") AND (secs_snc_pwr_swtch < 120)) Then
config_ec100_f         = FALSE
set_press_source_flg   = FALSE
set_shadow_corr_flg    = FALSE
set_zero_flg           = FALSE
set_CO2_span_flg       = FALSE
set_H2O_span_flg       = FALSE
rst_CO2_zro_coef_flg   = FALSE
rst_CO2_spn_coef_flg   = FALSE
rst_H2O_zro_coef_flg   = FALSE
rst_H2O_spn_coef_flg   = FALSE
set_heater_flg         = FALSE
message = "IRGA warming up"
ElseIf (config_ec100_f) Then
Call Config (ec100_reset_array(1, 1), 11, config_ec100_f)
config_type   = "Reconfg"
config_status = "Reconfgurng"
curr_value_str = "Reconfg"
If (operatn_failed_cnt = 0) Then
prev_value_str = "fld_mea"
Else
prev_value_str = curr_value_str
EndIf
If (NOT config_ec100_f) Then
config_status      = "Reconfgrd"
config_command     = 1000
get_ec100_config_f = TRUE
message            = "EC100 reconfgrd"
operatn_failed_cnt = 0
CallTable System_operatn_Notes
Else
operatn_failed_cnt = operatn_failed_cnt + 1
Select Case operatn_failed_cnt
Case Is <=3
message = "EC100 reconfig failed: #" & operatn_failed_cnt & "."
CallTable System_operatn_Notes
Case Is > 3
If ((operatn_failed_cnt = 4) OR TimeIntoInterval(1, 30, min)) Then
message = "EC100 reconfig failed: #" & operatn_failed_cnt & ", chck EC100 (e.g., PWR)."
CallTable System_operatn_Notes
EndIf
EndSelect
EndIf
NaN_cnt =0
ElseIf (set_press_source_flg AND (sonic_irga_raw(8) <> NaN)) Then
press_source_array(1, 2) = press_source
Call Config (press_source_array(1, 1), 1, set_press_source_flg)
config_type   = "Barometer"
config_status = "Switching"
Select Case ec100_reset_array(2, 2)
Case BB
prev_value_str = "Basic"
Case EB
prev_value_str = "Extended"
Case UB
prev_value_str = "User-slctd"
EndSelect
If (NOT set_press_source_flg) Then
config_status      = "Switched"
config_command     = 2
get_ec100_config_f = TRUE
Select Case press_source
Case BB
curr_value_str = "Basic"
Case EB
curr_value_str = "Extended"
Case UB
curr_value_str = "User-slctd"
EndSelect
message = "Barometer optn switchd."
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
curr_value_str = prev_value_str
message = "Barometer optn switch: Failed #" & operatn_failed_cnt & "."
If (operatn_failed_cnt > 3)
set_press_source_flg = FALSE
press_source         = ec100_reset_array(2, 2)
curr_value_str       = prev_value_str
operatn_failed_cnt   = 0
message = "Barometer optn switch: Faild, Cancld"
EndIf
EndIf
CallTable System_Operatn_Notes
NaN_cnt        = 0
config_ec100_f = FALSE
ElseIf (set_shadow_corr_flg AND (sonic_irga_raw(8) <> NaN)) Then
shadow_corr_array(1, 2) = shadow_corr
Call Config (shadow_corr_array(1, 1), 1, set_shadow_corr_flg)
config_type   = "Shadow crrctn"
config_status = "Switching"
Select Case ec100_reset_array(11, 2)
Case CORR_ON
prev_value_str = "On"
Case  CORR_OFF
prev_value_str = "Off"
EndSelect
If (NOT set_shadow_corr_flg) Then
config_status      = "Swtched"
config_command     = 25
get_ec100_config_f = TRUE
Select Case shadow_corr
Case CORR_ON
curr_value_str = "On"
Case CORR_OFF
curr_value_str = "Off"
EndSelect
message = "Shadow corrctn switchd."
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
curr_value_str = prev_value_str
message = "Shadow corrctn switchd: Failed #" & operatn_failed_cnt & "."
If (operatn_failed_cnt > 3)
set_shadow_corr_flg = FALSE
shadow_corr         = ec100_reset_array(11, 2)
curr_value_str      = prev_value_str
operatn_failed_cnt  = 0
message = "Shadow corrctn switch: Faild, Cancld"
EndIf
EndIf
CallTable System_Operatn_Notes
NaN_cnt = 0
config_ec100_f = FALSE
ElseIf (set_zero_flg AND (sonic_irga_raw(8) <> NaN)) Then
If (operatn_failed_cnt = 0) Then
prev_value_str_CO2 = "CO2: " & sonic_irga_raw(6) & " mg m-3"
prev_value_str_H2O = "H2O: " & sonic_irga_raw(7) & " g m-3"
EndIf
Call Config (zro_array(1, 1), 1, set_zero_flg)
config_type   = "CO2 & H2O Zro"
config_status = "Zeroing"
If (NOT set_zero_flg) Then
config_status      = "Zeroed"
config_command     = 111
get_ec100_config_f = TRUE
prev_value_str = prev_value_str_CO2
curr_value_str = "CO2: 0 mg m-3"
message        = "CO2 zro prfrmed."
CallTable System_Operatn_Notes
prev_value_str = prev_value_str_H2O
curr_value_str = "H2O: 0 g m-3"
message        = "H2O zro prfrmed."
CallTable System_Operatn_Notes
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
Select Case operatn_failed_cnt
Case 1, 2
prev_value_str     = prev_value_str_CO2
prev_value_str_CO2 = "CO2: " & sonic_irga_raw(6) & " mg m-3"
curr_value_str     = prev_value_str_CO2
message            = "CO2 zro operatn #" & operatn_failed_cnt & " to retry."
Case 3
prev_value_str     = prev_value_str_CO2
curr_value_str     = "CO2: " & sonic_irga_raw(6) & " mg m-3"
message            = "CO2 zro operatn #3 failed: aborted."
EndSelect
CallTable System_Operatn_Notes
Select Case operatn_failed_cnt
Case 1, 2
prev_value_str     = prev_value_str_H2O
prev_value_str_H2O = "H2O: " & sonic_irga_raw(7) & " g m-3"
curr_value_str     = prev_value_str_H2O
message = "H2O zro operatn #" & operatn_failed_cnt & " to retry."
Case 3
set_zero_flg   = FALSE
prev_value_str = prev_value_str_H2O
curr_value_str = "H2O: " & sonic_irga_raw(7) & " g m-3"
message        = "H2O zro operatn #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
CallTable System_Operatn_Notes
EndIf
NaN_cnt        = 0
config_ec100_f = FALSE
ElseIf (set_CO2_span_flg AND (sonic_irga_raw(8) <> NaN)) Then
If (operatn_failed_cnt = 0) Then
prev_value_str_CO2 = "CO2: " & CO2_mixratio_kd & " umol mol-3"
EndIf
spn_CO2_array(1, 2) = CO2_span_gas
Call Config (spn_CO2_array(1, 1), 2, set_CO2_span_flg)
config_type   = "CO2 span"
config_status = "Spanning"
If (NOT set_CO2_span_flg) Then
config_status      = "Spanned"
config_command     = 112
get_ec100_config_f = TRUE
prev_value_str = prev_value_str_CO2
curr_value_str = "CO2: " & CO2_span_gas & " umol mol-3"
message        = "CO2 spn prfrmed."
CallTable System_Operatn_Notes
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
Select Case operatn_failed_cnt
Case 1, 2
prev_value_str     = prev_value_str_CO2
prev_value_str_CO2 = "CO2: " & CO2_mixratio_kd & " umol mol-3"
curr_value_str     = prev_value_str_CO2
message            = "CO2 spn operatn #" & operatn_failed_cnt & " to retry."
Case 3
set_CO2_span_flg    = FALSE
prev_value_str      = prev_value_str_CO2
curr_value_str      = "CO2: " & CO2_mixratio_kd & " umol mol-3"
message             = "CO2 spn operatn #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
CallTable System_Operatn_Notes
EndIf
NaN_cnt        = 0
config_ec100_f = FALSE
ElseIf (set_H2O_span_flg AND (sonic_irga_raw(8) <> NaN)) Then
If (operatn_failed_cnt = 0) Then
prev_value_str_H2O = "Dew PT: " & T_DP & " Deg C"
EndIf
spn_H2O_array(1, 2) = T_DP_span_gas
Call Config (spn_H2O_array(1, 1), 2, set_H2O_span_flg)
config_type   = "H2O span"
config_status = "Spanning"
If (NOT set_H2O_span_flg) Then
config_status      = "Spanned"
config_command     = 113
get_ec100_config_f = TRUE
prev_value_str = prev_value_str_H2O
curr_value_str = "Dew PT: " & T_DP & " Deg C"
message        = "H2O spn prfrmed."
CallTable System_Operatn_Notes
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
Select Case operatn_failed_cnt
Case 1, 2
prev_value_str     = prev_value_str_H2O
prev_value_str_H2O = "Dew PT: " & T_DP & " Deg C"
curr_value_str     = prev_value_str_H2O
message            = "H2O spn operatn #" & operatn_failed_cnt & " to retry."
Case 3
set_H2O_span_flg    = FALSE
prev_value_str     = prev_value_str_H2O
curr_value_str     = "Ddew PT: " & T_DP & " Deg C"
message            = "H2O spn operatn #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
CallTable System_Operatn_Notes
EndIf
NaN_cnt        = 0
config_ec100_f = FALSE
ElseIf (rst_CO2_zro_coef_flg AND (sonic_irga_raw(8) <> NaN)) Then
If ((CO2_zero_coeff < 0.990) OR (CO2_zero_coeff > 1.011)) Then
If ((ec100_reset_array(5, 2) = ec100_setting_array(5, 2)) AND (ec100_reset_array(5, 2) <> rst_zro_spn_coeff_array(1, 2))) Then
prev_value_str = "CO2 zro coef: " & CO2_zero_coeff
curr_value_str = "CO2 zro coef: " & rst_zro_spn_coeff_array(1, 2)
message        = "Initl CO2zro coef out of rng: Rest to " & rst_zro_spn_coeff_array(1, 2) & "."
ElseIf ((CO2_zero_coeff <> ec100_setting_array(5, 2)) AND (rst_zro_spn_coeff_array(1, 2) = ec100_reset_array(5, 2))) Then
prev_value_str = "CO2 zro coef: " & rst_zro_spn_coeff_array(1, 2)
curr_value_str = "CO2 zro coef: " & rst_zro_spn_coeff_array(1, 2)
message        = "CO2zro coef rest ignored, input out of rng: " & CO2_zero_coeff & "."
CO2_zero_coeff       = rst_zro_spn_coeff_array(1, 2)
rst_CO2_zro_coef_flg = FALSE
CallTable System_Operatn_Notes
ElseIf ((ec100_reset_array(5, 2) <> ec100_setting_array(5, 2)) AND (ec100_reset_array(5, 2) = rst_zro_spn_coeff_array(1, 2))) Then
prev_value_str = "CO2 zro coef: " & CO2_zero_coeff
curr_value_str = "CO2 zro coef: " & rst_zro_spn_coeff_array(1, 2)
message        = "CO2zro failed: Rest coef bck to " & rst_zro_spn_coeff_array(1, 2) & "."
EndIf
EndIf
If ((CO2_zero_coeff >= 0.991) AND (CO2_zero_coeff <= 1.011) AND (CO2_zero_coeff <> ec100_setting_array(5, 2))) Then
prev_value_str = "CO2 zro coef: " & ec100_setting_array(5, 2)
curr_value_str = "CO2 zro coef: " & CO2_zero_coeff
message        = "CO2zro coef rest by user to " & CO2_zero_coeff & "."
rst_zro_spn_coeff_array(1, 2) = CO2_zero_coeff
EndIf
If (rst_CO2_zro_coef_flg) Then
Call Config (rst_zro_spn_coeff_array(1, 1), 1, rst_CO2_zro_coef_flg)
config_type   = "Rest CO2zro coef"
config_status = "Resetting"
If (NOT rst_CO2_zro_coef_flg) Then
config_status      = "Reset"
config_command     = 14
get_ec100_config_f = TRUE
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
curr_value_str     = prev_value_str
Select Case operatn_failed_cnt
Case 1, 2
message = "CO2 zro coef rest #" & operatn_failed_cnt & " to retry."
Case 3
rst_CO2_zro_coef_flg = FALSE
CO2_zero_coeff                = ec100_setting_array(5, 2)
ec100_reset_array(5, 2)       = CO2_zero_coeff
rst_zro_spn_coeff_array(1, 2) = CO2_zero_coeff
prev_value_str = ec100_setting_array(5, 2)
curr_value_str = prev_value_str
message = "CO2 zro coef rest #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
EndIf
CallTable System_Operatn_Notes
NaN_cnt        = 0
config_ec100_f = FALSE
EndIf
ElseIf (rst_CO2_spn_coef_flg AND (sonic_irga_raw(8) <> NaN)) Then
If ((CO2_span_coeff < 0.962) OR (CO2_span_coeff > 1.039)) Then
If ((ec100_reset_array(6, 2) = ec100_setting_array(6, 2)) AND (ec100_reset_array(6, 2) <> rst_zro_spn_coeff_array(2, 2))) Then
prev_value_str = "CO2 spn coef: " & CO2_span_coeff
curr_value_str = "CO2 spn coef: " & rst_zro_spn_coeff_array(2, 2)
message        = "Initl CO2spn coef out of rng: Rest to " & rst_zro_spn_coeff_array(2, 2) & "."
ElseIf ((CO2_span_coeff <> ec100_setting_array(6, 2)) AND (rst_zro_spn_coeff_array(2, 2) = ec100_reset_array(6, 2))) Then
prev_value_str = "CO2 spn coef: " & ec100_setting_array(6, 2)
curr_value_str = "CO2 spn coef: " & ec100_setting_array(6, 2)
message        = "CO2spn coef rest ignored, input out of rng: " & CO2_span_coeff & "."
CO2_span_coeff       = rst_zro_spn_coeff_array(2, 2)
rst_CO2_spn_coef_flg = FALSE
CallTable System_Operatn_Notes
ElseIf ((ec100_reset_array(6, 2) <> ec100_setting_array(6, 2)) AND (ec100_reset_array(6, 2) = rst_zro_spn_coeff_array(2, 2))) Then
prev_value_str = "CO2 spn coef: " & CO2_span_coeff
curr_value_str = "CO2 spn coef: " & rst_zro_spn_coeff_array(2, 2)
message        = "CO2spn failed: Rest coef bck to " & rst_zro_spn_coeff_array(2, 2) & "."
EndIf
EndIf
If ((CO2_span_coeff >= 0.962) AND (CO2_span_coeff <= 1.039) AND (CO2_span_coeff <> ec100_setting_array(6, 2))) Then
prev_value_str = "CO2 spn coef: " & ec100_setting_array(6, 2)
curr_value_str = "CO2 spn coef: " & CO2_span_coeff
message        = "CO2spn coef rest by user to " & CO2_span_coeff & "."
rst_zro_spn_coeff_array(2, 2) = CO2_span_coeff
EndIf
If (rst_CO2_spn_coef_flg) Then
Call Config (rst_zro_spn_coeff_array(2, 1), 1, rst_CO2_spn_coef_flg)
config_type   = "Rest CO2spn coef"
config_status = "Resetting"
If (NOT rst_CO2_spn_coef_flg) Then
config_status      = "Reset"
config_command     = 15
get_ec100_config_f = TRUE
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
curr_value_str     = prev_value_str
Select Case operatn_failed_cnt
Case 1, 2
message = "CO2 spn coef rest #" & operatn_failed_cnt & " to retry."
Case 3
rst_CO2_spn_coef_flg = FALSE
CO2_span_coeff                = ec100_setting_array(6, 2)
ec100_reset_array(6, 2)       = CO2_span_coeff
rst_zro_spn_coeff_array(2, 2) = CO2_span_coeff
prev_value_str = ec100_setting_array(6, 2)
curr_value_str = prev_value_str
message = "CO2 spn coef rest #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
EndIf
CallTable System_Operatn_Notes
NaN_cnt        = 0
config_ec100_f = FALSE
EndIf
ElseIf (rst_H2O_zro_coef_flg AND (sonic_irga_raw(8) <> NaN)) Then
If ((H2O_zero_coeff < 0.979) OR (H2O_zero_coeff > 1.020)) Then
If ((ec100_reset_array(7, 2) = ec100_setting_array(7, 2)) AND (ec100_reset_array(7, 2) <> rst_zro_spn_coeff_array(3, 2))) Then
prev_value_str = "H2O zro coef: " & H2O_zero_coeff
curr_value_str = "H2O zro coef: " & rst_zro_spn_coeff_array(3, 2)
message        = "Initl H2Ozro coef out of rng: Rest to " & rst_zro_spn_coeff_array(3, 2) & "."
ElseIf ((H2O_zero_coeff <> ec100_setting_array(7, 2)) AND (rst_zro_spn_coeff_array(3, 2) = ec100_setting_array(7, 2))) Then
prev_value_str = "H2O zro coef: " & ec100_setting_array(7, 2)
curr_value_str = "H2O zro coef: " & ec100_setting_array(7, 2)
message        = "H2Ozro coef rest ignored, input out of rng: " & H2O_zero_coeff & "."
H2O_zero_coeff       = rst_zro_spn_coeff_array(3, 2)
rst_H2O_zro_coef_flg = FALSE
CallTable System_Operatn_Notes
ElseIf ((ec100_reset_array(7, 2) <> ec100_setting_array(7, 2)) AND (ec100_reset_array(7, 2) = rst_zro_spn_coeff_array(3, 2))) Then
prev_value_str = "H2O zro coef: " & H2O_zero_coeff
curr_value_str = "H2O zro coef: " & rst_zro_spn_coeff_array(3, 2)
message        = "H2Ozro failed: Rest coef bck to " & rst_zro_spn_coeff_array(3, 2) & "."
EndIf
EndIf
If ((H2O_zero_coeff >= 0.979) AND (H2O_zero_coeff <= 1.020) AND (H2O_zero_coeff <> ec100_setting_array(7, 2))) Then
prev_value_str = "H2O zro coef: " & ec100_setting_array(7, 2)
curr_value_str = "H2O zro coef: " & H2O_zero_coeff
message        = "H2Ozro coef rest by user as " & H2O_zero_coeff & "."
rst_zro_spn_coeff_array(3, 2) = H2O_zero_coeff
EndIf
If (rst_H2O_zro_coef_flg) Then
Call Config (rst_zro_spn_coeff_array(3, 1), 1, rst_H2O_zro_coef_flg)
config_type    = "Rest H2Ozro coef"
config_status  = "Resetting"
If (NOT rst_H2O_zro_coef_flg) Then
config_status      = "Reset"
config_command     = 16
get_ec100_config_f = TRUE
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
curr_value_str     = prev_value_str
Select Case operatn_failed_cnt
Case 1, 2
message = "H2O zro coef rest #" & operatn_failed_cnt & " to retry."
Case 3
rst_H2O_zro_coef_flg = FALSE
H2O_zero_coeff                = ec100_setting_array(7, 2)
ec100_reset_array(7, 2)       = H2O_zero_coeff
rst_zro_spn_coeff_array(3, 2) = H2O_zero_coeff
prev_value_str = ec100_setting_array(7, 2)
curr_value_str = prev_value_str
message = "H2O zro coef rest #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
EndIf
CallTable System_Operatn_Notes
NaN_cnt        = 0
config_ec100_f = FALSE
EndIf
ElseIf (rst_H2O_spn_coef_flg AND (sonic_irga_raw(8) <> NaN)) Then
If ((H2O_span_coeff < 0.940) OR (H2O_span_coeff > 1.057)) Then
If ((ec100_reset_array(8, 2) = ec100_setting_array(8, 2)) AND (ec100_reset_array(8, 2) <> rst_zro_spn_coeff_array(4, 2))) Then
prev_value_str = "H2O spn coef: " & H2O_span_coeff
curr_value_str = "H2O spn coef: " & rst_zro_spn_coeff_array(4, 2)
message        = "Intal H2Ospn coef out of rng: Rest to " & rst_zro_spn_coeff_array(4, 2) & "."
ElseIf ((H2O_span_coeff <> ec100_setting_array(8, 2)) AND (rst_zro_spn_coeff_array(4, 2) = ec100_setting_array(8, 2))) Then
prev_value_str = "H2O spn coef: " & ec100_setting_array(8, 2)
curr_value_str = "H2O spn coef: " & ec100_setting_array(8, 2)
message        = "H2Ospn coef rest ignored, input out of rng: " & H2O_span_coeff & "."
H2O_span_coeff       = rst_zro_spn_coeff_array(4, 2)
rst_H2O_spn_coef_flg = FALSE
CallTable System_Operatn_Notes
ElseIf ((ec100_reset_array(8, 2) <> ec100_setting_array(8, 2)) AND (ec100_reset_array(8, 2) = rst_zro_spn_coeff_array(4, 2))) Then
prev_value_str = "H2O spn coef: " & H2O_span_coeff
curr_value_str = "H2O spn coef: " & rst_zro_spn_coeff_array(4, 2)
message        = "H2Ospn failed: Rest coef bck to " & rst_zro_spn_coeff_array(4, 2) & "."
EndIf
EndIf
If ((H2O_span_coeff >= 0.940) AND (H2O_span_coeff <= 1.067) AND (H2O_span_coeff <> ec100_setting_array(8, 2))) Then
prev_value_str = "H2O spn coef: " & ec100_setting_array(8, 2)
curr_value_str = "H2O spn coef: " & H2O_span_coeff
message        = "H2Ospn coef rest by user to " & H2O_span_coeff & "."
rst_zro_spn_coeff_array(4, 2) = H2O_span_coeff
EndIf
If (rst_H2O_spn_coef_flg) Then
Call Config (rst_zro_spn_coeff_array(4, 1), 1, rst_H2O_spn_coef_flg)
config_type    = "Reset H2Ospn coef"
config_status  = "Resetting"
If (NOT rst_H2O_spn_coef_flg) Then
config_status      = "Reset"
config_command     = 17
get_ec100_config_f = TRUE
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
curr_value_str     = prev_value_str
Select Case operatn_failed_cnt
Case 1, 2
message = "H2O spn coef rest #" & operatn_failed_cnt & " to retry."
Case 3
rst_H2O_zro_coef_flg = FALSE
H2O_span_coeff                = ec100_setting_array(8, 2)
ec100_reset_array(8, 2)       = H2O_span_coeff
rst_zro_spn_coeff_array(4, 2) = H2O_span_coeff
prev_value_str = ec100_setting_array(8, 2)
curr_value_str = prev_value_str
message = "H2O spn coef rest #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
EndIf
CallTable System_Operatn_Notes
NaN_cnt        = 0
config_ec100_f = FALSE
EndIf
ElseIf (set_heater_flg AND (sonic_irga_raw(8) <> NaN)) Then
irga_pwr_array(2, 2) = heater_user
Call Config (irga_pwr_array(2, 1), 1, set_heater_flg)
config_type   = "IRGA heating"
config_status = "Swicthing"
Select Case ec100_reset_array (9, 2)
Case H_AUTO
prev_value_str = "Auto"
Case H_MAX
prev_value_str = "Max"
Case H_OFF
prev_value_str = "Off"
EndSelect
If (NOT set_heater_flg) Then
config_status      = "Swicthed"
config_command     = 18
get_ec100_config_f = TRUE
Select Case heater_user
Case H_AUTO
curr_value_str = "Auto"
Case H_MAX
curr_value_str = "Max"
Case H_OFF
curr_value_str = "Off"
EndSelect
message = "Heating optn switchd."
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
curr_value_str     = prev_value_str
Select Case operatn_failed_cnt
Case 1, 2
message        = "Switch heating operatn #" & operatn_failed_cnt & " to retry."
Case 3
set_heater_flg = FALSE
message        = "Switch heating operatn #3 failed: aborted."
operatn_failed_cnt = 0
EndSelect
EndIf
CallTable System_Operatn_Notes
NaN_cnt        = 0
config_ec100_f = FALSE
EndIf
If (get_ec100_config_f AND (sonic_irga_raw(8) <> NaN)) Then
config_type    = "Config acqustn"
config_status  = "Acquiring"
curr_value_str = "Acquirng reconfgurtn"
ec100_set_reset_f = TRUE
Call Config (ec100_setting_array(1, 1), 11, get_ec100_config_f)
Select Case config_command
Case 2
prev_value_str = "Swtch press optn"
Case 14
prev_value_str = "Rest CO2zro coef"
Case 15
prev_value_str = "Rest CO2spn coef"
Case 16
prev_value_str = "Rest H2Ozro coef"
Case 17
prev_value_str = "Rest H2Ospn coef"
Case 18
prev_value_str = "Swtch IRGA heatng"
Case 21
prev_value_str = "Swtch IRGA pwr"
Case 25
prev_value_str = "Swtch shdw crrctn"
Case 111
prev_value_str = "CO2/H2O zro"
Case 112
prev_value_str = "CO2 spn"
Case 113
prev_value_str = "H2O spn"
Case 1000
prev_value_str = "Reconfig EC100"
EndSelect
If (operatn_failed_cnt > 0) Then
prev_value_str = curr_value_str
EndIf
If (NOT get_ec100_config_f) Then
config_status  = "Acquird"
message        = "EC100 reocnfgurtn Acqurd."
CallTable System_Operatn_Notes
config_status  = "Verifying"
prev_value_str = "Acquirng reconfgurtn"
curr_value_str = "Verfctn"
Select Case config_command
Case 2
press_source            = ec100_setting_array(2, 2)
ec100_reset_array(2, 2) = ec100_setting_array(2, 2)
config_status           = "Verified"
message                 = "Press optn swtch: Verifd."
Case 14
CO2_zero_coeff          = ec100_setting_array(5, 2)
ec100_reset_array(5, 2) = ec100_setting_array(5, 2)
config_status           = "Verified"
message                 = "CO2zro coef rest: Verifd."
Case 15
CO2_span_coeff          = ec100_setting_array(6, 2)
ec100_reset_array(6, 2) = ec100_setting_array(6, 2)
config_status           = "Verified"
message                 = "CO2spn coef rest: Verifd."
Case 16
H2O_zero_coeff          = ec100_setting_array(7, 2)
ec100_reset_array(7, 2) = ec100_setting_array(7, 2)
config_status           = "Verified"
message                 = "H2Ozro coef rest: Verifd."
Case 17
H2O_span_coeff          = ec100_setting_array(8, 2)
ec100_reset_array(8, 2) = ec100_setting_array(8, 2)
config_status           = "Verified"
message                 = "H2Ospn coef rest: Verifd."
Case 18
heater_actual            = ec100_setting_array(9,  2)
heater_user              = heater_actual
ec100_reset_array(9,  2) = ec100_setting_array(9,  2)
config_status            = "Verified"
message                  = "Heater optn swtch: Verifd."
Case 21
heater_actual            = ec100_setting_array(9,  2)
ec100_reset_array(9,  2) = ec100_setting_array(9,  2)
irga_power               = ec100_setting_array(10, 2)
ec100_reset_array(10, 2) = ec100_setting_array(10, 2)
config_status            = "Verified"
message                  = "Pwr swtch: Verifd."
Case 25
shadow_corr              = ec100_setting_array(11, 2)
ec100_reset_array(11, 2) = ec100_setting_array(11, 2)
config_status            = "Verified"
message                  = "Shdw crrctn swtch: Verifd."
Case 111
CO2_zero_coeff       = ec100_setting_array (5, 2)
rst_CO2_zro_coef_flg = ((CO2_zero_coeff < 0.990) OR (CO2_zero_coeff > 1.011))
If (rst_CO2_zro_coef_flg) Then
config_status = "Unsccssfl"
message       = "CO2zro coef out of rng: To reset."
Else
config_status = "Zeroed"
message       = "CO2 Zro: Verifd."
rst_zro_spn_coeff_array (1, 2) = ec100_setting_array(5, 2)
ec100_reset_array(5, 2)        = ec100_setting_array(5, 2)
EndIf
CallTable System_Operatn_Notes
H2O_zero_coeff       = ec100_setting_array(7, 2)
rst_H2O_zro_coef_flg = ((H2O_zero_coeff < 0.979) OR (H2O_zero_coeff > 1.020))
If (rst_H2O_zro_coef_flg) Then
config_status = "Unsccssfl"
message       = "H2Ozro coef out of rng: To reset."
Else
config_status = "Zeroed"
message       = "H2O Zro: Verifd."
rst_zro_spn_coeff_array (3, 2) = ec100_setting_array(7, 2)
ec100_reset_array(7, 2)        = ec100_setting_array(7, 2)
EndIf
Case 112
CO2_span_coeff       = ec100_setting_array(6, 2)
rst_CO2_spn_coef_flg = ((CO2_span_coeff < 0.962) OR (CO2_span_coeff > 1.039))
If (rst_CO2_spn_coef_flg) Then
config_status = "Unsccssfl"
message       = "CO2spn coef out of rng: To reset."
Else
config_status = "Spanned"
message       = "CO2 spn: Verifd."
rst_zro_spn_coeff_array (2, 2) = ec100_setting_array(6, 2)
ec100_reset_array(6, 2)        = ec100_setting_array(6, 2)
EndIf
Case 113
H2O_span_coeff       = ec100_setting_array(8, 2)
rst_H2O_spn_coef_flg = ((H2O_span_coeff < 0.940) OR (H2O_span_coeff > 1.057))
If (rst_H2O_spn_coef_flg) Then
config_status = "Unsccssfl"
message       = "H2Ospn coef out of rng: To reset."
Else
config_status = "Spanned"
message       = "H2O spn: Verifd."
rst_zro_spn_coeff_array (4, 2) = ec100_setting_array(8, 2)
ec100_reset_array(8, 2)        = ec100_setting_array(8, 2)
EndIf
Case 1000
config_status = "Reconfgrd"
message       = "Reconfgrtn: Verifd."
For i = 1 To 11
ec100_reset_array(i, 2) = ec100_setting_array(i, 2)
Next
press_source = ec100_setting_array(2,  2)
For i = 1 To 4
zro_spn_coef_array(i)         = ec100_setting_array(4 + i, 2)
rst_zro_spn_coeff_array(i, 2) = zro_spn_coef_array(i)
Next i
heater_actual = ec100_setting_array(9, 2)
irga_power    = ec100_setting_array(10, 2)
shadow_corr   = ec100_setting_array(11, 2)
EndSelect
CallTable Config_Setting_Notes
CallTable System_Operatn_Notes
operatn_failed_cnt = 0
Else
operatn_failed_cnt = operatn_failed_cnt + 1
Select Case operatn_failed_cnt
Case 1, 2, 3
message = "Verifctn failed: #" & operatn_failed_cnt & "."
CallTable System_Operatn_Notes
Case Is > 3
If ((operatn_failed_cnt = 4) OR TimeIntoInterval(1, 30, min)) Then
message = "Verifctn failed: #" & operatn_failed_cnt & ", chck EC100 (e.g., PWR)."
CallTable System_operatn_Notes
EndIf
EndSelect
EndIf
NaN_cnt        = 0
config_ec100_f = FALSE
EndIf
EndSelect
diag_irga_tmp      = IIF((sonic_irga_raw(8) <> NaN) AND (sonic_irga_raw(8) <> -1), sonic_irga_raw(8), &h4ffefb)
irga_startup_bit   = diag_irga_tmp AND &h000004
irga_off_bit       = diag_irga_tmp AND &h000100
irga_actual_pwr_on = (irga_off_bit  =  &h000000)
If (NOT ((sonic_irga_raw(8) <> NaN) AND (sonic_irga_raw(8) <> -1))) Then
If (irga_vlt_low_auto_off) Then
irga_off_bit       = &h000100
irga_actual_pwr_on = FALSE
EndIf
EndIf
#If (SENSOR_TE525) Then
PulseCount (P, 1, TE525_PULSE_INPUT, 1, 0, TE525_MULT, 0)
P_cumul_win_interval += P
#EndIf
If (scan_count >= (OFFSET + MAX_LAG)) Then
GetRecord (dly_data_out(1),delay_3d, EC100_REC_BCK)
Ts = dly_data_out(4)
Ts_K = Ts + T_0C_K
Move (Ux, 3, dly_data_out(1), 3)
diag_sonic = dly_data_out(5)
sonic_disable_f = (diag_sonic <> 0)
U_rslt = SQR(Ux*Ux + Uy*Uy + Uz*Uz)
#If (CSAT3A_EC150) Then
#If (CSAT_TYP_3AH) Then
AvgRun (U_total_rung_mean, 1, U_rslt, (SLW_SCN_INTV/SCN_INTV))
#EndIf
#EndIf
diag_sonic_tmp = IIF((diag_sonic <> NAN) AND (diag_sonic <> -1), diag_sonic, &h3f)
diag_sonic_aggregate = diag_sonic_aggregate OR diag_sonic_tmp
mask = &h1
For i = 1 To 6
diag_bits_sonic(i) = diag_sonic_tmp AND mask
mask = mask*2
Next i
CallTable comp_cov_3d_5min
CallTable comp_cov_3d
If (comp_cov_3d_5min.Output(1, 1)) Then
GetRecord (Ux_Avg_SST, comp_cov_3d_5min, 1)
If (NOT Planar_Fit_flg) Then
gamma_5min = WD_SONIC_SST
alpha_5min = -ATN2(Uz_Avg_SST, SQR(Ux_Avg_SST*Ux_Avg_SST + Uy_Avg_SST*Uy_Avg_SST))
Call Rotation12_Momentum (alpha_5min, gamma_5min, _
Ux_Avg_SST, Uy_Avg_SST, Uz_Avg_SST, Ux_Var_SST, Uy_Var_SST, Uz_Var_SST, UxUy_Cov_SST, UxUz_Cov_SST, UyUz_Cov_SST, _
U_SST,      V_SST,      W_SST,      U_Var_SST,  V_Var_SST,  W_Var_SST,  UV_Cov_SST,   UW_Cov_SST,   VW_Cov_SST)
Call Rotation12_Scalar_Covariance (alpha_5min, gamma_5min, _
TsUx_Cov_SST,     TsUy_Cov_SST,     TsUz_Cov_SST, _
UT_SONIC_Cov_SST, VT_SONIC_Cov_SST, WT_SONIC_Cov_SST)
Else
If (WD_SONIC_SST <= 60)      Then
alpha_5min = alpha_PF_60_300
beta_5min  = beta_PF_60_300
ElseIf (WD_SONIC_SST <= 170) Then
alpha_5min = alpha_PF_60_170
beta_5min  = beta_PF_60_170
ElseIf (WD_SONIC_SST <= 190)  Then
alpha_5min = alpha_PF_170_190
beta_5min  = beta_PF_170_190
ElseIf (WD_SONIC_SST <= 300)  Then
alpha_5min = alpha_PF_190_300
beta_5min  = beta_PF_190_300
Else
alpha_5min = alpha_PF_60_300
beta_5min = beta_PF_60_300
EndIf
Call Rotation23_Momentum (alpha_5min, beta_5min, _
Ux_Avg_SST, Uy_Avg_SST, Uz_Avg_SST, Ux_Var_SST, Uy_Var_SST, Uz_Var_SST, UxUy_Cov_SST, UxUz_Cov_SST, UyUz_Cov_SST, _
U_SST,      V_SST,      W_SST,      U_Var_SST,  V_Var_SST,  W_Var_SST,  UV_Cov_SST,   UW_Cov_SST,   VW_Cov_SST)
Call Rotation23_Scalar_Covariance (alpha_5min, beta_5min, _
TsUx_Cov_SST,     TsUy_Cov_SST,     TsUz_Cov_SST, _
UT_SONIC_Cov_SST, VT_SONIC_Cov_SST, WT_SONIC_Cov_SST)
EndIf
If ((UW_Cov_SST <> NaN) AND (VW_Cov_SST <> NaN) AND (WT_SONIC_Cov_SST <> NaN)) Then
RN_UW_cov       += UW_Cov_SST
RN_VW_cov       += VW_Cov_SST
RN_WT_SONIC_cov += WT_SONIC_Cov_SST
nmbr_interval_qc_csat += 1
EndIf
EndIf
If (comp_cov_3d.Output(1, 1) AND comp_cov_3d_5min.Output(1, 1))Then
GetRecord (Ux_Avg, comp_cov_3d, 1)
T_SONIC       = Ts_Avg
Ts_SIGMA      = SQR(Ts_SIGMA)
T_SONIC_SIGMA = Ts_SIGMA
If (NOT Planar_Fit_flg) Then
gamma = WD_SONIC
alpha = -ATN2(Uz_Avg, SQR(Ux_Avg*Ux_Avg + Uy_Avg*Uy_Avg))
Call Rotation12_Momentum (alpha, gamma, _
Ux_Avg, Uy_Avg, Uz_Avg, Ux_SIGMA, Uy_SIGMA, Uz_SIGMA, UxUy_Cov, UxUz_Cov, UyUz_Cov, _
U,      V,      W,      U_SIGMA,  V_SIGMA,  W_SIGMA,  UV_Cov,   UW_Cov,   VW_Cov)
Call Rotation12_Scalar_Covariance (alpha, gamma, _
TsUx_Cov,     TsUy_Cov,     TsUz_Cov, _
UT_SONIC_Cov, VT_SONIC_Cov, WT_SONIC_Cov)
Else
If (WD_SONIC <= 60.0)      Then
alpha = alpha_PF_60_300
beta  = beta_PF_60_300
ElseIf (WD_SONIC <= 170.0) Then
alpha = alpha_PF_60_170
beta  = beta_PF_60_170
ElseIf (WD_SONIC < 190.0)  Then
alpha = alpha_PF_170_190
beta  = beta_PF_170_190
ElseIf (WD_SONIC < 300.0)  Then
alpha = alpha_PF_190_300
beta  = beta_PF_190_300
Else
alpha = alpha_PF_60_300
beta  = beta_PF_60_300
EndIf
Call Rotation23_Momentum (alpha, beta, _
Ux_Avg, Uy_Avg, Uz_Avg, Ux_SIGMA, Uy_SIGMA, Uz_SIGMA, UxUy_Cov, UxUz_Cov, UyUz_Cov, _
U,      V,      W,      U_SIGMA,  V_SIGMA,  W_SIGMA,  UV_Cov,   UW_Cov,   VW_Cov)
Call Rotation23_Scalar_Covariance (alpha, beta, _
TsUx_Cov,     TsUy_Cov,     TsUz_Cov, _
UT_SONIC_Cov, VT_SONIC_Cov, WT_SONIC_Cov)
EndIf
Ux_SIGMA = SQR(Ux_SIGMA)
Uy_SIGMA = SQR(Uy_SIGMA)
Uz_SIGMA = SQR(Uz_SIGMA)
WD = (sonic_azimuth - WD_SONIC + 360) MOD 360
TKE = 0.5*(U_SIGMA + V_SIGMA + W_SIGMA)
U_SIGMA = SQR(U_SIGMA)
V_SIGMA = SQR(V_SIGMA)
W_SIGMA = SQR(W_SIGMA)
USTAR_R = SQR(SQR((UW_Cov*UW_Cov) + (VW_Cov*VW_Cov)))
MO_LENGTH = -USTAR_R*USTAR_R*USTAR_R*(T_SONIC + T_0C_K)/(k*g0*WT_SONIC_Cov)
ZL = z/MO_LENGTH
FreqFactor_UW_VW_Prev = 1 - 2*ACCURACY_FREQ_FACTOR
Call  FreqFactorCSAT_uw_vw_BA_LA (z, ZL, WS_RSLT, FreqFactor_UW_VW)
UW_Cov_fc = FreqFactor_UW_VW * UW_Cov
VW_Cov_fc = FreqFactor_UW_VW * VW_Cov
USTAR = SQR(SQR ((UW_Cov_fc*UW_Cov_fc) + (VW_Cov_fc*VW_Cov_fc)))
FreqFactor_WT_SONIC_Prev = 1 - 2*ACCURACY_FREQ_FACTOR
Call  FreqFactorCSAT_wTs_BA_LA (z, ZL, WS_RSLT, tran_func_LA_data_Dijk(1,1), FreqFactor_WT_SONIC)
WT_SONIC_Cov_fc = FreqFactor_WT_SONIC * WT_SONIC_Cov
MO_LENGTH = -USTAR*USTAR*USTAR*(T_SONIC + T_0C_K)/(k*g0*WT_SONIC_Cov_fc)
ZL_prev = ZL
ZL      = z/MO_LENGTH
iteration_FreqFactor = 1
While (((ABS (FreqFactor_UW_VW_Prev -FreqFactor_UW_VW) >= ACCURACY_FREQ_FACTOR) OR _
(ABS (FreqFactor_WT_SONIC_Prev - FreqFactor_WT_SONIC) >= ACCURACY_FREQ_FACTOR)) AND (iteration_FreqFactor <= 10))
ZL_prev                  = ZL
FreqFactor_UW_VW_Prev    = FreqFactor_UW_VW
FreqFactor_WT_SONIC_Prev = FreqFactor_WT_SONIC
Call  FreqFactorCSAT_uw_vw_BA_LA (z, ZL, WS_RSLT, FreqFactor_UW_VW)
UW_Cov_fc = FreqFactor_UW_VW * UW_Cov
VW_Cov_fc = FreqFactor_UW_VW * VW_Cov
USTAR = SQR(SQR (UW_Cov_fc*UW_Cov_fc + VW_Cov_fc*VW_Cov_fc))
Call  FreqFactorCSAT_wTs_BA_LA (z, ZL, WS_RSLT, tran_func_LA_data_Dijk(1,1), FreqFactor_WT_SONIC)
WT_SONIC_Cov_fc = FreqFactor_WT_SONIC * WT_SONIC_Cov
MO_LENGTH = -USTAR*USTAR*USTAR*(T_SONIC + T_0C_K)/(k*g0*WT_SONIC_Cov_fc)
ZL = z/MO_LENGTH
iteration_FreqFactor += 1
Wend
RN_UW_VW_cov = ABS(((RN_UW_cov + RN_VW_cov)/nmbr_interval_qc_csat - UW_Cov - VW_Cov)/(UW_Cov + VW_Cov))
RN_UW_cov = 0
RN_VW_cov = 0
Call Data_Quality_SSITC_w_WndDir_Momentum  (Planar_Fit_flg, ZL, U_SIGMA, W_SIGMA, USTAR, latitude, WD_SONIC, RN_UW_VW_cov, TAU_QC)
Call Data_Quality_SSITC_wo_WndDir_Momentum (Planar_Fit_flg, ZL, U_SIGMA, W_SIGMA, USTAR, latitude,           RN_UW_VW_cov, TAU_SSITC_TEST)
If ((ABS(ZL) < 0.02) AND (roughness_user = 0) AND (WS_RSLT > 3.0) AND (TAU_QC <= 6.0)) Then z0 = z*EXP(-k*WS_RSLT/USTAR)
If (WD_SONIC <= 60.0) Then
FETCH_INTRST = fetch_intrst_60_300
ElseIf (WD_SONIC <= 170.0) Then
FETCH_INTRST = fetch_intrst_60_170
ElseIf (WD_SONIC < 190.0)  Then
FETCH_INTRST = fetch_intrst_170_190
ElseIf (WD_SONIC < 300.0)  Then
FETCH_INTRST = fetch_intrst_190_300
Else
FETCH_INTRST = fetch_intrst_60_300
EndIf
Call Planetary_Boundary_Layer_Height (MO_LENGTH, PBLH_F)
If ((ZL >= -200.0) AND (ZL <= 1.0) AND (USTAR >= 0.2) AND (z >= 1.0)) Then
FP_EQUATION = "Kljun et al"
Call FootprintCharacteristics_Kljun (USTAR, W_SIGMA, z, MO_LENGTH, z0, FETCH_INTRST, FP_FETCH_INTRST, FETCH_MAX, FETCH_90, FETCH_80, FETCH_70)
Else
FP_EQUATION = "KormannMeixner"
Call FootprintCharacteristics_KormannMeixner (USTAR, z, ZL, WS_RSLT, FETCH_INTRST, FP_FETCH_INTRST, FETCH_MAX, FETCH_90, FETCH_80, FETCH_70)
EndIf
FETCH_FILTER = - ((WD > fetch_wd_thrshold_low) AND (WD < fetch_wd_thrshold_top) AND (WD <> NaN))
EndIf
mask = &h1
For i = MAX_LAG To - MAX_LAG Step -1
array_index = MAX_LAG + 1 - i
GetRecord (dly_data_out(1), delay_cs, (EC100_REC_BCK + i))
If (i = 0) Then
Move (CO2_density, 7, dly_data_out(1), 7)
Select Case CO2_fast_tmpr
Case True
CO2_density_fast_tmpr = CO2_density
CO2_density_slow_tmpr = dly_data_out(8)
Case FALSE
CO2_density_fast_tmpr = dly_data_out(8)
CO2_density_slow_tmpr = CO2_density
EndSelect
EndIf
diag_irga_tmp = IIF((dly_data_out(3) <> NAN) AND (dly_data_out(3) <> -1), dly_data_out(3), &h3fffff)
irga_bad_data_flg_array(array_index) = mask AND diag_irga_tmp
If (NOT sonic_disable_f) AND (NOT irga_bad_data_flg_array(array_index)) Then
T_tmp = Tc_from_Ts_H2O_P (Ts_K, dly_data_out(2), dly_data_out(5))
ElseIf (irga_bad_data_flg_array(array_index) AND (NOT (diag_irga_tmp AND &H400)))
T_tmp = dly_data_out(4) + T_0C_K
ElseIf (irga_bad_data_flg_array(array_index) AND (diag_irga_tmp AND &H400))
T_tmp = NaN
ElseIf (sonic_disable_f) AND (NOT irga_bad_data_flg_array(array_index))
T_tmp = dly_data_out(4) + T_0C_K
EndIf
divisor_wet = dly_data_out(5)/(R*T_tmp)
Move (cov_array_CO2(array_index, 1), 1, dly_data_out(1),1)
Move (cov_array_CO2(array_index, 2), 3, Ux, 3)
CO2_bad_rng_sig_array (array_index) = ((dly_data_out(6) < CO2_SIG_STRGTH_THRESHOLD) OR (dly_data_out(1) <0) OR (dly_data_out(1) > CO2_RNG_TOP_LIMIT))
cov_array_CO2(array_index, 5)       = dly_data_out(1)/(0.04401*divisor_wet)
Move (cov_array_H2O(array_index, 1), 1, dly_data_out(2),1)
Move (cov_array_H2O(array_index, 2), 3, Ux, 3)
H2O_bad_rng_sig_array (array_index) = ((dly_data_out(7) < H2O_SIG_STRGTH_THRESHOLD) OR (dly_data_out(2) <0) OR (dly_data_out(2) > H2O_RNG_TOP_LIMIT))
cov_array_H2O(array_index, 5)       = dly_data_out(2)/(0.01801582*divisor_wet)
Next i
CallTable comp_cov_CO2
CallTable comp_cov_H2O
diag_irga_tmp = IIF((diag_irga <> NAN) AND (diag_irga <> -1),diag_irga, &h3fffff)
diag_irga_aggregate = diag_irga_aggregate OR diag_irga_tmp
For i = 1 To 22
diag_bits_irga(i) = diag_irga_tmp AND mask
mask = mask*2
Next i
irga_disable_f = irga_bad_data_f
CallTable comp_cov_cs_5min
Call dewpoint_from_H2O_T_P (T_amb, H2O_density, press_amb, e_sat_amb, e_amb, RH_amb, rho_d_amb, rho_a_amb, T_DP_amb)
If ((NOT sonic_disable_f) AND (NOT irga_disable_f)) Then
Tc_K = Tc_from_Ts_H2O_P (Ts_K, H2O_density, press_amb)
ElseIf (NOT irga_tec_tmpr_f)                        Then
Tc_K = T_amb + T_0C_K
Else
Tc_K = NaN
EndIf
Tc = Tc_K - T_0C_K
Call dewpoint_from_H2O_T_P (Tc, H2O_density, press_amb, e_sat, e, RH, rho_d, rho_a, T_DP)
divisor_dry = (press_amb/(R*Tc_K))-(H2O_density/18.01528)
CO2_mixratio = CO2_density/(0.04401*divisor_dry)
H2O_mixratio = H2O_density/(0.01802*divisor_dry)
divisor_dry = (press_amb/(R*(T_amb + T_0C_K)))-(H2O_density/18.01528)
CO2_mixratio_kd = CO2_density/(0.04401*divisor_dry)
H2O_mixratio_kd = H2O_density/(0.01802*divisor_dry)
CallTable comp_mean
#If (SENSOR_T_RH) Then
Call dewpoint_from_RH_T_P (T_probe, RH_probe, press_amb, e_sat_probe, e_probe, H2O_density_probe, rho_d_probe, T_DP_probe)
CallTable stats_tmpr_rh
#EndIf
If (comp_cov_cs_5min.Output(1, 1)) Then
GetRecord (CO2_density_var_SST, comp_cov_cs_5min, 1)
If (NOT Planar_Fit_flg) Then
Call Rotation12_Scalar_Covariance (alpha_5min, gamma_5min, _
UxCO2_Cov_SST, UyCO2_Cov_SST, UzCO2_Cov_SST, _
UCO2_Cov_SST,  VCO2_Cov_SST,  WCO2_Cov_SST)
Call Rotation12_Scalar_Covariance (alpha_5min, gamma_5min, _
UxH2O_Cov_SST, UyH2O_Cov_SST, UzH2O_Cov_SST, _
UH2O_Cov_SST,  VH2O_Cov_SST,  WH2O_Cov_SST)
Else
Call Rotation23_Scalar_Covariance (alpha_5min, beta_5min, _
UxCO2_Cov_SST, UyCO2_Cov_SST, UzCO2_Cov_SST, _
UCO2_Cov_SST,  VCO2_Cov_SST,  WCO2_Cov_SST)
Call Rotation23_Scalar_Covariance (alpha_5min, beta_5min, _
UxH2O_Cov_SST, UyH2O_Cov_SST, UzH2O_Cov_SST, _
UH2O_Cov_SST,  VH2O_Cov_SST,  WH2O_Cov_SST)
EndIf
If ((WCO2_Cov_SST <> NaN) AND (WH2O_Cov_SST <> NaN)) Then
RN_WCO2_Cov += WCO2_Cov_SST
RN_WH2O_Cov += WH2O_Cov_SST
nmbr_interval_qc_irga += 1
EndIf
EndIf
If (comp_cov_CO2.Output(1,1) AND comp_cov_H2O.Output(1,1) AND comp_mean.Output(1,1) AND comp_cov_cs_5min.Output(1, 1)) Then
GetRecord (CO2_Avg_lag_b5, comp_cov_CO2, 1)
GetRecord (H2O_Avg_lag_b5, comp_cov_H2O, 1)
GetRecord (TA_1_1_1,       comp_mean,    1)
VPD = 10.0*(e_sat_Avg - e_Avg)
#If (SENSOR_T_RH) Then
If (stats_tmpr_rh.Output(1,1)) Then
GetRecord (TA_1_1_3, stats_tmpr_rh, 1)
rho_a_probe_Avg = (rho_d_probe_Avg + H2O_density_probe_Avg)/1000.0
EndIf
#EndIf
WCO2_Cov_major_sign = 0.0
For i = 1 To (2* MAX_LAG + 1)
array_index = 7*(i-1) + 5
If (NOT Planar_Fit_flg) Then
Call Rotation12_Scalar_Covariance (alpha, gamma, _
Cov_out_CO2(array_index), Cov_out_CO2(array_index + 1), Cov_out_CO2(array_index + 2), _
UCO2_VCO2_Cov_lag(i, 1),  UCO2_VCO2_Cov_lag(i, 2),      WCO2_Cov_lag(i))
Else
Call Rotation23_Scalar_Covariance (alpha, beta, _
Cov_out_CO2(array_index), Cov_out_CO2(array_index + 1), Cov_out_CO2(array_index + 2), _
UCO2_VCO2_Cov_lag(i, 1),  UCO2_VCO2_Cov_lag(i, 2),      WCO2_Cov_lag(i))
EndIf
WCO2_Cov_major_sign += WCO2_Cov_lag(i)
Next i
Call Separation_Lag_Lateral_Distances (WD_SONIC, separation_x_irga, separation_y_irga, separation_lat_dist_irga, separation_lag_dist_irga)
separation_lag_scan_irga = 1000*(separation_lag_dist_irga/WS_RSLT)/SCN_INTV
WCO2_Cov = NaN
Select Case WCO2_Cov_major_sign
Case Is >= 0.0
If (separation_lag_scan_irga <= - MAX_LAG)        Then
MaxSpa (WCO2_Cov, 2, WCO2_Cov_lag(1))
ElseIf separation_lag_scan_irga < - (MAX_LAG - 1) Then
MaxSpa (WCO2_Cov, 3, WCO2_Cov_lag(1))
ElseIf separation_lag_scan_irga < - (MAX_LAG - 2) Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(1))
ElseIf separation_lag_scan_irga < - (MAX_LAG - 3) Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(2))
lag_irga = lag_irga + 1
ElseIf separation_lag_scan_irga < - (MAX_LAG - 4) Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(3))
lag_irga = lag_irga + 2
ElseIf separation_lag_scan_irga < (MAX_LAG - 5)   Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(4))
lag_irga = lag_irga + 3
ElseIf separation_lag_scan_irga = 0               Then
#If (IRGASON) Then
WCO2_Cov = WCO2_Cov_lag(MAX_LAG + 1)
lag_irga = MAX_LAG + 1
#Else
MaxSpa (WCO2_Cov, 3, WCO2_Cov_lag(5))
lag_irga = lag_irga + (MAX_LAG -1)
#EndIf
ElseIf separation_lag_scan_irga < 1               Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG))
lag_irga = lag_irga + (MAX_LAG - 1)
ElseIf separation_lag_scan_irga < 2               Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG + 1))
lag_irga = lag_irga + MAX_LAG
ElseIf separation_lag_scan_irga < 3               Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG + 2))
lag_irga = lag_irga + (MAX_LAG  + 1)
ElseIf separation_lag_scan_irga < 4               Then
MaxSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG + 3))
lag_irga = lag_irga + (MAX_LAG  + 2)
ElseIf separation_lag_scan_irga < 5                Then
MaxSpa (WCO2_Cov, 3, WCO2_Cov_lag(MAX_LAG + 4))
lag_irga = lag_irga + (MAX_LAG  + 3)
Else
MaxSpa (WCO2_Cov, 2, WCO2_Cov_lag(2*MAX_LAG)
lag_irga = lag_irga + (2*MAX_LAG -1)
EndIf
Case Is < 0.0
If (separation_lag_scan_irga <= - MAX_LAG)       Then
MinSpa (WCO2_Cov, 2, WCO2_Cov_lag(1))
ElseIf separation_lag_scan_irga < - (MAX_LAG - 1) Then
MinSpa (WCO2_Cov, 3, WCO2_Cov_lag(1))
ElseIf separation_lag_scan_irga < - (MAX_LAG - 2) Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(1))
ElseIf separation_lag_scan_irga < - (MAX_LAG - 3) Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(2))
lag_irga = lag_irga + 1
ElseIf separation_lag_scan_irga < - (MAX_LAG - 4) Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(3))
lag_irga = lag_irga + 2
ElseIf separation_lag_scan_irga < (MAX_LAG - 5)   Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(4))
lag_irga = lag_irga + 3
ElseIf separation_lag_scan_irga = 0               Then
#If (IRGASON) Then
WCO2_Cov = WCO2_Cov_lag(MAX_LAG + 1)
lag_irga = MAX_LAG + 1
#Else
MinSpa (WCO2_Cov, 3, WCO2_Cov_lag(5))
lag_irga = lag_irga + (MAX_LAG -1)
#EndIf
ElseIf separation_lag_scan_irga < 1                Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG))
lag_irga = lag_irga + (MAX_LAG - 1)
ElseIf separation_lag_scan_irga < 2                Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG + 1))
lag_irga = lag_irga + MAX_LAG
ElseIf separation_lag_scan_irga < 3                Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG + 2))
lag_irga = lag_irga + MAX_LAG + 1
ElseIf separation_lag_scan_irga < 4                Then
MinSpa (WCO2_Cov, 4, WCO2_Cov_lag(MAX_LAG + 3))
lag_irga = lag_irga + MAX_LAG + 2
ElseIf separation_lag_scan_irga < 5                Then
MinSpa (WCO2_Cov, 3, WCO2_Cov_lag(MAX_LAG + 4))
lag_irga = lag_irga + MAX_LAG + 3
Else
MinSpa (WCO2_Cov, 2, WCO2_Cov_lag(2*MAX_LAG))
lag_irga = lag_irga + (2*MAX_LAG -1)
EndIf
EndSelect
If (WCO2_Cov = NaN) Then lag_irga = MAX_LAG + 1
array_index = 7*(lag_irga - 1) + 1
Move (CO2, 7, Cov_out_CO2(array_index), 7)
CO2_SIGMA         = SQR(CO2_SIGMA)
CO2_density_SIGMA = SQR(CO2_density_SIGMA)
UCO2_Cov = UCO2_VCO2_Cov_lag(lag_irga, 1)
VCO2_Cov = UCO2_VCO2_Cov_lag(lag_irga, 2)
Move (H2O, 7, Cov_out_H2O(array_index), 7)
H2O_SIGMA         = SQR(H2O_SIGMA)
H2O_density_SIGMA = SQR(H2O_density_SIGMA)
If (NOT Planar_Fit_flg) Then
Call Rotation12_Scalar_Covariance (alpha, gamma, _
UxH2O_Cov, UyH2O_Cov, UzH2O_Cov, _
UH2O_Cov,  VH2O_Cov,  WH2O_Cov)
ElseIf (Planar_Fit_flg) Then
Call Rotation23_Scalar_Covariance (alpha, beta, _
UxH2O_Cov, UyH2O_Cov, UzH2O_Cov, _
UH2O_Cov,  VH2O_Cov,  WH2O_Cov)
EndIf
lag_irga  = lag_irga - (MAX_LAG + 1)
Call FreqFactorCSOPEC_wco2_wh2o_BA_LA_SP (z, ZL, WS_RSLT, separation_lat_dist_irga, FreqFactor_WCO2_WH2O)
WCO2_Cov_fc = FreqFactor_WCO2_WH2O*WCO2_Cov
WH2O_Cov_fc = FreqFactor_WCO2_WH2O*WH2O_Cov
#If (NOT (SENSOR_T_RH )) Then
TAU = -rho_a_Avg*USTAR*USTAR
WT_SONIC_Cov_fc_SND = WT_SONIC_Cov_fc*(1- 0.51*(H2O_density_Avg/(1e3*rho_a_Avg)))-0.51*(T_SONIC + T_0C_K)*WH2O_Cov_fc/(1e3*rho_a_Avg)
Cp = (Cpd*rho_d_Avg + Cpw*H2O_density_Avg)/(rho_d_Avg + H2O_density_Avg)
H  = Cp*rho_a_Avg*WT_SONIC_Cov_fc_SND
#Else
TAU = -rho_a_probe_Avg*USTAR*USTAR
WT_SONIC_Cov_fc_SND = WT_SONIC_Cov_fc*(1- 0.51*(H2O_density_probe_Avg/(1e3*rho_a_probe_Avg)))-0.51*(T_SONIC + T_0C_K)*WH2O_Cov_fc/(1e3*rho_a_probe_Avg)
Cp = (Cpd*rho_d_probe_Avg + Cpw*H2O_density_probe_Avg)/(rho_d_probe_Avg + H2O_density_probe_Avg)
H  = Cp*rho_a_probe_Avg*WT_SONIC_Cov_fc_SND
If ((rho_a_probe_Avg = NaN) OR (H2O_density_probe_Avg = NaN) OR (rho_d_probe_Avg = NaN)) Then
TAU = -rho_a_Avg*USTAR*USTAR
WT_SONIC_Cov_fc_SND = WT_SONIC_Cov_fc*(1- 0.51*(H2O_density_Avg/(1e3*rho_a_Avg))) - 0.51*(T_SONIC + T_0C_K)*WH2O_Cov_fc/(1e3*rho_a_Avg)
Cp = (Cpd*rho_d_Avg + Cpw*H2O_density_Avg)/(rho_d_Avg + H2O_density_Avg)
H  = Cp*rho_a_Avg*WT_SONIC_Cov_fc_SND
EndIf
#EndIf
TSTAR = - WT_SONIC_Cov_fc_SND/USTAR
#If (NOT (SENSOR_T_RH)) Then
sigma_wpl    = H2O_density_Avg/rho_d_Avg
CO2_E_WPL_fc = MU_WPL*CO2_density_Avg*WH2O_Cov_fc/rho_d_Avg
CO2_T_WPL_fc = (1 + (MU_WPL*sigma_wpl))*CO2_density_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_2+T_0C_K)
#Else
sigma_wpl    = H2O_density_probe_Avg/rho_d_probe_Avg
CO2_E_WPL_fc = MU_WPL*CO2_density_Avg*WH2O_Cov_fc/rho_d_probe_Avg
CO2_T_WPL_fc = (1 + (MU_WPL*sigma_wpl))*CO2_density_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_3+T_0C_K)
If ((H2O_density_probe_Avg = NaN) OR (rho_d_probe_Avg = NaN) OR (TA_1_1_3 = NaN))  Then
sigma_wpl    = H2O_density_Avg/rho_d_Avg
CO2_E_WPL_fc = MU_WPL*CO2_density_Avg*WH2O_Cov_fc/rho_d_Avg
CO2_T_WPL_fc = (1 + (MU_WPL*sigma_wpl))*CO2_density_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_2 + T_0C_K)
EndIf
#EndIf
FC_mass  = WCO2_Cov_fc + CO2_E_WPL_fc + CO2_T_WPL_fc
FC = 22.72237*FC_mass
H2O_E_WPL_fc  = MU_WPL*sigma_wpl*WH2O_Cov_fc
#If (NOT (SENSOR_T_RH)) Then
H2O_T_WPL_fc  = (1 + (MU_WPL*sigma_wpl))*H2O_density_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_2 + T_0C_K)
Lv  = 2501 - 2.365*TA_1_1_2
#Else
H2O_T_WPL_fc  = (1 + (MU_WPL*sigma_wpl))*H2O_density_probe_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_3 + T_0C_K)
Lv  = 2501 - 2.365*TA_1_1_3
If ((H2O_density_probe_Avg = NaN) OR (TA_1_1_3 = NaN))  Then
H2O_T_WPL_fc  = (1 + (MU_WPL*sigma_wpl))*H2O_density_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_2 + T_0C_K)
Lv  = 2501 - 2.365*TA_1_1_2
EndIf
#EndIf
FH2O = 55.50844*(WH2O_Cov_fc + H2O_E_WPL_fc + H2O_T_WPL_fc)
LE   = Lv* (WH2O_Cov_fc + H2O_E_WPL_fc + H2O_T_WPL_fc)
ET   = 3.6*(WH2O_Cov_fc + H2O_E_WPL_fc + H2O_T_WPL_fc)
Bowen_ratio = H/LE
RN_WT_SONIC_cov  = ABS((RN_WT_SONIC_cov/nmbr_interval_qc_csat - WT_SONIC_Cov)/WT_SONIC_Cov)
Select Case H
Case Is <> NaN
Call Data_Quality_SSITC_w_WndDir_Scalar  (ZL, W_SIGMA, USTAR, T_SONIC_SIGMA, TSTAR, latitude, WD_SONIC, RN_WT_SONIC_cov, H_QC)
Call Data_Quality_SSITC_wo_WndDir_Scalar (ZL, W_SIGMA, USTAR, T_SONIC_SIGMA, TSTAR, latitude,           RN_WT_SONIC_cov, H_SSITC_TEST)
Case Is = NaN
H_QC         = NaN
H_SSITC_TEST = NaN
EndSelect
RN_WT_SONIC_cov = 0.0
nmbr_interval_qc_csat = 0.0
RN_WCO2_Cov = ABS((RN_WCO2_Cov/nmbr_interval_qc_irga - WCO2_Cov)/WCO2_Cov)
Call Data_Quality_SSITC_w_WndDir_Scalar  (ZL, W_SIGMA, USTAR, T_SONIC_SIGMA, TSTAR, latitude, WD_SONIC, RN_WCO2_Cov, FC_QC)
Call Data_Quality_SSITC_wo_WndDir_Scalar (ZL, W_SIGMA, USTAR, T_SONIC_SIGMA, TSTAR, latitude,           RN_WCO2_Cov, FC_SSITC_TEST)
RN_WCO2_Cov   = 0.0
RN_WH2O_Cov = ABS((RN_WH2O_Cov/nmbr_interval_qc_irga - WH2O_Cov)/WH2O_Cov)
Call Data_Quality_SSITC_w_WndDir_Scalar  (ZL, W_SIGMA, USTAR, T_SONIC_SIGMA, TSTAR, latitude, WD_SONIC, RN_WH2O_Cov, LE_QC)
Call Data_Quality_SSITC_wo_WndDir_Scalar (ZL, W_SIGMA, USTAR, T_SONIC_SIGMA, TSTAR, latitude,           RN_WH2O_Cov, LE_SSITC_TEST)
RN_WH2O_Cov   = 0.0
nmbr_interval_qc_irga = 0.0
datalogger_clock = status.timestamp(4,1)
TIMESTAMP_END = Left (datalogger_clock, 4) & Mid (datalogger_clock, 6, 2) & Mid (datalogger_clock, 9, 2) & Mid (datalogger_clock,12,2)& Mid (datalogger_clock,15,2)
EndIf
#If (SENSOR_Rn) Then
CallTable stats_net_radiation
If (stats_net_radiation.Output(1,1)) Then
GetRecord (NETRAD, stats_net_radiation, 1)
EndIf
#EndIf
#If (SENSOR_HFP) Then
CallTable stats_SHF
If (stats_SHF.Output(1,1)) Then
GetRecord (G_plate_1_1_1, stats_SHF, 1)
#If (SENSOR_CS65X) Then
For i = 1 To NMBR_HFP
SG_rep(i) = ((Tsoil_current(i) - Tsoil_prev(i))*Cds*soil_bulk_density + _
(Tsoil_current(i)*soil_wtr_current(i) - Tsoil_prev(i)*soil_wtr_prev(i))*1000*Cw)*thick_abv_SHFP/(60*OUTPUT_INTV - Offset_intv_delta_ht_storage)
G_surface_rep(i) = shf_plate_avg(i) + SG_rep(i)
Next i
AvgSpa(G_surface, NMBR_HFP, shf_plate_avg(1))
AvgSpa(SG,        NMBR_HFP, SG_rep(1))
G_surface = G_surface + SG
Offset_intv_delta_ht_storage = 0
#If (SENSOR_TCAV) Then
Move (Tsoil_prev (1), NMBR_TCAV, Tsoil_current(1), NMBR_TCAV)
#EndIf
#If ((NOT SENSOR_TCAV) AND SENSOR_CS65X) Then
Move (Tsoil_prev (1), NMBR_CS65X, Tsoil_current(1), NMBR_CS65X)
#EndIf
Move (soil_wtr_prev(1), NMBR_CS65X, soil_wtr_current(1), NMBR_CS65X)
#If (SENSOR_Rn) Then
If (ABS(NETRAD - G_surface) > 0.1) Then
energy_closure = (LE + H)/(NETRAD - G_surface)
Else
energy_closure = 1
EndIf
#If (SENSOR_TE525) Then
If (((energy_closure > 1.25) OR (energy_closure < 0.75) OR (energy_closure = NaN)) AND (USTAR > 0.2)  AND (RH_1_1_2 < 85) AND (P_cumul_win_interval = 0) AND (sun_elevation > 15)) Then
poor_energy_closure_flg = TRUE
Else
poor_energy_closure_flg = (energy_closure = NaN)
EndIf
P_cumul_win_interval = 0
#EndIf
#EndIf
#EndIf
EndIf
#EndIf
#If (SENSOR_LI7700) Then
For i = MAX_LAG2 To - MAX_LAG2 Step -1
array_index = MAX_LAG2 + 1 - i
GetRecord (dly_data_CH4_out(1), delay_ga_77, (LI7700_REC_BCK + i))
Cov_array_CH4(array_index, 1) = dly_data_CH4_out(1)
Cov_array_CH4(array_index, 2) = dly_data_CH4_out(2)
Cov_array_CH4(array_index, 3) = dly_data_CH4_out(3)
Move (Cov_array_CH4(array_index, 4), 3, Ux, 3)
CH4_bad_data_flg(array_index) = (dly_data_CH4_out(6) = -1)
If(i = 0) Then
Move (ga_77_ts(1), 5, dly_data_CH4_out(1), 5)
EndIf
Next i
CallTable comp_cov_ga77_5min
CallTable comp_cov_ga_77
If (comp_cov_ga77_5min.Output(1, 1) AND comp_cov_3d_5min.Output(1, 1)) Then
GetRecord (Cov_out_CH4_SST(1), comp_cov_ga77_5min, 1)
If (NOT Planar_Fit_flg) Then
Call Rotation12_Scalar_Covariance (alpha_5min, gamma_5min, _
UxCH4_Cov_SST, UyCH4_Cov_SST, UzCH4_Cov_SST, _
UCH4_Cov_SST,  VCH4_Cov_SST,  WCH4_Cov_SST)
Else
Call Rotation23_Scalar_Covariance (alpha_5min, beta_5min, _
UxCH4_Cov_SST, UyCH4_Cov_SST, UzCH4_Cov_SST, _
UCH4_Cov_SST,  VCH4_Cov_SST,  WCH4_Cov_SST)
EndIf
If (WCH4_Cov_SST <> NaN) Then
RN_WCH4_Cov += WCH4_Cov_SST
nmbr_interval_qc_ga77 += 1
EndIf
EndIf
If (comp_cov_ga_77.Output(1,1) AND comp_cov_ga77_5min.Output(1,1) AND comp_mean.Output(1,1) AND comp_cov_h2o.Output(1,1)) Then
GetRecord (P77_Avg_lag_b10, comp_cov_ga_77, 1)
WCH4_cov_major_sign = 0
For i = 1 To (2* MAX_LAG2 + 1)
array_index = 8*(i -1) + 5
If (NOT Planar_Fit_flg) Then
Call Rotation12_Scalar_Covariance (alpha, gamma, _
Cov_out_CH4(array_index), Cov_out_CH4(array_index + 1), Cov_out_CH4(array_index + 2), _
UCH4_Cov_lag(i),          VCH4_Cov_lag(i),              WCH4_Cov_lag (i))
Else
Call Rotation23_Scalar_Covariance (alpha, beta, _
Cov_out_CH4(array_index), Cov_out_CH4(array_index + 1), Cov_out_CH4(array_index + 2), _
UCH4_Cov_lag(i),          VCH4_Cov_lag(i),              WCH4_Cov_lag (i))
EndIf
WCH4_cov_major_sign += WCH4_Cov_lag(i)
Next i
Call Separation_Lag_Lateral_Distances (WD_SONIC, SEPARATION_X_GA_77, SEPARATION_Y_GA_77, separation_lat_dist_CH4, separation_lag_dist_CH4)
separation_lag_scan_CH4 = 1000.0*(separation_lag_dist_CH4/WS_RSLT)/SCN_INTV
WCH4_Cov = NaN
Select Case WCH4_cov_major_sign
Case Is >= 0.0
If (separation_lag_scan_CH4 <= - MAX_LAG2)        Then
MaxSpa (WCH4_Cov, 2, WCH4_Cov_lag(1))
lag_CH4 = 1
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 1) Then
MaxSpa (WCH4_Cov, 3, WCH4_Cov_lag(1))
lag_CH4 = 1
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 2) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(1))
lag_CH4 = 1
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 3) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(2))
lag_CH4 = 2
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 4) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(3))
lag_CH4 = 3
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 5) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(4))
lag_CH4 = 4
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 6) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(5))
lag_CH4 = 5
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 7) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(6))
lag_CH4 = 6
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 8) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(7))
lag_CH4 = 7
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 9) Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(8))
lag_CH4 = 8
ElseIf separation_lag_scan_CH4 < 0               Then
MaxSpa (WCH4_Cov, 3, WCH4_Cov_lag(9))
lag_CH4 = 9
ElseIf separation_lag_scan_CH4 = 0               Then
MaxSpa (WCH4_Cov, 3, WCH4_Cov_lag(10))
lag_CH4 = 10
ElseIf separation_lag_scan_CH4 < 1               Then
MaxSpa (WCH4_Cov, 3, WCH4_Cov_lag(MAX_LAG2 + 1))
lag_CH4 = MAX_LAG2 + 1
ElseIf separation_lag_scan_CH4 < 2               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 1))
lag_CH4 = MAX_LAG2 + 1
ElseIf separation_lag_scan_CH4 < 3               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 2))
lag_CH4 = MAX_LAG2 + 2
ElseIf separation_lag_scan_CH4 < 4               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 3))
lag_CH4 = MAX_LAG2 + 3
ElseIf separation_lag_scan_CH4 < 5               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 4))
lag_CH4 = MAX_LAG2 + 4
ElseIf separation_lag_scan_CH4 < 6               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 5))
lag_CH4 = MAX_LAG2 + 5
ElseIf separation_lag_scan_CH4 < 7               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 6))
lag_CH4 = MAX_LAG2 + 6
ElseIf separation_lag_scan_CH4 < 8               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 7))
lag_CH4 = MAX_LAG2 + 7
ElseIf separation_lag_scan_CH4 < 9               Then
MaxSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 8))
lag_CH4 = MAX_LAG2 + 8
ElseIf separation_lag_scan_CH4 < 10              Then
MaxSpa (WCH4_Cov, 3, WCH4_Cov_lag(MAX_LAG2 + 9))
lag_CH4 = MAX_LAG2 + 9
Else
MaxSpa (WCH4_Cov, 2, WCH4_Cov_lag(2*MAX_LAG2)
lag_CH4 = 2*MAX_LAG2
EndIf
Case Is < 0.0
If (separation_lag_scan_CH4 <= - MAX_LAG2)        Then
MinSpa (WCH4_Cov, 2, WCH4_Cov_lag(1))
lag_CH4 = 1
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 1) Then
MinSpa (WCH4_Cov, 3, WCH4_Cov_lag(1))
lag_CH4 = 1
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 2) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(1))
lag_CH4 = 1
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 3) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(2))
lag_CH4 = 2
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 4) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(3))
lag_CH4 = 3
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 5) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(4))
lag_CH4 = 4
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 6) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(5))
lag_CH4 = 5
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 7) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(6))
lag_CH4 = 6
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 8) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(7))
lag_CH4 = 7
ElseIf separation_lag_scan_CH4 < - (MAX_LAG2 - 9) Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(8))
lag_CH4 = 8
ElseIf separation_lag_scan_CH4 < 0               Then
MinSpa (WCH4_Cov, 3, WCH4_Cov_lag(9))
lag_CH4 = 9
ElseIf separation_lag_scan_CH4 = 0               Then
MinSpa (WCH4_Cov, 3, WCH4_Cov_lag(10))
lag_CH4 = 10
ElseIf separation_lag_scan_CH4 < 1               Then
MinSpa (WCH4_Cov, 3, WCH4_Cov_lag(MAX_LAG2 + 1))
lag_CH4 = MAX_LAG2 + 1
ElseIf separation_lag_scan_CH4 < 2               Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 1))
lag_CH4 = MAX_LAG2 + 1
ElseIf separation_lag_scan_CH4 < 3               Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 2))
lag_CH4 = MAX_LAG2 + 2
ElseIf separation_lag_scan_CH4 < 4               Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 3))
lag_CH4 = MAX_LAG2 + 3
ElseIf separation_lag_scan_CH4 < 5               Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 4))
lag_CH4 = MAX_LAG2 + 4
ElseIf separation_lag_scan_CH4 < 6               Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 5))
lag_CH4 = MAX_LAG2 + 5
ElseIf separation_lag_scan_CH4 < 7               Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 6))
lag_CH4 = MAX_LAG2 + 6
ElseIf separation_lag_scan_CH4 < 8               Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 7))
lag_CH4 = MAX_LAG2 + 7
ElseIf separation_lag_scan_CH4 < 9              Then
MinSpa (WCH4_Cov, 4, WCH4_Cov_lag(MAX_LAG2 + 8))
lag_CH4 = MAX_LAG2 + 8
ElseIf separation_lag_scan_CH4 < 10              Then
MinSpa (WCH4_Cov, 3, WCH4_Cov_lag(MAX_LAG2 + 9))
lag_CH4 = MAX_LAG2 + 9
Else
MinSpa (WCH4_Cov, 2, WCH4_Cov_lag(2*MAX_LAG2))
lag_CH4 = 2*MAX_LAG2
EndIf
EndSelect
For i = 1 To (2* MAX_LAG2 + 1)
If ((ABS(WCH4_Cov - WCH4_Cov_lag(i)) < 1.0e-10) AND (ABS(lag_CH4 - i) < 4)) Then
lag_CH4 = i
ExitFor
EndIf
Next i
If (WCH4_Cov = NaN) Then lag_CH4 = MAX_LAG2 + 1
array_index   = 8*(lag_CH4 - 1)
press_77_Avg  = Cov_out_CH4(array_index + 1)
tmpr_77_Avg   = Cov_out_CH4(array_index + 2)
CH4_Avg       = Cov_out_CH4(array_index + 3)
CH4_SIGMA     = SQR(Cov_out_CH4(array_index + 4))
UxCH4_Cov     = Cov_out_CH4(array_index + 5)
UyCH4_Cov     = Cov_out_CH4(array_index + 6)
UzCH4_Cov     = Cov_out_CH4(array_index + 7)
nmbr_smpl_CH4 = Cov_out_CH4(array_index + 8)
CH4_Avg_MolFrac = CH4_Avg*R*1.0e6*(tmpr_77_Avg + T_0C_K)/press_77_Avg
UCH4_Cov = UCH4_Cov_lag(lag_CH4)
VCH4_Cov = VCH4_Cov_lag(lag_CH4)
lag_CH4  = lag_CH4 - (MAX_LAG2 + 1)
Call FreqFactorCSOPEC_wch4_BA_LA_SP(z, ZL, WS_RSLT, separation_lat_dist_CH4, PATH_LENGTH_GA77, FreqFactor_WCH4)
WCH4_Cov_fc = FreqFactor_WCH4*WCH4_Cov
press_77_Eqv = press_77_Avg * (1 + 0.46*H2O/1000.0)
tmpr_77_Avg2 = tmpr_77_Avg * tmpr_77_Avg
Spec_Sc_Bapk = (be1*tmpr_77_Avg + be2)*press_77_Eqv + (be3*tmpr_77_Avg + be4)
Spec_Sc_Ctk  = (ce11*tmpr_77_Avg2 + ce12*tmpr_77_Avg + ce13)*press_77_Eqv + (ce21*tmpr_77_Avg2 + ce22*tmpr_77_Avg + ce23)
Spec_Sc_A  = (ke12*tmpr_77_Avg + ke13)*press_77_Eqv*press_77_Eqv
Spec_Sc_A += (ke21*tmpr_77_Avg2 + ke22*tmpr_77_Avg + ke23)*press_77_Eqv
Spec_Sc_A += ke31*tmpr_77_Avg2 + ke32*tmpr_77_Avg + ke33
Spec_Sc_B = 1.0 + (1.0 - 1.46*H2O/1000.0)*Spec_Sc_Bapk
Spec_Sc_C = 1.0 + (1.0 - H2O/1000.0)*Spec_Sc_Ctk
#If (NOT (SENSOR_T_RH)) Then
sigma_wpl    = H2O_density_Avg/rho_d_Avg
CH4_E_WPL_fc = Spec_Sc_B*MU_WPL*CH4_Avg*WH2O_Cov_fc/rho_d_Avg
CH4_T_WPL_fc = Spec_Sc_C*(1 + (MU_WPL*sigma_wpl))*CH4_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_2 + T_0C_K)
#Else
sigma_wpl    = H2O_density_probe_Avg/rho_d_probe_Avg
CH4_E_WPL_fc = Spec_Sc_B*MU_WPL*CH4_Avg*WH2O_Cov_fc/rho_d_probe_Avg
CH4_T_WPL_fc = Spec_Sc_C*(1 + (MU_WPL*sigma_wpl))*CH4_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_3 + T_0C_K)
If ((H2O_density_probe_Avg = NaN) OR (rho_d_probe_Avg = NaN) OR (TA_1_1_3 = NaN)) Then
sigma_wpl    = H2O_density_Avg/rho_d_Avg
CH4_E_WPL_fc = Spec_Sc_B*MU_WPL*CH4_Avg*WH2O_Cov_fc/rho_d_Avg
CH4_T_WPL_fc = Spec_Sc_C*(1 + (MU_WPL*sigma_wpl))*CH4_Avg*WT_SONIC_Cov_fc_SND/(TA_1_1_2 + T_0C_K)
EndIf
#EndIf
FCH4  = Spec_Sc_A*(WCH4_Cov_fc + CH4_E_WPL_fc + CH4_T_WPL_fc)*1.0e6
FCH4_mass = FCH4*16.0
RN_WCH4_Cov = ABS((RN_WCH4_Cov/nmbr_interval_qc_ga77 - WCH4_Cov)/WCH4_Cov)
Call Data_Quality_SSITC_wo_WndDir_Scalar (ZL, W_SIGMA, USTAR, T_SONIC_SIGMA, TSTAR, latitude, RN_WCH4_Cov, FCH4_SSITC_TEST)
RN_WCH4_Cov   = 0.0
nmbr_interval_qc_ga77 = 0.0
EndIf
#EndIf
CallTable Time_Series
CallTable Flux_AmeriFluxFormat
CallTable Flux_CSFormat
#If (NOT ONE_FL_TABLE) Then
CallTable Flux_Notes
#EndIf
If (Flux_AmeriFluxFormat.Output(1,1)) Then
diag_sonic_aggregate = &H0
diag_irga_aggregate  = &H0
#If (SENSOR_LI7700) Then
diag_77_aggregate = &H0
#EndIf
TIMESTAMP_START = TIMESTAMP_END
Erase(TIMESTAMP_END)
EndIf
slowsequence_disable_f = TRUE
If (slowsequence_finished_f) Then
slowsequence_finished_f = FALSE
slowsequence_disable_f  = FALSE
EndIf
Else
scan_count += 1
EndIf
NextScan
SlowSequence
Scan (SLW_SCN_INTV, mSec, 7, 0)
secs_snc_pwr_swtch = Timer(1, sec, 4)
Battery (V_batt)
If (V_batt < SYSTEM_PWR_OFF_SET_PT) AND (NOT irga_pwr_off_f) Then
cnt_lwr_pwr_off_set_pt = cnt_lwr_pwr_off_set_pt + 1
Else
cnt_lwr_pwr_off_set_pt = 0
EndIf
AvgRun (V_batt_runng, 1, V_batt, (120000/SLW_SCN_INTV))
PanelTemp (T_panel, NTCH_FRQ_SLW)
process_time = (Status.ProcessTime(1,1))/1000.0
buff_depth   = Status.BuffDepth(1,1)
CallTable diagnostic
#If (SENSOR_Rn) Then
#If (SENSOR_SN500) Then
SDI12Recorder (R_SW_in, SN500_SDI_PORT, SN500SDI_ADR, "M!",  1, 0, -1)
SW_IN      = R_SW_in
NETRAD_raw = R_SW_in - R_SW_out + R_LW_in - R_LW_out
If ((R_SW_in > 10) AND (R_SW_in >= R_SW_out)) Then
albedo = 100.0*(R_SW_out/R_SW_in)
Else
albedo = 0.0
EndIf
SDI12Recorder(LW_in_sgnl_mV, SN500_SDI_PORT, SN500SDI_ADR, "M3!",  1, 0, -1)
T_nr     = LW_in_tmpr  + T_0C_K
T_nr_out = LW_out_tmpr + T_0C_K
#If (SENSOR_T_RH) Then
If ((T_probe - T_DP_Probe >= SN500_HEATER_T_TD_THRSHLD) OR (V_batt_runng <= SYSTEM_PWR_OFF_SET_PT)) Then
#Else
If ((Tc - T_DP >= SN500_HEATER_T_TD_THRSHLD) OR (V_batt_runng <= SYSTEM_PWR_OFF_SET_PT)) Then
#EndIf
If (sn500_heater_on_f) Then
SDI12Recorder(sn500_heater_set_dummy, SN500_SDI_PORT, SN500SDI_ADR, "XHOFF!", 1, 0, -1)
sn500_heater_on_f = FALSE
EndIf
EndIf
#If (SENSOR_T_RH) Then
If ((T_probe - T_DP_Probe < SN500_HEATER_T_TD_THRSHLD) AND (V_batt_runng > SYSTEM_PWR_OFF_SET_PT)) Then
#Else
If ((Tc - T_DP < SN500_HEATER_T_TD_THRSHLD) AND (V_batt_runng > SYSTEM_PWR_OFF_SET_PT)) Then
#EndIf
If (NOT sn500_heater_on_f) Then
SDI12Recorder(sn500_heater_set_dummy, SN500_SDI_PORT, SN500SDI_ADR, "XHON!", 1, 0, -1)
sn500_heater_on_f = TRUE
EndIf
EndIf
#EndIf
#EndIf
#If (SENSOR_HFP) Then
VoldDiff (shf_plate(1), NMBR_HFP, mV200C, SHF_ANALOG_INPUT, TRUE, 500, NTCH_FRQ_SLW, shf_plate_cal(), 0)
#EndIf
#If (SENSOR_TCAV) Then
#If (NMBR_TCAV <= 2) Then
VoldDiff (Tsoil(1), NMBR_TCAV, mV200, TCAV_ANALOG_INPUT +1, TypeE, T_cdm_volt_1, TRUE, 500, NTCH_FRQ_SLW, 1, 0)
#Else
VoldDiff (Tsoil(1), NMBR_TCAV, mV200, TCAV_ANALOG_INPUT,    TypeE, T_cdm_volt_1, TRUE, 500, NTCH_FRQ_SLW, 1, 0)
#EndIf
Move(TS_1_1_1, NMBR_TCAV, Tsoil(1), NMBR_TCAV)
#If (SENSOR_HFP AND SENSOR_CS65X) Then
AvgRun (Tsoil_current(1), NMBR_TCAV, Tsoil(1), NMBR_SOIL_T_WTR_DEL_SAMPLES)
For i_slow = 1 To NMBR_TCAV
If (Tsoil_prev(i_slow) = NaN) Then
Tsoil_prev(i_slow) = Tsoil(i_slow)
EndIf
Next i_slow
#EndIf
#EndIf
#If (SENSOR_CS65X) Then
SDI12Recorder (cs65x_raw(1), CS65X_SDI_PORT, CS65SDI_ADR1, "M!", 1, 0, -1)
cs65x_wc(1)   = cs65x_raw(1)
cs65x_ec(1)   = cs65x_raw(2)
cs65x_tmpr(1) = cs65x_raw(3)
#If (NMBR_CS65X > 1) Then
SDI12Recorder (cs65x_raw(1), CS65X_SDI_PORT, CS65SDI_ADR2, "M!", 1, 0, -1)
cs65x_wc(2)   = cs65x_raw(1)
cs65x_ec(2)   = cs65x_raw(2)
cs65x_tmpr(2) = cs65x_raw(3)
#EndIf
#If (SENSOR_CS65X AND (NOT SENSOR_TCAV)) Then
Move (TS_1_1_1, NMBR_CS65X, cs65x_tmpr(1), NMBR_CS65X)
#EndIf
For i_slow = 1 To NMBR_CS65X
If ((cs65x_wc(i_slow) > 0.05) AND  (cs65x_wc(i_slow) <> NaN)) Then
SWC_array(i_slow) = cs65x_wc(i_slow)*(1.32 - 1.6*cs65x_wc(i_slow) + 2.4* cs65x_wc(i_slow)*cs65x_wc(i_slow)) _
+ cs65x_tmpr(i_slow)*cs65x_wc(i_slow)*(0.0029 + 0.0014*cs65x_wc(i_slow) - 0.0044*cs65x_wc(i_slow)*cs65x_wc(i_slow)) _
- 0.0002*cs65x_tmpr(i_slow) - 0.046
Else
SWC_array(i_slow) = cs65x_wc(i_slow)
EndIf
Next i_slow
#If (SENSOR_HFP) Then
AvgRun (soil_wtr_current(1), NMBR_CS65X, SWC_array(1), NMBR_SOIL_T_WTR_DEL_SAMPLES)
For i_slow = 1 To NMBR_CS65X
If (soil_wtr_prev(i_slow) = NaN) Then
soil_wtr_prev(i_slow) = SWC_array(i_slow)
EndIf
Next i_slow
#If (SENSOR_CS65X AND (NOT SENSOR_TCAV)) Then
AvgRun (Tsoil_current(1), NMBR_CS65X, cs65x_tmpr(1), NMBR_SOIL_T_WTR_DEL_SAMPLES)
For i_slow = 1 To NMBR_CS65X
If (Tsoil_prev (i_slow) = NaN) Then
Tsoil_prev(i_slow) = cs65x_tmpr(i_slow)
EndIf
Next  i_slow
#EndIf
#EndIf
For i_slow = 1 To NMBR_CS65X
SWC_array(i_slow) = 100*SWC_array(i_slow)
Next i_slow
#EndIf
#If (SENSOR_CS310) Then
VoltDiff(PPFD_IN, 1, mV200, QUANTUM_ANALOG_INPUT, TRUE, 500, NTCH_FRQ_SLW, 1, 0)
If (PPFD_IN <= 0) Then
PPFD_IN = 0
Else
PPFD_IN = QUNTM_MULT*PPFD_IN
EndIf
#EndIf
#If (SENSOR_GPS) Then
If (gps_ready > gps_ready_best) Then
latitude = latitude_GPS_degree + latitude_GPS_minute/60
hemisphere_NS = SGN (latitude_GPS_degree)*1
longitude = longitude_GPS_degree + longitude_GPS_minute/60
hemisphere_EW = SGN (longitude_GPS_degree)*1
elevation = elevation_GPS - height_GPS16X
gps_ready_best = gps_ready
EndIf
#EndIf
RealTime(realtime_array(1))
SolarPosition(solar_position_array(1), realtime_array(1), UTC_OFST*3600, latitude, longitude, elevation, 10*press_amb, T_amb)
hour_angle      = 180.0*hour_angle/PI
sun_declination = 180.0*sun_declination/PI
If (sun_elevation > 0) Then
daytime = 1
daytime_frac_scan_intv = SCAN_INTERVAL_WEIGHT
Else
daytime = 0
daytime_frac_scan_intv = 0
EndIf
If ((V_batt_runng < SYSTEM_PWR_OFF_SET_PT) AND (cnt_lwr_pwr_off_set_pt > (120000/SLW_SCN_INTV)) AND _
(IfTime(0, 2*SLW_SCN_INTV, mSec)) AND (irga_off_bit <> &h000100) AND (irga_startup_bit <> &h000004)) Then
irga_pwr_switch_f      = TRUE
irga_pwr_array(1, 2)   = PWR_OFF
irga_pwr_array(2, 2)   = H_OFF
cnt_lwr_pwr_off_set_pt = 0
Move(pwr_ctrl_sdmcd16ac,2,FALSE,1)
prev_value_str = "Batt volt >" & SYSTEM_PWR_OFF_SET_PT & " V"
curr_value_str = "Batt volt =" & V_batt_runng & " V"
message        = "IRGA auto-off: low volt."
ElseIf ((V_batt_runng > SYSTEM_PWR_OFF_SET_PT + SYSTEM_PWR_DEAD_BAND_WIDTH) AND _
(secs_snc_pwr_swtch > 100) AND (irga_vlt_low_auto_off) AND (irga_user_set_pwr_on)) Then
irga_pwr_switch_f    = TRUE
irga_pwr_array(1, 2) = PWR_ON
irga_pwr_array(2, 2) = heater_user
Move(pwr_ctrl_sdmcd16ac,2,TRUE,1)
prev_value_str = "Batt volt <" & SYSTEM_PWR_OFF_SET_PT & " V"
curr_value_str = "Batt volt =" & V_batt_runng & " V"
message = "IRGA auto-on: volt resumed."
EndIf
For i_slow = 1 To NMBR_STN_VAR
If (stn_conf_array_prev(i_slow) <> stn_conf_array(i_slow)) Then
Select Case i_slow
Case 1
If ((sonic_azimuth < 0.0) OR (sonic_azimuth > 360.0)) Then
sonic_azimuth = stn_conf_array_prev(1)
EndIf
Case 2
If (ABS(latitude) > 90.0) Then
latitude = stn_conf_array_prev(2)
EndIf
Case 3
If ((hemisphere_NS <> NORTH) AND (hemisphere_NS <> SOUTH)) Then
hemisphere_NS = stn_conf_array_prev(3)
EndIf
If (hemisphere_NS = NORTH) Then
latitude = ABS(latitude)
Else
latitude = - ABS(latitude)
EndIf
Case 4
If (ABS(longitude) > 180.0) Then
longitude = stn_conf_array_prev(4)
EndIf
Case 5
If ((hemisphere_EW <> EAST) AND (hemisphere_EW <> WEST)) Then
hemisphere_EW = stn_conf_array_prev(5)
EndIf
If (hemisphere_EW = EAST) Then
longitude = ABS(longitude)
Else
longitude = -ABS(longitude)
EndIf
Case 6
If ((elevation > 8000.0) OR (elevation < -1000.0))  Then
elevation = stn_conf_array_prev(6)
EndIf
Case 7, 8, 9, 10, 11
If ((height_measurement > 250.0) OR (height_measurement < 0.2)) Then
height_measurement = stn_conf_array_prev(7)
EndIf
If (((surface_type = CROP) OR (surface_type = GRASS) OR (surface_type = SHRUB)) AND ((height_measurement > 100 OR height_measurement < 0.2))) Then
height_measurement = stn_conf_array_prev(7)
EndIf
If ((surface_type = FOREST) AND ((height_measurement > 250.0) OR (height_measurement < 0.2))) Then
height_measurement = stn_conf_array_prev(7)
EndIf
If ((surface_type < CROP) OR (surface_type > ICE)) Then
surface_type = stn_conf_array_prev(8)
EndIf
If ((surface_type = BARELAND) OR (surface_type = WATER) OR (surface_type = ICE)) Then
height_canopy = 0
EndIf
If (((surface_type = CROP) OR (surface_type = GRASS) OR (surface_type = SHRUB)) AND (height_canopy > 15)) Then
height_canopy = stn_conf_array_prev(9)
EndIf
If ((surface_type = FOREST ) AND (height_canopy > 100.0)) Then
height_canopy = stn_conf_array_prev(9)
EndIf
If ((displacement_user > height_measurement) OR (displacement_user < 0.0)) Then
displacement_user = stn_conf_array_prev(10)
EndIf
If ((roughness_user > height_measurement) OR (roughness_user < 0.0) OR (roughness_user > d)) Then
roughness_user = stn_conf_array_prev(11)
EndIf
Call Displacement_roughness_heights (surface_type, displacement_user, roughness_user, height_canopy, height_measurement, d, z0, z)
surface_type_text = surface_type_array(surface_type)
For j_slow = 14 To 17
If (stn_conf_array(j_slow) = 100.0*z_prev) Then
stn_conf_array(j_slow) = 100.0*z
EndIf
Next j_slow
z_prev = z
Case 12, 13
separation_x_irga = 0.0
separation_y_irga = 0.0
Case 14, 15, 16, 17
If ((stn_conf_array (i_slow) > 5000) OR (stn_conf_array (i_slow) < 0)) Then
stn_conf_array(i_slow) = stn_conf_array_prev(i_slow)
EndIf
Case 18, 19
If ((stn_conf_array(i_slow) < 0) OR (stn_conf_array(i_slow) > 360) OR (stn_conf_array(18) > stn_conf_array(19))) Then
stn_conf_array(i_slow) = stn_conf_array_prev(i_slow)
EndIf
EndSelect
#If (SENSOR_GPS) Then
If (height_GPS16X > height_measurement + 10) OR (height_GPS16X < 0) Then
height_GPS16X = stn_conf_array_prev(20)
EndIf
#EndIf
#If (SENSOR_HFP AND SENSOR_CS65X)) Then
If (soil_bulk_density > 1800.0) OR (soil_bulk_density <600.0) Then
soil_bulk_density = stn_conf_array_prev(20 - 1*SENSOR_GPS -3*SENSOR_FW)
EndIf
If (Cds < 400.0) OR (Cds > 1500.0) Then
Cds = stn_conf_array_prev(21 - 1*SENSOR_GPS -3*SENSOR_FW)
EndIf
If (thick_abv_SHFP > 0.30) OR (thick_abv_SHFP < 0.0) Then
thick_abv_SHFP = stn_conf_array_prev(22 - 1*SENSOR_GPS -3*SENSOR_FW)
EndIf
#EndIf
Calfile (stn_conf_array(1), NMBR_STN_VAR, "CPU:stn_conf_array.dat", 0)
Move(stn_conf_array_prev(1), NMBR_STN_VAR , stn_conf_array(1), NMBR_STN_VAR)
ExitFor
EndIf
If (i_slow <= 4) Then
For j_slow = 1 To 4
If (planar_fit_angle_conf_array_prev(j_slow, 1) <> planar_fit_angle_conf_array(j_slow, 1)) _
OR (planar_fit_angle_conf_array_prev(j_slow, 2) <> planar_fit_angle_conf_array(j_slow, 2)) Then
If ((ABS(planar_fit_angle_conf_array(j_slow, 1)) > 30) OR (ABS(planar_fit_angle_conf_array(j_slow, 2)) > 30)) Then
Move (planar_fit_angle_conf_array(j_slow, 1), 2, planar_fit_angle_conf_array_prev(j_slow, 1), 2)
Else
Calfile (planar_fit_angle_conf_array (1,1),8,"CPU:planar_fit_angle_conf_array.dat",0)
Move (planar_fit_angle_conf_array_prev(j_slow, 1), 2, planar_fit_angle_conf_array(j_slow, 1), 2)
EndIf
Planar_Fit_flg = FALSE
For k_slow = 1 To 4
If ((planar_fit_angle_conf_array(k_slow, 1) <> 0) OR (planar_fit_angle_conf_array(k_slow, 2) <> 0)) Then
Planar_Fit_flg = TRUE
ExitFor
EndIf
Next k_slow
ExitFor
EndIf
Next j_slow
EndIf
Next i_slow
If (card_bytes_free >= 0) AND (Status.CardStatus = "Card OK.") Then
card_storage_available_days = card_storage_available_days - (SLW_SCN_INTV/1000)/(24*3600)
days_actv_tbl_Time_Series = days_actv_tbl_Time_Series - (SLW_SCN_INTV/1000)/(24*3600)
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series + days_more_tbl_Time_Series
If ((LastFileName_Time_Series <> LastFileName_Time_Series_prev) AND (realtime_array(4)= 0)) Then
card_bytes_free           = Status.CardBytesFree
card_bytes_free_assgnd    = card_bytes_free_assgnd    - bytes_tbl_Time_Series
days_actv_tbl_Time_Series = DAY_TSRS_CRD
days_more_tbl_Time_Series = days_more_tbl_Time_Series - DAY_TSRS_CRD
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series + days_more_tbl_Time_Series
LastFileName_Time_Series_prev = LastFileName_Time_Series
EndIf
#If (ONE_FL_TABLE) Then
days_actv_tbl_flux_CSFormat = days_actv_tbl_flux_CSFormat - (SLW_SCN_INTV/1000)/(24*3600)
days_totl_tbl_flux_CSFormat = days_actv_tbl_flux_CSFormat + days_more_tbl_flux_CSFormat
#Else
days_actv_tbl_flux_CSFormat_notes = days_actv_tbl_flux_CSFormat_notes - (SLW_SCN_INTV/1000)/(24*3600)
days_totl_tbl_flux_CSFormat_notes = days_actv_tbl_flux_CSFormat_notes + days_more_tbl_flux_CSFormat_notes
#EndIf
If ((LastFileName_flux_CSFormat <> LastFileName_flux_CSFormat_prev) AND (realtime_array(4) = 0)) Then
card_bytes_free           = Status.CardBytesFree
card_bytes_free_assgnd    = card_bytes_free_assgnd - bytes_tbl_flux_CSFormat - bytes_tbl_AmeriFluxFormat
#If (ONE_FL_TABLE) Then
days_actv_tbl_flux_CSFormat = DAY_FLUX_CRD
days_more_tbl_flux_CSFormat = days_more_tbl_flux_CSFormat - DAY_FLUX_CRD
days_totl_tbl_flux_CSFormat = days_actv_tbl_flux_CSFormat + days_more_tbl_flux_CSFormat
#Else
days_actv_tbl_flux_CSFormat_notes = DAY_FLUX_CRD
days_more_tbl_flux_CSFormat_notes = days_more_tbl_flux_CSFormat_notes - DAY_FLUX_CRD
days_totl_tbl_flux_CSFormat_notes = days_actv_tbl_flux_CSFormat_notes + days_more_tbl_flux_CSFormat_notes
#EndIf
LastFileName_flux_CSFormat_prev = LastFileName_flux_CSFormat
EndIf
Else
days_actv_tbl_Time_Series          = NaN
days_more_tbl_Time_Series          = NaN
days_totl_tbl_Time_Series          = NaN
#If (ONE_FL_TABLE) Then
days_actv_tbl_flux_CSFormat       = NaN
days_more_tbl_flux_CSFormat       = NaN
days_totl_tbl_flux_CSFormat       = NaN
#Else
days_actv_tbl_flux_CSFormat_notes = NaN
days_more_tbl_flux_CSFormat_notes = NaN
days_totl_tbl_flux_CSFormat_notes = NaN
#EndIf
card_storage_available_days       = NaN
EndIf
If ((card_storage_available_days = NaN) AND (Status.CardStatus = "Card OK.")) Then
card_bytes_free = Status.CardBytesFree
If (card_bytes_free >= 0) AND (Status.CardStatus = "Card OK.") Then
day_snc_0101_1990 = SecsSince1990(status.TimeStamp(1,1), 1)/(24*3600)
days_actv_tbl_Time_Series = DAY_TSRS_CRD - (day_snc_0101_1990 MOD DAY_TSRS_CRD)
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series
#If (ONE_FL_TABLE) Then
days_actv_tbl_flux_CSFormat = DAY_FLUX_CRD - (day_snc_0101_1990 MOD DAY_FLUX_CRD)
days_totl_tbl_flux_CSFormat = days_actv_tbl_flux_CSFormat
card_bytes_free_assgnd = (days_actv_tbl_flux_CSFormat/DAY_FLUX_CRD)*bytes_tbl_AmeriFluxFormat
#Else
days_actv_tbl_flux_CSFormat_notes = DAY_FLUX_CRD - (day_snc_0101_1990 MOD DAY_FLUX_CRD)
days_totl_tbl_flux_CSFormat_notes = days_actv_tbl_flux_CSFormat_notes
card_bytes_free_assgnd = (days_actv_tbl_flux_CSFormat_notes/DAY_FLUX_CRD)*bytes_tbl_AmeriFluxFormat
#EndIf
card_bytes_free_unassgnd   = card_bytes_free - card_bytes_free_assgnd
days_more_tbl_Time_Series = 0
#If (ONE_FL_TABLE) Then
days_more_tbl_flux_CSFormat = 0
While (((days_totl_tbl_flux_CSFormat >= days_totl_tbl_Time_Series) AND (card_bytes_free_unassgnd > bytes_tbl_Time_Series)) OR _
((days_totl_tbl_flux_CSFormat < days_totl_tbl_Time_Series)  AND (card_bytes_free_unassgnd > (bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat))))
If (days_totl_tbl_flux_CSFormat >= days_totl_tbl_Time_Series) Then
card_bytes_free_assgnd    = card_bytes_free_assgnd    + bytes_tbl_Time_Series
days_more_tbl_Time_Series = days_more_tbl_Time_Series + DAY_TSRS_CRD
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series + days_more_tbl_Time_Series
Else
card_bytes_free_assgnd      = card_bytes_free_assgnd      + bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat
days_more_tbl_flux_CSFormat = days_more_tbl_flux_CSFormat + DAY_FLUX_CRD
days_totl_tbl_flux_CSFormat = days_actv_tbl_flux_CSFormat + days_more_tbl_flux_CSFormat
EndIf
card_bytes_free_unassgnd  = card_bytes_free - card_bytes_free_assgnd
Wend
If (days_totl_tbl_Time_Series >= days_totl_tbl_flux_CSFormat) Then
card_storage_available_days = days_totl_tbl_flux_CSFormat
Else
card_storage_available_days = days_totl_tbl_Time_Series
EndIf
#Else
days_more_tbl_flux_CSFormat_notes = 0
While (((days_totl_tbl_flux_CSFormat_notes >= days_totl_tbl_Time_Series) AND (card_bytes_free_unassgnd > bytes_tbl_Time_Series)) OR _
((days_totl_tbl_flux_CSFormat_notes < days_totl_tbl_Time_Series)  AND (card_bytes_free_unassgnd > (bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat + bytes_tbl_flux_notes))))
If (days_totl_tbl_flux_CSFormat_notes >= days_totl_tbl_Time_Series) Then
card_bytes_free_assgnd    = card_bytes_free_assgnd    + bytes_tbl_Time_Series
days_more_tbl_Time_Series = days_more_tbl_Time_Series + DAY_TSRS_CRD
days_totl_tbl_Time_Series = days_actv_tbl_Time_Series + days_more_tbl_Time_Series
Else
card_bytes_free_assgnd            = card_bytes_free_assgnd + bytes_tbl_flux_CSFormat + bytes_tbl_AmeriFluxFormat + bytes_tbl_flux_notes
days_more_tbl_flux_CSFormat_notes = days_more_tbl_flux_CSFormat_notes + DAY_FLUX_CRD
days_totl_tbl_flux_CSFormat_notes = days_actv_tbl_flux_CSFormat_notes + days_more_tbl_flux_CSFormat_notes
EndIf
card_bytes_free_unassgnd  = card_bytes_free - card_bytes_free_assgnd
Wend
If (days_totl_tbl_Time_Series >= days_totl_tbl_flux_CSFormat_notes) Then
card_storage_available_days = days_totl_tbl_flux_CSFormat_notes
Else
card_storage_available_days = days_totl_tbl_Time_Series
EndIf
#EndIf
LastFileName_Time_Series_prev   = LastFileName_Time_Series
LastFileName_flux_CSFormat_prev = LastFileName_flux_CSFormat
Else
days_actv_tbl_Time_Series          = NaN
days_more_tbl_Time_Series          = NaN
days_totl_tbl_Time_Series          = NaN
#If (ONE_FL_TABLE) Then
days_actv_tbl_flux_CSFormat       = NaN
days_more_tbl_flux_CSFormat       = NaN
days_totl_tbl_flux_CSFormat       = NaN
#Else
days_actv_tbl_flux_CSFormat_notes = NaN
days_more_tbl_flux_CSFormat_notes = NaN
days_totl_tbl_flux_CSFormat_notes = NaN
#EndIf
card_storage_available_days       = NaN
EndIf
EndIf
slowsequence_finished_f = TRUE
NextScan
#If (SENSOR_LI7700) Then
SlowSequence
Do
If pwr_ctrl_sdmcd16ac(1) = True Then
Delay (1,1,Sec)
ga_77_tcip_ip_socket_close_timer = Timer (0,Sec,4)
ga_77_socket = TCPOpen (LI7700_IP_ADDR_str,7700,GA_77_SERIAL_BUFF_SIZE)
If ( ga_77_tcip_ip_socket_close_timer > 80 ) Then
ga_77_tcip_ip_socket_close_timer = Timer (0,Sec,3)
TCPClose (ga_77_socket)
pwr_ctrl_ethernet = FALSE
EndIf
EndIf
EthernetPower(pwr_ctrl_ethernet)
SDMCD16AC(pwr_ctrl_sdmcd16ac(),1,0)
pwr_ctrl_ethernet = TRUE
Loop
#EndIf
EndProg
